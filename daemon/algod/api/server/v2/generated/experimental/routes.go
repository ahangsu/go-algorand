// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a5PcNpLgX0HUboQsXbFbL3tHHTGx15ZkT59lWyG1Pbcr6TwoMqsK0yyAA4DdVdbp",
	"v18gEyBBEqxiPyzNRNwnqYt4JBKJRL6Q+XGWq02lJEhrZicfZxXXfAMWNP7F81zV0maicH8VYHItKiuU",
	"nJ2Eb8xYLeRqNp8J92vF7Xo2n0m+gbaN6z+fafhHLTQUsxOra5jPTL6GDXcD213lWjcjbbOVyvwQpzTE",
	"2YvZpz0feFFoMGYI5c+y3DEh87IugFnNpeG5+2TYlbBrZtfCMN+ZCcmUBKaWzK47jdlSQFmYo7DIf9Sg",
	"d9Eq/eTjS/rUgphpVcIQzudqsxASAlTQANVsCLOKFbDERmtumZvBwRoaWsUMcJ2v2VLpA6ASEDG8IOvN",
	"7OTdzIAsQONu5SAu8b9LDfA7ZJbrFdjZh3lqcUsLOrNik1jamce+BlOX1jBsi2tciUuQzPU6Yj/WxrIF",
	"MC7Zm++esydPnjxzC9lwa6HwRDa6qnb2eE3UfXYyK7iF8HlIa7xcKc1lkTXt33z3HOd/6xc4tRU3BtKH",
	"5dR9YWcvxhYQOiZISEgLK9yHDvW7HolD0f68gKXSMHFPqPGdbko8/xfdlZzbfF0pIW1iXxh+ZfQ5ycOi",
	"7vt4WANAp33lMKXdoO8eZs8+fHw0f/Tw07+9O83+2//59ZNPE5f/vBn3AAaSDfNaa5D5Lltp4Hha1lwO",
	"8fHG04NZq7os2Jpf4ubzDbJ635e5vsQ6L3lZOzoRuVan5UoZxj0ZFbDkdWlZmJjVsnRsyo3mqZ0Jwyqt",
	"LkUBxdxx36u1yNcs54aGwHbsSpSlo8HaQDFGa+nV7TlMn2KUOLhuhA9c0D8vMtp1HcAEbJEbZHmpDGRW",
	"Hbiewo3DZcHiC6W9q8z1Lit2vgaGk7sPdNki7qSj6bLcMYv7WjBuGGfhapozsWQ7VbMr3JxSXGB/vxqH",
	"tQ1zSMPN6dyj7vCOoW+AjATyFkqVwCUiL5y7IcrkUqxqDYZdrcGu/Z2nwVRKGmBq8XfIrdv2//X255+Y",
	"0uxHMIav4DXPLxjIXBVQHLGzJZPKRqThaQlx6HqOrcPDlbrk/26Uo4mNWVU8v0jf6KXYiMSqfuRbsak3",
	"TNabBWi3peEKsYppsLWWYwDRiAdIccO3w0nPdS1z3P922o4s56hNmKrkO0TYhm///HDuwTGMlyWrQBZC",
	"rpjdylE5zs19GLxMq1oWE8Qc6/Y0ulhNBblYCihYM8oeSPw0h+AR8nrwtMJXBE4YZBScZpYD4EjYJmjG",
	"nW73hVV8BRHJHLFfPHPDr1ZdgGwInS12+KnScClUbZpOIzDi1PslcKksZJWGpUjQ2FuPDsdgqI3nwBsv",
	"A+VKWi4kFI45I9DKAjGrUZiiCffrO8NbfMENfPN07I5vv07c/aXq7/reHZ+029gooyOZuDrdV39g05JV",
	"p/8E/TCe24hVRj8PNlKszt1tsxQl3kR/d/sX0FAbZAIdRIS7yYiV5LbWcPJePnB/sYy9tVwWXBfulw39",
	"9GNdWvFWrNxPJf30Sq1E/lasRpDZwJpUuLDbhv5x46XZsd0m9YpXSl3UVbygvKO4Lnbs7MXYJtOY1yXM",
	"00bbjRWP821QRq7bw26bjRwBchR3FXcNL2CnwUHL8yX+s10iPfGl/t39U1Wl622rZQq1jo79lYzmA29W",
	"OK2qUuTcIfGN/+y+OiYApEjwtsUxXqgnHyMQK60q0FbQoLyqslLlvMyM5RZH+ncNy9nJ7N+OW/vLMXU3",
	"x9Hkr1yvt9jJiawkBmW8qq4xxmsn+pg9zMIxaPyEbILYHgpNQtImOlISjgWXcMmlPWpVlg4/aA7wOz9T",
	"i2+SdgjfPRVsFOGMGi7AkARMDe8ZFqGeIVoZohUF0lWpFs0PX51WVYtB/H5aVYQPlB5BoGAGW2GsuY/L",
	"5+1Jiuc5e3HEvo/HRlFcyXLnLgcSNdzdsPS3lr/FGtuSX0M74j3DcDuVPnJbE9DgxPy7oDhUK9aqdFLP",
	"QVpxjf/i28Zk5n6f1Plfg8Ri3I4TFypaHnOk4+AvkXLzVY9yhoTjzT1H7LTf92Zk40ZJE8yNaGXvftK4",
	"e/DYoPBK84oA9F/oLhUSlTRqRLDekptOZHRJmKMzHNEaQnXjs3bwPCQhQVLowfBtqfKLv3CzvoMzvwhj",
	"DY8fTsPWwAvQbM3N+miWkjLi49WONuWIuYao4LNFNNVRs8S7Wt6BpRXc8mhpHt60WEKox37I9EAndJef",
	"8T+8ZO6zO9uO9dOwR+wcGZih4+ydDIXT9klBoJlcA7RCKLYhBZ85rftaUD5vJ0/v06Q9ekk2Bb9DfhG4",
	"Q2p758fgW7VNwfCt2g6OgNqCuQv6cOOgGGlhYybA98JDpnD/Pfq41nw3RDKOPQXJboFOdDV4GmR847tZ",
	"WuPs6ULpm3GfHluRrDU5M+5GjZjvvIckbFpXmSfFhNmKGvQGar18+5lGf/gUxjpYeGv5H4AF40a9Cyx0",
	"B7prLKhNJUq4A9JfJ5n+ght48pi9/cvp148e//b4628cSVZarTTfsMXOgmFfed2MGbsr4f5wZagd1aVN",
	"j/7N02Co7I6bGseoWuew4dVwKDKAkghEzZhrN8RaF8246gbAKYfzHBwnJ7Qzsu070F4I4ySszeJONmMM",
	"YUU7S8E8JAUcJKbrLq+dZhcvUe90fReqLGitdMK+hkfMqlyV2SVoI1TCm/Lat2C+RRBvq/7vBC274oa5",
	"udH0W0sUKBKUZbdyOt+noc+3ssXNXs5P602szs87ZV+6yA+WRMMq0JndSlbAol51NKGlVhvGWYEd8Y7+",
	"HiyKAudiA28t31Q/L5d3oyoqHCihsokNGDcToxZOrjeQK0mREAe0Mz/qFPT0ERNMdHYcAI+RtzuZo53x",
	"Lo7tuOK6ERKdHmYn80iLdTCWUKw6ZHl7bXUMHTTVPZMAx6HjFX5GQ8cLKC3/Tunz1hL4vVZ1dedCXn/O",
	"qcvhfjHelFK4vkGHFnJVdqNvVg72o9Qav8iCnofj69eA0CNFvhKrtY3UitdaqeXdw5iaJQUofiClrHR9",
	"hqrZT6pwzMTW5g5EsHawlsM5uo35Gl+o2jLOpCoAN782aeFsJF4DHcXo37axvGfXpGctwFFXzmu32rpi",
	"6L0d3Bdtx4zndEIzRI0Z8V01TkdqRdNRLECpgRc7tgCQTC28g8i7rnCRHF3PNog3XjRM8IsOXJVWORgD",
	"ReYNUwdBC+3o6rB78ISAI8DNLMwotuT61sBeXB6E8wJ2GQZKGPbVD7+a+18AXqssLw8gFtuk0Nuo+d4L",
	"OIR62vT7CK4/eUx2XAML9wqzCqXZEiyMofBaOBndvz5Eg128PVouQaM/7g+l+DDJ7QioAfUPpvfbQltX",
	"I+F/Xr11Ep7bMMmlCoJVarCSG5sdYsuuUUcHdyuIOGGKE+PAI4LXK24s+ZCFLND0RdcJzkNCmJtiHOBR",
	"NcSN/GvQQIZj5+4elKY2jTpi6qpS2kKRWoOE7Z65foJtM5daRmM3Oo9VrDZwaOQxLEXje2TRSghB3Dau",
	"Fh9kMVwcOiTcPb9LorIDRIuIfYC8Da0i7MYhUCOACNMimghHmB7lNHFX85mxqqoct7BZLZt+Y2h6S61P",
	"7S9t2yFxcdve24UCg5FXvr2H/IowS8Fva26Yh4Nt+IWTPdAMQs7uIczuMGZGyByyfZSPKp5rFR+Bg4e0",
	"rlaaF5AVUPLdcNBf6DOjz/sGwB1v1V1lIaMopvSmt5Qcgkb2DK1wPJMSHhl+Ybk7gk4VaAnE9z4wcgE4",
	"doo5eTq61wyFcyW3KIyHy6atToyIt+Glsm7HPT0gyJ6jTwF4BA/N0DdHBXbOWt2zP8V/gfETNHLE9SfZ",
	"gRlbQjv+tRYwYkP1AeLReemx9x4HTrLNUTZ2gI+MHdkRg+5rrq3IRYW6zg+wu3PVrz9B0s3ICrBclFCw",
	"6AOpgVXcn1H8TX/Mm6mCk2xvQ/AHxrfEckphUOTpAn8BO9S5X1NgZ2TquAtdNjGqu5+4ZAhoCBdzInjc",
	"BLY8t+XOCWp2DTt2BRqYqRcbYS0FbHdVXauqLB4g6dfYM6N34lFQZNiBKV7FtzhUtLzhVsxnpBPsh++8",
	"pxh00OF1gUqpcoKFbICMJAST4j1YpdyuCx87HqKHAyV1gPRMGz24zfV/z3TQjCtg/6VqlnOJKldtoZFp",
	"lEZBAQVIN4MTwZo5fWRHiyEoYQOkSeKXBw/6C3/wwO+5MGwJV+HBhWvYR8eDB2jHea2M7RyuO7CHuuN2",
	"lrg+0OHjLj6vhfR5yuHIAj/ylJ183Ru88RK5M2WMJ1y3/FszgN7J3E5Ze0wj06IqcNxJvpxo6NS6cd/f",
	"ik1dcnsXXiu45GWmLkFrUcBBTu4nFkq+vOTlz003fEwCuaPRHLIcn0BMHAvOXR96NXFIN2yjycRmA4Xg",
	"FsodqzTkQFH+TuQzDYxHjOL/8jWXK5T0tapXPgCNxkFOXRuyqehaDoZISkN2KzO0Tqc4tw86Dg89nBwE",
	"3OlifdM2aR5XvJnPv+2ZcqVGyOub+pPerflsVFV1SL1sVVVCTve1ygQu3hHUIvy0E0/0gSDqnNAyxFe8",
	"Le4UuM39Y2zt7dApKIcTRyFx7cexqDinJ5e7O5BWaCCmodJg8G6J7UuGvqpl/DLNXz5mZyxshiZ46vrb",
	"yPF7M6roKVkKCdlGSdglH2MLCT/ix+RxwvttpDNKGmN9+8pDB/4eWN15plDjbfGLu90/oQl/3c1dmZN4",
	"xQQP4RSJPOnQK8uES88/O+mfXzNvnrkLzbgxKhcoK50VZk7nxHsB/RuVLvZeN8G0d3B0+uP2fFfxi0a0",
	"zUJZMc7yUqDlVkljdZ3b95KjbShaaiLoKCjB49bC56FJ2jyZsB76od5LjgFnjcUoGSixhIR55DuAYDQ0",
	"9WoFxvZ0jCXAe+lbCclqKSzOtXHUnhG5V6Ax8ueIWm74ji0dTVjFfget2KK2XakbX1UZK8rSO9LcNEwt",
	"30tuWQncWPajkOdbHC4428OJk2CvlL5osJC+nFcgwQiTpYOjvqevGLfql7/2Maz4Cp4+k+vFjd8+vdqh",
	"6ah92f1/vvrPk3en2X/z7PeH2bP/cfzh49NP9x8Mfnz86c9//r/dn558+vP9//z31E4F2FNvfjzkZy+8",
	"Rnr2AtWO1vcygP2z2d03QmZJIoujKHq0xb7C962egO53jVJ2De+l3UpHSJe8FIXjLTchh/4FMTiLdDp6",
	"VNPZiJ4RKqz1msL8LbgMSzCZHmu8sRA0jCdMv65DZ6B/MIfnZVlL2sogPNPjkRDXpZbz5gUlJVc5Yfi8",
	"bs1DUKL/8/HX38zm7bO45vtsPvNfPyQoWRTb1OPHArYpHc0fEDwY9wyr+M6ATXMPhD0ZwkYxFfGwG3DK",
	"vVmL6vNzCmPFIs3hQki+t/Vs5ZmkWHl3ftC1uPMeC7X8/HBbDVBAZdeppAsdOQtbtbsJ0Av3qLS6BDln",
	"4giO+raWwql7PpiuBL7Ex/+oPKopykxzDojQAlVEWI8XMsmgkaIfFHk8t/40n/nL39y5NuMHTsHVn7Px",
	"I4a/rWL3vn95zo49wzT36B0uDR29nExowv5xUCcQyHEzSjVDQt57+V6+gKWQwn0/eS8LbvnxghuRm+Pa",
	"gP6Wl1zmcLRS7CS8N3rBLX8vB5LWaDao6KUXq+pFKXJ2EesTLXlSho/hCO/fv+PlSr1//2EQEzGU/v1U",
	"Sf5CE2ROEFa1zXx+gkzDFdcpn5Np3qfjyJSAZN+sJGSrmgyTIf+BHz/N83hVmf471eHyq6p0y4/I0PhX",
	"mG7LmLFKB1nECSgEDe7vT8pfDJpfBbNIbcCwv2149U5I+4Fl7+uHD58A6zzc/Ju/8h1N7iqYbBwZfUfb",
	"t4ngwkkrhK3VPKv4KuXaev/+nQVe4e6jvLxBE0VZMuzWeTAaAuJxqHYBAR/jG0BwXPvxGy7uLfUKuajS",
	"S8BPuIXYxokbrcP9pvsVPSG98Xb1nqEOdqm268yd7eSqjCPxsDNNipqVE7JCFIQRK9RWfTafBbB8DfmF",
	"T7MCm8ru5p3uIdDGC5qBdQhDCXjoARimgEDHwAJYXRXci+Jc7vpv8Q1YG8J538AF7M5Vm0HiOo/vu2/B",
	"zdhBRUqNpEtHrPGx9WP0N99Hc6FiX1XhSTW+rQtkcdLQRegzfpBJ5L2DQ5wiis5b5TFEcJ1ABBH/CApu",
	"sFA33q1IP7U8p2Us6OZLJOMJvJ/5Jq3y5AOv4tWg0Zy+bwCzeakrwxbcye3KJ6Ki984RF6sNX8GIhBz7",
	"Zia+Ku74c3CQQ/de8qZTy/6FNrhvkiBT48ytOUkp4L44UkFlphduF2Yi9593LGB+SY+wRYliUhOXSEyH",
	"646PjBLmjYGWJmDQshU4AhhdjMSSzZqbkCMLU4mFszxJBvgD3+/vy9pyFkWKRfnCmpwsgef2z+lAu/S5",
	"W0LClpClJVYtJ2RccRI+BqentkNJFIAKKGFFC6fGgVDaXALtBjk4fl4uSyGBZamgs8gMGl0zfg5w8vED",
	"xsiAziaPkCLjCGx0a+PA7CcVn025ug6Q0udC4GFsdIhHf0P62RaFYTuRR1WOhYsRp1QeOAD3kYrN/dWL",
	"l8VhmJBz5tjcJS8dm/MaXzvIIHkIiq29VCE+sOL+mDi7x39BF8u11kRX0U1WE8tMAei0QLcH4oXaZvRu",
	"MynxLrYLR+/JyHR8RZo6mJSm5Z5hC7XFYB28WigS+gAs43AEMCINfysM0iv2G7vNCZh90+6XplJUaJBk",
	"vDmvIZcxcWLK1CMSzBi5fBVlXrkRAD1jR5vG2Cu/B5XUrngyvMzbW23eZhQLj35Sx3/sCCV3aQR/QytM",
	"kyvldV9iSdopujEn3TQxkQiZInrHJoZOmqEryEAJqBRkHSEqu0g5Pp1uA3jjvA3dIuMFJqPhcnc/CmTS",
	"sBLGQmtED2EOX8I8yTEHnlLL8dXZSi/d+t4o1VxT5EbEjp1lfvYVYCTwUmhjM/RAJJfgGn1nUKn+zjVN",
	"y0rdUCnKGCuKNG/AaS9glxWirNP06uf94YWb9qeGJZp6gfxWSIo3WWCG42QA5Z6pKcZ274Jf0YJf8Ttb",
	"77TT4Jq6ibUjl+4c/yLnosd597GDBAGmiGO4a6Mo3cMgo4evQ+4YyU2Rj/9on/V1cJiKMPbBoJvw/Hbs",
	"jqKRkmuJDAZ7VyHQTeTEEmGjBMHDF6kjZ4BXlSi2PVsojTqqMfNrGTxCWrUeFnB3/WAHMBDZPVOPYjSY",
	"bga9VsCnVM+dBDZHkzBz3s1zFzOEeCphQqGCIaKaR3OHcHUOvPwBdr+6tric2af57Ham0xSu/YgHcP26",
	"2d4kntE1T6a0jifkmijnVaXVJS8zb2AeI02tLj1pYvNgj/7MrC5txjx/efrqtQf/03yWl8B11ogKo6vC",
	"dtW/zKooWd/IAQmJ0J3OF2R2EiWjzW8yjMVG6as1+IzSkTQ6SH3ZOhyio+iN1Mt0hNBBk7P3jdAS9/hI",
	"oGpcJK35jjwkXa8Iv+SiDHazAO1INA8ublr+1CRXiAe4tXclcpJld8puBqc7fTpa6jrAk+K59uS83lBa",
	"d8OU7LvQMWR5V3mv+4Zj4kqyigyZk6w3aEnITCnytI1VLowjDkm+M9eYYeMRYdSNWIsRV6ysRTSWazYl",
	"NU0PyGiOJDJNMjtOi7uF8iV7ain+UQMTBUjrPmk8lb2DillOvLV9eJ062WE4lx+YLPTt8LeRMeKkrf0b",
	"D4HYL2DEnroBuC8alTkstLFIuR8il8Q1HP7xjIMrcY+z3tOHp2YKXlx3PW5xhZ0h/3OEQanWD5f3Ccqr",
	"zx47MkeyXI8w2VKr3yGt56F6nHhvFNLUCoxy+R3idwpxkYoOi2msO23VoXb20e0ek25iK1Q3SGGE6nHn",
	"I7cc5ssMFmouaavpHUgn1i1NMHFU6TGN3xKMh3kQiVvyqwVPJRN1QoaD6bR1AHds6Vax0Dng3jSPJWh2",
	"FvmSm7aC3pJXoNungMO8NDcUGGjayaJCKxkg1cYywZz8f6VRiWFqecUlFWFx/ego+d4GyPjlel0pjZkg",
	"TNrsX0AuNrxMSw5FPjTxFmIlqL5IbSAqYOEHotpNREW+CEjzBMij5mzJHs6jKjp+NwpxKYxYlIAtHlGL",
	"BTfIyRtDVNPFLQ+kXRts/nhC83UtCw2FXRtCrFGsEepQvWmcVwuwVwCSPcR2j56xr9BtZ8Ql3HdY9Pfz",
	"7OTRMzS60h8PUxeArw+zj5sUyE7+6tlJmo7Rb0ljOMbtRz1KPpqnAnHjjGvPaaKuU84StvS87vBZ2nDJ",
	"V5COFNkcgIn64m6iIa2HF1lQdSNjtdoxYdPzg+WOP41Enzv2R2CwXG02wm68c8eojaOntjoFTRqGo1JJ",
	"PrFwgCt8RB9pFVxEPSXy8xpN6X5LrRo92T/xDXTROmec0n+Uoo1eCOnO2VnILoSZlpsEy4QbN5dbOoo5",
	"GMywZJUW0qJiUdtl9ieWr7nmuWN/R2PgZotvniayS3eznMrrAf7Z8a7BgL5Mo16PkH2QIXxf9pVUMts4",
	"jlLcb197RKdy1JmbdtuN+Q73Dz1VKHOjZKPkVnfIjUec+laEJ/cMeEtSbNZzLXq89so+O2XWOk0evHY7",
	"9MubV17K2CidShnYHncvcWiwWsAlxu6lN8mNecu90OWkXbgN9F/W8xBEzkgsC2c5pQh8qxLaach43ljS",
	"fax6wjowdkzdB0cGCz/UnHWzS39+Pno3UVBpT1cwbA8dW+5LwAP+0UfEFyYX3MDWl08rGSGUKLt+kmSK",
	"5nvkY+fsW7WdSji9UxiI558ARUmU1KIsfm1ffvaKF2gu83XSZ7ZwHX9ry6w1i6M7MJn9b82lhDI5HMmb",
	"vwW5NCE5/11NnWcj5MS2/XoKtNze4lrAu2AGoMKEDr3Clm6CGKvdR3VN0Ha5UgXDedpUc+1xHdbhiLKl",
	"/6MGY1MPlPADBY6hbdSxA0rWzUAWqJEese+pkvIaWCePEGqCIdFD99V0XZWKF3NMQHH+8vQVo1mpDxUL",
	"omThK1SEuqvo2cSiLJrTQpBD3Z/084jp4+yP13arNjZrcnunHqC6Fm32cdHzE6CKFGPniL2IaqLSW1U3",
	"BMP8I3rjtLpmNJKPkCbcf6zl+RrVvg5rHSf56VnuA1WaqLJkUyGqSS2J587B7RPdU577OVNON78Shgro",
	"wiV037w2D8C92SG8ge0uT9dSEqUcXeOWaxJJXhftATi6IoMrIQlZD/HXFPqpSMR1k/6/xV7JTFf9CgKD",
	"kpL0grKp/BMKo+dcKilyzDOVuqJ9pd0pfrYJKbn6htxwxP0JTRyuZN2CJhTPY3G0kkFghB5xQ0N/9NVt",
	"KlEH/WmxpOuaW7YCazxng2Ieym94W6OQBnyqUKzLHPFJpTu+S+SQSXd41rhNrklG+PRmRHn8zn37yZsW",
	"MCb9QkhUIjzavOBH1kAsBGqd5iEsWykwfj3d98fmnetzhE9xC9h+OAqFQ3EMcv25ZZOfezjUafB6ey+z",
	"a/vctfX5jZqfO1HONOlpVflJx4uzJOUBu5WjCE54L7PgPoqQ24wfj7aH3PaGq+B96ggNLtHZDRXewwPC",
	"aAqV9IpgOaGVKApbMAoTS2ZJEDIBxishoS1rm7gg8uSVgBuD53Wkn8k1tyQCTuJp58BL9HCnGJqx3r1x",
	"26H62Z0cSnCNYY7xbWxrrIwwjqZBK7hxuWuq6TrqjoSJ51jG2yNyWDEFpSovRBX4aqFXQyXFOBzjDlWa",
	"uhfA8BgMZSLqjqnOrnsTjT1EXdTFCmzGiyKVufVb/MrwKytqlBxgC3ndZPisKpZj3pVuIpohtfmJciVN",
	"vdkzV2hwy+miokQJaogLI4Udxocuix3+m0pvOb4zPtDj2qGGIarD1/O4ptzcHWkg9TqazoxYZdMxgXfK",
	"7dHRTn0zQm/73ymll2rVBeQzp5/Yx+XiPUrxt5fu4oizMwxyttLV0iRPwMA+FUpJotrYPPvtciW8ygZJ",
	"XNGh1JSq22+AGC86N8fLbyS8N0q6wel+JQ/lWJBvPhqTzq1/HWc528uCRl8cUYQQvS1CKNLW2bGoIAoK",
	"cp8HvadJhgM526bzFkYIDeFmQ4B+CLGsrOLCu99bZjHErI96H75DmBIP225wfxE+lnzUYvfD5Vjcd0jG",
	"ht/7RakuwD+ZrzRcClUHx3aIfAoqIf3aKfHURN4n1z80vOJUX9YcOmq8PffFAWiZXif/4VeKk2Mgrd79",
	"E5hyB5s+KHc1lHbJPNU2YU1e6Ul5pju34pQEhKmceF427BTcOlAubMhYp4gDw/Jf85kornVh9q8SHIZG",
	"SR27dDGv8bRTbaopPGKVMqJN756q8jUxxPAcC3VFabOGY4X4nkvILeb0b+MWNMB1kmi5yaK6of8//dSI",
	"Ot1EYvqsU/tSTQ0T+R+44wevwaIXjZQE/Wh6YqXTJjoN+TQmM16B9KU7u+88JkebL5eQW3F54PXdX9cg",
	"o5dd82CXoRLc0WM80UQvY/KW61sdW4D2PY7bC0+URPHW4Iy9vbmA3T3DOtSQzMo+D1ftTfJ2IAaQO2SO",
	"RJRJRX+QIdk75IVpKAOxEKKtqDu0GdBGCzpFb0lvOFcgSXdxtO9L90yZrigzaS7X9VqvrjEQd+yB3rAg",
	"xbj+8QLrf5im2GLI+xFr6exsmB3xyucNwbeSje8kZBABE34LD6NpllJcQFxyCj1VV1wXoUXS9BKsOtme",
	"+2jwqi4UU+gDvWxmFm1s7PAdVSLfFkZA56VyYkQ2FkbeDUdtYjnuGQq6oeztGGjr4FqC9qX5UP4tlYHM",
	"qhBLuw+OfaigyKIbIcGM5rgk4EYzz7xpU+tgrl+OmWa4DyiKF8g0bLiDTkcJcMbn3Ifs5/Q9PBwKuV4P",
	"Wpgaej1cMyBERQszQGJM9Uvmb8vDD5JuYmwSUlL5Z5PKhiNBd70hlVZFndMFHR+MxiA3OdfUHlaStNPk",
	"w1X2dIToVecF7I5JCQrFFsIOxkCT5ESgR1kUept8p+Y3k4J7dSfgfUnL1XxWKVVmI86Os2EKnz7FX4j8",
	"AgrmbooQPThSAId9hTb2xpt9td6FlDVVBRKK+0eMnUqK1w6O7W4O6d7k8p7dN/8WZy1qyqrljWpH72U6",
	"8BXzXelbcrMwzH4eZsCxultORYMcSBCzHUkfpPlVohzU0VStfOhq7pfoaYmKoEjJJKH2iPdunQfzcNr3",
	"hdZj/3ylVenpV6fbVk4fZCRjU8ALZxtekfrUqKa+GXVDx6jo80pfJKR5h98r7JOGMq6zRXMQDAEe7/5o",
	"K4/cgPG2RXN+xhkQYb9IkYy5oQo6UMKG5ILMqoyujD1iQoMvf9hywHJTHn2e8BqE5V7ln4dT6lboM2Va",
	"qHCbNM9tvGoK3ALD1HJJ+OcyjLiV9DxhMDEGflzxnaG3Oj7gxXW0W/kb1Ue7ARZf5+cKb0p0bB80xdDO",
	"7yPkgwFfTaxXTAch3mso5palusqQHWZNIruU8uzadW/7kLq37eYwtoAocIwbLwnu2JoXLFdaQx73SL/V",
	"IaA2SkNWKowjS7m4l9YJ9hsM0JesVKtw8DAf5PA0pOe6q1JQ9O6cIMjIczmS2QOMf2fuwaXGidM7Xo3p",
	"+pWeztcJAyRuWNita5dz8gQ3oTxLv7xYA+YEQj9sfD1NVavqrqtfN22siqFVG5Gn0f2vFXY1GiyVot4U",
	"Knwm5TYxZ7gUl2KFRz11yxBXHSIcJF+UqQuN+YPo/Y5I8e6/KJT1x2VL8GxmhLMl3hTvW3+qFllif5up",
	"fKm08Ex4hFaSMRz7QyaoPuViauBEk0R9IluIABgPpejAMCmg4rpgLLHea8YTSD5r1Nh5pxy36PG+kOCS",
	"znjOyYy1BubGrjX4Z6skJPUqYVXcroN04ZoPjU3ugnYSlQZfD4gbMo0GE62vitnXF1SVlXAJnQgT/5a2",
	"znMwRlxCXFGTOrMCoEKHRV+NToVOxFy+J4T5tWeR830KdpPKFiGWdood0KSSet9WZnRMzNSj5CC6FEXN",
	"O/gzt6gtOFZWMHENBVg/TOMU12YS6cXtYxEHg52Q5pPnUqZjneKn3I2VFGcrGm8KEWF7sk3Fr+S4VWFI",
	"lK0UNV00jhD7cgs5qWadYJ7b44ThYMz00jSMik+62eGbWqdGqWwfkQ1qlCblNwOhxnScUSmIwL5vQu4l",
	"O7owiQGEaXkDhgZDG3oaNdvwHSvEcgmaVDdjuSy4LuLmQrIctNOZmVOjbq5qOGh1DfOD2obj1DhoYFYp",
	"vQON3gRIufP2iDFNYIIEj27hhPRO17ZVY+VTB7uSfqvEt07jwaBNM6Y+Y5YF1HfosCqJwibb8Au45jxG",
	"/A77p8HcR96xYBXOOmWKT3tpvW9a2EftwQbQjaIlkwcRY6BBuWpjLWhzhjSYCnw+pypgcfBzv6hG2Guy",
	"udJ8SX/owEaVHzj2PfvAmMWkchN7J30f1mDfQCtGa22KL4MczF0bULBzmDTEZNBeTbSk9GM+DtiNBguk",
	"2fByn7sZaFEJUxvYsKICV4R4DFjsmMimRcr/kQQTo2F+mHySd+gI0+oqU2qJ1IGnhiQHjFVq7st5P4ou",
	"RVWhYHBea5Ryr/jucDLIa8kJXcNtOg/j7Qb0Pq7DJtf9WG/1jYCwBMa53CUE/saLcwP74pgQNSFC+vrI",
	"SnL1m6XjnbTMYeRqYmVR+ev9wURxtu42DYCmAGi0cQQVqk/BP7aq1bRC3KHDAfDiGLOoFHdw93lwvvB7",
	"+h8bpERL+TBGCZ3lHwpb8wtsddFoi7x4Zy0Yf4UMOUsUk2ieN6F+Y1Xj+xGBmJrbyRNlmYgkJImTCj1H",
	"hOP4tr7k5eePBsSc7aeIDyjejMcPxOFkMZIJleZmj1lf8UlzR6Fjdze1fI3Ri38Ft0dJFu2H8krugBGj",
	"vsBLchEsQ9XXS5DsCsekpw+PvmELn+yn0pAL01eer0JBtiZ6CuuT+gfEW3sgXOvQOn9V9hZkvAy2KPZT",
	"W9wJreAr2ULYHtEvzFRGTm6SylPUNyCLBP5SPCrOunvgurjovImgYnm9x75Kwx2/jYheOV7zbcQwn/DU",
	"5VH8v7t0agPDdU6+rTu4TVzU7dqmPuwZIndfBaAp73HShb1cd3wQRAjBqngMQWV/e/Q3pmGJZa8Ve/AA",
	"J3jwYO6b/u1x97M7zg8eJDWJz/YUiHDkx/Dzpijm17HkEJQAYSQPSW8/alEWhwijk1WmLRyPeVN+87mr",
	"vkjp+t8oPHl4VH354Fu8qSDEJNbamTyaKsoXMyFVjO+WSAyDoT95rYXdYUrtoIOJ35KPlr5vAuD9A4rG",
	"6ufvPqsuoEnK3obL1ybcrt8rXuJ9RMZI6W4hVR6xl1u+qUrwB+XP9xb/AU/+9LR4+OTRfyz+9PDrhzk8",
	"/frZw4f82VP+6NmTR/D4T18/fQiPlt88WzwuHj99vHj6+Ok3Xz/Lnzx9tHj6zbP/uOf4kAOZAJ2FBI6z",
	"/52dliuVnb4+y84dsC1OeCV+gB2VknZkHIpU8xxPImy4KGcn4af/GU7YUa427fDh15nPDzdbW1uZk+Pj",
	"q6uro7jL8QrjYzOr6nx9HOYZVLE+fX3WeC3JT4A7SqlVgv8nkMIpfnvz8u05O319dtQSzOxk9vDo4dEj",
	"N76qQPJKzE5mT/AnPD1r3PdjT2yzk4+f5rPjNfASn5O4PzZgtcjDJw282Pn/myu+WoE+8pW73U+Xj4+D",
	"WHH80ccJf9r37Tgugnf8sRNOXRzoiUWyjj+G3M/7W3eSK/sw8qjDRCj2NTteYEq5qU3BRI3Hl4LKhjn+",
	"iOLy6O/HPgdW+iOqLXQejsObg3TLDpY+2q2Dtdcj5zZf19XxR/wP0mcEFr04P7ZbeYwW7eOPndX4z4PV",
	"dH9vu8ctLjeqgACwWi4pl/2+z8cf6d9oIthWoIUT/OiVh7feN8fqrJidzF5GjZ6vIb/A8m/kusHz8vjh",
	"w0Q6jqgXo+PLFyUU7uw9ffh0QgepbNzJJyoedvxFXkh1JRk+3iZeXm82XO9QRrK1lob9/AMTSwb9KYQJ",
	"MyD/4CuD9mesNTWbzzro+fDJI40eKx5jAs5di8vw807myR+H29yvs5v6+fhjt85Th37MuraFuor6ojZF",
	"poDhfE3l087fx1dcWCcf+Vc/mId72NkCL499ip/er+2r+sEXTBUQ/Rg7q5O/HjdlDpIf+5wq9dWf1JFG",
	"wd8VPrdSSywFzE7eRff/uw+fPrhv2rXGT+2ldnJ8jJH0a2Xs8ezT/GPvwos/fmhoLGQ+nFVaXGIihQ+f",
	"/l8AAAD//96E77yyywAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
