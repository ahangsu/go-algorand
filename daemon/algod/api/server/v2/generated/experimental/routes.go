// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/ZPbNrLgv4LSe1VOfOKMv5K3nqqtdxM7yfriJC57kr33bF8WIlsSdiiAC4AzUnz+",
	"36/QDZAgCUrUzMTerbqf7BHx0Wg0Gv2F7g+zXG0qJUFaMzv7MKu45huwoPEvnueqljYThfurAJNrUVmh",
	"5OwsfGPGaiFXs/lMuF8rbtez+UzyDbRtXP/5TMM/aqGhmJ1ZXcN8ZvI1bLgb2O4q17oZaZutVOaHOKch",
	"XjyffdzzgReFBmOGUP4syx0TMi/rApjVXBqeu0+GXQu7ZnYtDPOdmZBMSWBqyey605gtBZSFOQmL/EcN",
	"ehet0k8+vqSPLYiZViUM4XymNgshIUAFDVDNhjCrWAFLbLTmlrkZHKyhoVXMANf5mi2VPgAqARHDC7Le",
	"zM7ezgzIAjTuVg7iCv+71AC/Q2a5XoGdvZ+nFre0oDMrNomlvfDY12Dq0hqGbXGNK3EFkrleJ+zH2li2",
	"AMYle/3dM/b48eOnbiEbbi0UnshGV9XOHq+Jus/OZgW3ED4PaY2XK6W5LLKm/evvnuH8b/wCp7bixkD6",
	"sJy7L+zF87EFhI4JEhLSwgr3oUP9rkfiULQ/L2CpNEzcE2p8p5sSz/9ZdyXnNl9XSkib2BeGXxl9TvKw",
	"qPs+HtYA0GlfOUxpN+jbB9nT9x8ezh8++Phvb8+z//Z/fvX448TlP2vGPYCBZMO81hpkvstWGjieljWX",
	"Q3y89vRg1qouC7bmV7j5fIOs3vdlri+xzite1o5ORK7VeblShnFPRgUseV1aFiZmtSwdm3KjeWpnwrBK",
	"qytRQDF33Pd6LfI1y7mhIbAduxZl6WiwNlCM0Vp6dXsO08cYJQ6uG+EDF/TPi4x2XQcwAVvkBlleKgOZ",
	"VQeup3DjcFmw+EJp7ypz3GXFLtbAcHL3gS5bxJ10NF2WO2ZxXwvGDeMsXE1zJpZsp2p2jZtTikvs71fj",
	"sLZhDmm4OZ171B3eMfQNkJFA3kKpErhE5IVzN0SZXIpVrcGw6zXYtb/zNJhKSQNMLf4OuXXb/r/e/PwT",
	"U5r9CMbwFbzi+SUDmasCihP2YsmkshFpeFpCHLqeY+vwcKUu+b8b5WhiY1YVzy/TN3opNiKxqh/5Vmzq",
	"DZP1ZgHabWm4QqxiGmyt5RhANOIBUtzw7XDSC13LHPe/nbYjyzlqE6Yq+Q4RtuHbPz+Ye3AM42XJKpCF",
	"kCtmt3JUjnNzHwYv06qWxQQxx7o9jS5WU0EulgIK1oyyBxI/zSF4hDwOnlb4isAJg4yC08xyABwJ2wTN",
	"uNPtvrCKryAimRP2i2du+NWqS5ANobPFDj9VGq6Eqk3TaQRGnHq/BC6VhazSsBQJGnvj0eEYDLXxHHjj",
	"ZaBcScuFhMIxZwRaWSBmNQpTNOF+fWd4iy+4ga+fjN3x7deJu79U/V3fu+OTdhsbZXQkE1en++oPbFqy",
	"6vSfoB/GcxuxyujnwUaK1YW7bZaixJvo727/Ahpqg0ygg4hwNxmxktzWGs7eyfvuL5axN5bLguvC/bKh",
	"n36sSyveiJX7qaSfXqqVyN+I1QgyG1iTChd229A/brw0O7bbpF7xUqnLuooXlHcU18WOvXg+tsk05rGE",
	"ed5ou7HicbENysixPey22cgRIEdxV3HX8BJ2Ghy0PF/iP9sl0hNf6t/dP1VVut62WqZQ6+jYX8loPvBm",
	"hfOqKkXOHRJf+8/uq2MCQIoEb1uc4oV69iECsdKqAm0FDcqrKitVzsvMWG5xpH/XsJydzf7ttLW/nFJ3",
	"cxpN/tL1eoOdnMhKYlDGq+qIMV450cfsYRaOQeMnZBPE9lBoEpI20ZGScCy4hCsu7UmrsnT4QXOA3/qZ",
	"WnyTtEP47qlgowhn1HABhiRganjPsAj1DNHKEK0okK5KtWh++OK8qloM4vfzqiJ8oPQIAgUz2ApjzZe4",
	"fN6epHieF89P2Pfx2CiKK1nu3OVAooa7G5b+1vK3WGNb8mtoR7xnGG6n0iduawIanJh/FxSHasValU7q",
	"OUgrrvFffNuYzNzvkzr/a5BYjNtx4kJFy2OOdBz8JVJuvuhRzpBwvLnnhJ33+96MbNwoaYK5Ea3s3U8a",
	"dw8eGxRea14RgP4L3aVCopJGjQjWW3LTiYwuCXN0hiNaQ6hufNYOnockJEgKPRi+KVV++Rdu1ndw5hdh",
	"rOHxw2nYGngBmq25WZ/MUlJGfLza0aYcMdcQFXy2iKY6aZZ4V8s7sLSCWx4tzcObFksI9dgPmR7ohO7y",
	"M/6Hl8x9dmfbsX4a9oRdIAMzdJy9k6Fw2j4pCDSTa4BWCMU2pOAzp3UfBeWzdvL0Pk3ao2/JpuB3yC8C",
	"d0ht7/wYfKO2KRi+UdvBEVBbMHdBH24cFCMtbMwE+J57yBTuv0cf15rvhkjGsacg2S3Qia4GT4OMb3w3",
	"S2ucPV8ofTPu02MrkrUmZ8bdqBHznfeQhE3rKvOkmDBbUYPeQK2Xbz/T6A+fwlgHC28s/wOwYNyod4GF",
	"7kB3jQW1qUQJd0D66yTTX3ADjx+xN385/+rho98effW1I8lKq5XmG7bYWTDsC6+bMWN3JXw5XBlqR3Vp",
	"06N//SQYKrvjpsYxqtY5bHg1HIoMoCQCUTPm2g2x1kUzrroBcMrhvADHyQntjGz7DrTnwjgJa7O4k80Y",
	"Q1jRzlIwD0kBB4np2OW10+ziJeqdru9ClQWtlU7Y1/CIWZWrMrsCbYRKeFNe+RbMtwjibdX/naBl19ww",
	"NzeafmuJAkWCsuxWTuf7NPTFVra42cv5ab2J1fl5p+xLF/nBkmhYBTqzW8kKWNSrjia01GrDOCuwI97R",
	"34NFUeBCbOCN5Zvq5+XyblRFhQMlVDaxAeNmYtTCyfUGciUpEuKAduZHnYKePmKCic6OA+Ax8mYnc7Qz",
	"3sWxHVdcN0Ki08PsZB5psQ7GEopVhyxvr62OoYOmumcS4Dh0vMTPaOh4DqXl3yl90VoCv9eqru5cyOvP",
	"OXU53C/Gm1IK1zfo0EKuym70zcrBfpJa42dZ0LNwfP0aEHqkyJditbaRWvFKK7W8exhTs6QAxQ+klJWu",
	"z1A1+0kVjpnY2tyBCNYO1nI4R7cxX+MLVVvGmVQF4ObXJi2cjcRroKMY/ds2lvfsmvSsBTjqynntVltX",
	"DL23g/ui7ZjxnE5ohqgxI76rxulIrWg6igUoNfBixxYAkqmFdxB51xUukqPr2QbxxouGCX7RgavSKgdj",
	"oMi8YeogaKEdXR12D54QcAS4mYUZxZZc3xrYy6uDcF7CLsNACcO++OFX8+VngNcqy8sDiMU2KfQ2ar73",
	"Ag6hnjb9PoLrTx6THdfAwr3CrEJptgQLYyg8Ciej+9eHaLCLt0fLFWj0x/2hFB8muR0BNaD+wfR+W2jr",
	"aiT8z6u3TsJzGya5VEGwSg1WcmOzQ2zZNero4G4FESdMcWIceETwesmNJR+ykAWavug6wXlICHNTjAM8",
	"qoa4kX8NGshw7Nzdg9LUplFHTF1VSlsoUmuQsN0z10+wbeZSy2jsRuexitUGDo08hqVofI8sWgkhiNvG",
	"1eKDLIaLQ4eEu+d3SVR2gGgRsQ+QN6FVhN04BGoEEGFaRBPhCNOjnCbuaj4zVlWV4xY2q2XTbwxNb6j1",
	"uf2lbTskLm7be7tQYDDyyrf3kF8TZin4bc0N83CwDb90sgeaQcjZPYTZHcbMCJlDto/yUcVzreIjcPCQ",
	"1tVK8wKyAkq+Gw76C31m9HnfALjjrbqrLGQUxZTe9JaSQ9DInqEVjmdSwiPDLyx3R9CpAi2B+N4HRi4A",
	"x04xJ09H95qhcK7kFoXxcNm01YkR8Ta8UtbtuKcHBNlz9CkAj+ChGfrmqMDOWat79qf4LzB+gkaOOH6S",
	"HZixJbTjH7WAERuqDxCPzkuPvfc4cJJtjrKxA3xk7MiOGHRfcW1FLirUdX6A3Z2rfv0Jkm5GVoDlooSC",
	"RR9IDazi/ozib/pj3kwVnGR7G4I/ML4lllMKgyJPF/hL2KHO/YoCOyNTx13osolR3f3EJUNAQ7iYE8Hj",
	"JrDluS13TlCza9ixa9DATL3YCGspYLur6lpVZfEASb/Gnhm9E4+CIsMOTPEqvsGhouUNt2I+I51gP3wX",
	"PcWggw6vC1RKlRMsZANkJCGYFO/BKuV2XfjY8RA9HCipA6Rn2ujBba7/e6aDZlwB+y9Vs5xLVLlqC41M",
	"ozQKCihAuhmcCNbM6SM7WgxBCRsgTRK/3L/fX/j9+37PhWFLuA4PLlzDPjru30c7zitlbOdw3YE91B23",
	"F4nrAx0+7uLzWkifpxyOLPAjT9nJV73BGy+RO1PGeMJ1y781A+idzO2Utcc0Mi2qAsed5MuJhk6tG/f9",
	"jdjUJbd34bWCK15m6gq0FgUc5OR+YqHkt1e8/Lnpho9JIHc0mkOW4xOIiWPBhetDryYO6YZtNJnYbKAQ",
	"3EK5Y5WGHCjK34l8poHxhFH8X77mcoWSvlb1ygeg0TjIqWtDNhVdy8EQSWnIbmWG1ukU5/ZBx+Ghh5OD",
	"gDtdrG/aJs3jmjfz+bc9U67UCHl9U3/SuzWfjaqqDqlXrapKyOm+VpnAxTuCWoSfduKJPhBEnRNahviK",
	"t8WdAre5f4ytvR06BeVw4igkrv04FhXn9ORydwfSCg3ENFQaDN4tsX3J0Fe1jF+m+cvH7IyFzdAET11/",
	"Gzl+r0cVPSVLISHbKAm75GNsIeFH/Jg8Tni/jXRGSWOsb1956MDfA6s7zxRqvC1+cbf7J7TvajLfKX1X",
	"vkzvkpoql09wHR70k/spb+rg5GWZ8An6dyt9BmDmzTt5oRk3RuUCha0XhZnTQfNuRP/IpYv+V0007h2c",
	"vf64PedX/CQSjbtQVoyzvBRo+lXSWF3n9p3kaFyKlpqIWgpa9Li58VlokrZvJsyPfqh3kmPEWmNySkZa",
	"LCFhX/kOIFgdTb1agbE9JWUJ8E76VkKyWgqLc23cccnovFSgMXTohFpu+I4tHU1YxX4Hrdiitl2xHZ9l",
	"GSvK0nvi3DRMLd9JblkJ3Fj2o5AXWxwueOvDkZVgr5W+bLCQvt1XIMEIk6Wjq76nrxj46pe/9kGw+Iye",
	"PpPvxo3fvt3aoe2pfRr+f774z7O359l/8+z3B9nT/3H6/sOTj1/eH/z46OOf//x/uz89/vjnL//z31M7",
	"FWBPPRrykL947lXaF89Rb2mdNwPYP5nhfiNkliSyOAyjR1vsC3wg6wnoy65Vy67hnbRb6QjpipeicLzl",
	"JuTQv2EGZ5FOR49qOhvRs2KFtR6pDdyCy7AEk+mxxhtLUcOAxPTzPPQm+hd3eF6WtaStDNI3vT4JgWFq",
	"OW+eYFJ2ljOG7/PWPEQ1+j8fffX1bN6+q2u+z+Yz//V9gpJFsU29nixgm1Ly/AHBg3HPsIrvDNg090DY",
	"kzFwFJQRD7uBzQK0WYvq03MKY8UizeFCTL83Fm3lC0nB9u78oG9y510eavnp4bYaoIDKrlNZGzqCGrZq",
	"dxOgFy9SaXUFcs7ECZz0jTWF0xd9NF4JfInZA1D7VFO0oeYcEKEFqoiwHi9kkkUkRT8o8nhu/XE+85e/",
	"uXN1yA+cgqs/Z+OIDH9bxe59/+0FO/UM09yjh7w0dPT0MqFK+9dFnUgix80oVw0Jee/kO/kclkIK9/3s",
	"nSy45acLbkRuTmsD+htecpnDyUqxs/Bg6Tm3/J0cSFqj6aSip2KsqhelyNllrJC05EkpQoYjvHv3lpcr",
	"9e7d+0FQxVB98FMl+QtNkDlBWNU28wkOMg3XXKecVqZ54I4jUwaTfbOSkK1qsmyGBAp+/DTP41Vl+g9d",
	"h8uvqtItPyJD459xui1jxiodZBEnoBA0uL8/KX8xaH4d7Cq1AcP+tuHVWyHte5a9qx88eAys8/Lzb/7K",
	"dzS5q2CydWX0IW7fqIILJ7UStlbzrOKrlG/s3bu3FniFu4/y8gZtHGXJsFvnxWmIqMeh2gUEfIxvAMFx",
	"9Os5XNwb6hWSWaWXgJ9wC7GNEzdaj/1N9yt6g3rj7eq9Yx3sUm3XmTvbyVUZR+JhZ5ocNysnZIUwCiNW",
	"qK36dEALYPka8kufpwU2ld3NO91DpI4XNAPrEIYy+NALMswhgZ6FBbC6KrgXxbnc9R/zG7A2xAO/hkvY",
	"Xag2BcUxr/e7j8nN2EFFSo2kS0es8bH1Y/Q334eDoWJfVeFNNj7OC2Rx1tBF6DN+kEnkvYNDnCKKzmPn",
	"MURwnUAEEf8ICm6wUDferUg/tTynZSzo5ktk8wm8n/kmrfLkI7fi1aDVnb5vANOBqWvDFtzJ7cpnsqIH",
	"0xEXqw1fwYiEHDt3Jj5L7jiEcJBD917yplPL/oU2uG+SIFPjzK05SSngvjhSQWWmF68XZiL/ofdMYIJK",
	"j7BFiWJSE9hITIfrjpONMu6NgZYmYNCyFTgCGF2MxJLNmpuQZAtzkYWzPEkG+AMTAOxL+/IiCjWLEo41",
	"SV0Cz+2f04F26ZO/hIwvIc1LrFpOSNniJHyMbk9th5IoABVQwooWTo0DobTJCNoNcnD8vFyWQgLLUlFr",
	"kRk0umb8HODk4/uMkQWeTR4hRcYR2OgXx4HZTyo+m3J1DJDSJ1PgYWz0qEd/Q/rdF8VxO5FHVY6FixGv",
	"Vh44APehjs391Qu4xWGYkHPm2NwVLx2b8xpfO8gg+wiKrb1cIz4y48sxcXaPA4QulqPWRFfRTVYTy0wB",
	"6LRAtwfihdpm9PAzKfEutgtH78nQdnyGmjqYlOflnmELtcVoH7xaKJT6ACzjcAQwIg1/KwzSK/Ybu80J",
	"mH3T7pemUlRokGS8Oa8hlzFxYsrUIxLMGLl8EaVuuREAPWNHmwfZK78HldSueDK8zNtbbd6mJAuvhlLH",
	"f+wIJXdpBH9DK0yTbOVVX2JJ2im6QSvdPDORCJkiescmhk6aoSvIQAmoFGQdISq7THlOnW4DeOO8Cd0i",
	"4wVms+Fy92UUCaVhJYyF1oge4iQ+h3mSYxI9pZbjq7OVXrr1vVaquabIjYgdO8v85CvAUOKl0MZm6IFI",
	"LsE1+s6gUv2da5qWlbqxVpRyVhRp3oDTXsIuK0RZp+nVz/vDczftTw1LNPUC+a2QFLCywBTJyQjMPVNT",
	"kO7eBb+kBb/kd7beaafBNXUTa0cu3Tn+Rc5Fj/PuYwcJAkwRx3DXRlG6h0FGL2eH3DGSmyIf/8k+6+vg",
	"MBVh7INRO+H97tgdRSMl1xIZDPauQqCbyIklwkYZhodPWkfOAK8qUWx7tlAadVRj5kcZPEJeth4WcHf9",
	"YAcwENk9U69qNJhuCr5WwKdc0Z0MOCeTMHPRTZQXM4R4KmFCpYMhoppXd4dwdQG8/AF2v7q2uJzZx/ns",
	"dqbTFK79iAdw/arZ3iSe0TVPprSOJ+RIlPOq0uqKl5k3MI+RplZXnjSxebBHf2JWlzZjXnx7/vKVB//j",
	"fJaXwHXWiAqjq8J21b/Mqijb38gBCZnUnc4XZHYSJaPNb1KUxUbp6zX4lNSRNDrIndk6HKKj6I3Uy3SE",
	"0EGTs/eN0BL3+EigalwkrfmOPCRdrwi/4qIMdrMA7Ug0Dy5uWgLWJFeIB7i1dyVykmV3ym4Gpzt9Olrq",
	"OsCT4rn2JM3eUF54w5Tsu9Ax5nlXea/7hmPmS7KKDJmTrDdoSchMKfK0jVUujCMOSb4z15hh4xFh1I1Y",
	"ixFXrKxFNJZrNiW3TQ/IaI4kMk0yvU6Lu4XyNX9qKf5RAxMFSOs+aTyVvYOKaVK8tX14nTrZYTiXH5gs",
	"9O3wt5Ex4qyv/RsPgdgvYMSeugG4zxuVOSy0sUi5HyKXxBEO/3jGwZW4x1nv6cNTMwUvrrset7hEz5D/",
	"OcKgXO2H6wMF5dWnnx2ZI1nvR5hsqdXvkNbzUD1OPFgKeW4FRrn8DvFDh7jKRYfFNNadtmxRO/vodo9J",
	"N7EVqhukMEL1uPORWw4TbgYLNZe01fSQpBPrliaYOKr0lMZvCcbDPIjELfn1gqeykTohw8F03jqAO7Z0",
	"q1joHHBvmtcWNDuLfMlNW0GP0SvQ7VvCYWKbGwoMNO1kUaGVDJBqY5lgTv6/0qjEMLW85pKquLh+dJR8",
	"bwNk/HK9rpXGVBImbfYvIBcbXqYlhyIfmngLsRJUoKQ2EFXA8ANR8SeiIl9FpHlD5FHzYskezKMyPH43",
	"CnEljFiUgC0eUosFN8jJG0NU08UtD6RdG2z+aELzdS0LDYVdG0KsUawR6lC9aZxXC7DXAJI9wHYPn7Iv",
	"0G1nxBV86bDo7+fZ2cOnaHSlPx6kLgBfYGYfNymQnfzVs5M0HaPfksZwjNuPepJ8dU8V5sYZ157TRF2n",
	"nCVs6Xnd4bO04ZKvIB0psjkAE/XF3URDWg8vsqDySMZqtWPCpucHyx1/Gok+d+yPwGC52myE3XjnjlEb",
	"R09teQuaNAxHtZZ8ZuIAV/iIPtIquIh6SuSnNZrS/ZZaNXqyf+Ib6KJ1zjjlDylFG70Q8qWzFyE9EaZq",
	"bjI0E27cXG7pKOZgMMOSVVpIi4pFbZfZn1i+5prnjv2djIGbLb5+kkhP3U2TKo8D/JPjXYMBfZVGvR4h",
	"+yBD+L7sC6lktnEcpfiyfe0RncpRZ27abTfmO9w/9FShzI2SjZJb3SE3HnHqWxGe3DPgLUmxWc9R9Hj0",
	"yj45ZdY6TR68djv0y+uXXsrYKJ3KOdgedy9xaLBawBXG7qU3yY15y73Q5aRduA30n9fzEETOSCwLZzml",
	"CHyjEtppSJneWNJ9rHrCOjB2TN0HRwYLP9ScddNTf3o+ejdRUGlPVzBsDx1b7kvAA/7RR8RnJhfcwNaX",
	"TysZIZQoPX+SZIrme+Rj5+wbtZ1KOL1TGIjnnwBFSZTUoix+bV9+9qofaC7zddJntnAdf2vrtDWLozsw",
	"mT5wzaWEMjkcyZu/Bbk0ITn/XU2dZyPkxLb9ggy03N7iWsC7YAagwoQOvcKWboIYq91HdU3QdrlSBcN5",
	"2lx17XEdFvKI0q3/owZjUw+U8AMFjqFt1LEDyvbNQBaokZ6w76kU8xpYJxERaoIhU0T31XRdlYoXc8xg",
	"cfHt+UtGs1IfqjZE2cZXqAh1V9GziUVpOKeFIIfCQennEdPH2R+v7VZtbNYkB089QHUt2vTloucnQBUp",
	"xs4Jex4VVaW3qm4IhglM9MZpdc1oJB8hTbj/WMvzNap9HdY6TvLT0+QHqjRRacqmxFSTmxLPnYPbZ8qn",
	"RPlzppxufi0MVeCFK+i+eW0egHuzQ3gD212erqUkSjk54pZrMlEei/YAHF2RwZWQhKyH+COFfqoycWzV",
	"gDfYK5kqq1+CYFCTkl5QNqWDQmX1nEslRY6JqlJXtC/VO8XPNiGnV9+QG464P6GJw5UsfNCE4nksjpZC",
	"CIzQI25o6I++uk0l6qA/LdaEXXPLVmCN52xQzEP9Dm9rFNKAzzWKhZ0jPql0x3eJHDLpDs8at8mRZIRP",
	"b0aUx+/ct5+8aQFj0i+FRCXCo80LfmQNxEqi1mkewrKVAuPX031/bN66Pif4FLeA7fuTUHkUxyDXn1s2",
	"+bmHQ50Hr7f3Mru2z1xbnyCp+bkT5UyTnleVn3S8uktSHrBbOYrghPcyC+6jCLnN+PFoe8htb7gK3qeO",
	"0OAKnd1Q4T08IIym0kmvipYTWomisAWjMLFklgQhE2C8FBLauriJCyJPXgm4MXheR/qZXHNLIuAknnYB",
	"vEQPd4qhGevdG7cdqp8eyqEE1xjmGN/GtkjLCONoGrSCG5e7phyvo+5ImHiGdcA9IoclV1Cq8kJUga8W",
	"ekVYUozDMe5Q5ql7AQyPwVAmou6YK+3Ym2jsIeqiLlZgM14UqdSv3+BXhl9ZUaPkAFvI6yZFaFWxHPOu",
	"dBPRDKnNT5QraerNnrlCg1tOF1U1SlBDXFkp7DA+dFns8N9UfszxnfGBHkeHGoaojiOzLw1DJ1NSr6Pp",
	"zIhVNh0TeKfcHh3t1Dcj9Lb/nVJ6qVZdQD5x+om9ybCiPUrxt2/dxRFnZxgkfaWrpUmegIF9KtSiRLWx",
	"efbbS/3FLR9mgUWHUlPrbr8BYrxq3Rwvv5Hw3ijpBqf7lTyUY0G++WhMOrf+dZzlbC8LGn1xRBFC9LYI",
	"oUhbZ8eigigoyH0e9J4mGQ7kbJtOfBghNISbDQH6IcSysooL735vmcUQsz7qffgOYUo8bLvB/UX4WPJR",
	"i90PV2Nx3yEZG37vV7W6BP9kvtJwJVQdHNsh8imohPRrp0ZUE3mfXP/Q8IpTfV5z6Kjx9sJXF6Blep38",
	"h18pTo6BtHr3T2DKHWz6oF7WUNol81TbhDWJqSclqu7cilMSFaZy4nnZsFOx60C9sSFjnSIODOuHzWei",
	"OOrCTOVVnNEoqWOXrgY2nnaqTTWFR6xSRrT54VNlwiaGGF5gpa8obdZwrBDfcwW5xaIAbdyCBjgmiZab",
	"LCo8+v/TT42o000kps86tS/V1LASwIE7fvAaLHrRSFnUT6YnVjpvotOQT2M25BVIX/uz+85jcrT5cgm5",
	"FVcHXt/9dQ0yetk1D3YZquEdPcYTTfQyJm853urYArTvcdxeeKIkircGZ+ztzSXs7hnWoYZkWvd5uGpv",
	"krcDMYDcIXMkokwq+oMMyd4hL0xDGYiFEG1F3aHNgDZaESp6S3rDuQJJuoujfV+6Z8p0SZpJc7muR726",
	"xkDcsQd6w4oW4/rHcywgYppqjSHvR6ylsxfD7IjXPm8IvpVsfCchgwiY8Ft4GE2zlOIS4ppV6Km65roI",
	"LZKml2DVyfbcR4NXdaEaQx/oZTOzaGNjh++oEvm2MAI6L5UTI7KxMPJuOGoTy3HPUNANpX/HQFsH1xK0",
	"r+2H8m+pDGRWhVjafXDsQwVFFt0ICWY0xyUBN5p55nWbWgdz/XLMNMN9QFG8QKZhwx10OkqAMz7nPmQ/",
	"o+/h4VDI9XrQwtTQ6+GiAyEqWpgBEmOqXzJ/Wx5+kHQTY5OQkupHm1Q2HAm66w2ptCrqnC7o+GA0BrnJ",
	"uab2sJKknSYfrrKnI0SvOi9hd0pKUKjWEHYwBpokJwI9yqLQ2+Q7Nb+ZFNyrOwHvc1qu5rNKqTIbcXa8",
	"GKbw6VP8pcgvoWDupgjRgyMVdNgXaGNvvNnX611IWVNVIKH48oSxc0nx2sGx3c0h3Ztc3rP75t/irEVN",
	"WbW8Ue3knUwHvmK+K31LbhaG2c/DDDhWd8upaJADCWK2I+mDNL9O1JM6maqVD13N/Ro/LVERFCmZJBQv",
	"8d6ti2AeTvu+0Hrsn6+0Kj396nTbyumDjGRsCnjhbMMrUp8a1dQ3o27oGBV9XumrjDTv8HuVgdJQxoW6",
	"aA6CIcDj3R9t6ZIbMN626s7POAMi7BcpkjE3VIIHStiQXJBZldGVsUdMaPDlD1sOWK/Ko88TXoOw3Kv8",
	"83BK3Qp9pkwLFW6T5rmNV02BW2CYWi4J/1yGEbeSnicMJsbAj2u+M/RWxwe8uI52K3+jAms3wOKr/ELh",
	"TYmO7YOmGNr5fYR8MOCrifWK6SDEew3F3LJU1xmyw6xJZJdSnl277m0fUve23RzGFhAFjnHjJcEdW/OC",
	"5UpryOMe6bc6BNRGachKhXFkKRf30jrBfoMB+pKVahUOHuaDHJ6G9Fx3VUuK3p0TBBl5Lkcye4Dx78w9",
	"uNQ4cXrHyzkdXyrqYp0wQOKGhd06uh6UJ7ijy7hEYE4g9MPG1/NUuavuuvqF18bKIFq1EXka3f9aYVej",
	"wVIp6k2hwmdSbhNzhktxKVZ41FO3DHHVIcJB8kWZutCYP4je74gU7/6LQll/XLYEz2ZGOFviTfG+9aeK",
	"mSX2t5nK11oLz4RHaCUZw7E/ZIIKXC6mBk40SdQnsoUIgPFQig4MkwIqjgVjiQVjM55A8otGjZ136nmL",
	"Hu8LCS7pjOeczFhrYG7sWoN/tkpCUq+UVsXtOkgXrvnQ2OQuaCdRafD1gLgh02gw0fqymn19QVVZCVfQ",
	"iTDxb2nrPAdjxBXEJTmpMysAKnRY9NXoVOhEzOV7QphfexY536dgN6lsEWJpp9gBTSqp921lRsfETD1K",
	"DqIrUdS8gz9zi+KEY3UJE9dQgPX9NE5xNJNIL24fizgY7IQ0nzyXMh3rFD/lbqykOFvReFOICNuTbSp+",
	"LcetCkOibKWo6aJxhNhvt5CTatYJ5rk9ThgOxkwvTcOo+KSbHb6pdWqUyvYR2aDIaVJ+MxCKVMcZlYII",
	"7Psm5F6yowuTGECYljdgaDC0oadRsw3fsUIsl6BJdTOWy4LrIm4uJMtBO52ZOTXq5qqGg1bXMD+obThO",
	"jYMGZpXSO9DoTYCUO2+PGNMEJkjw6BZOSO90bVs1Vn91sCvpt0p86zQeDNo0Y+ozZllAfYcOq5IobLIN",
	"v4Qj5zHid9g/DeY+8o4Fq3DWKVN83EvrfdPCPmoPNoBuFC2ZPIgYAw3KVRtrQZszpMFU4PMFVQGLg5/7",
	"RTXCXpPNleZL+kMHNqr8wLHv2QfGLCaVm9g76fuwBvsGWjFaa1N8GeRg7tqAgp3DpCEmg/ZqoiWlH/Nx",
	"wG40WCDNhpf73M1Ai0qY2sCGFRW4IsRjwGLHRDYtUv6PJJgYDfPD5JO8Q0eYVleZUkukDjw1JDlgrFJz",
	"X877UXQpqgoVh/Nao5R7zXeHk0EeJSd0DbfpPIy3G9D7uA6bXPdjvdU3AsISGOdylxD4Gy/ODeyLY0LU",
	"hAjp45GV5Oo3S8c7aZnDyNXEyqL62fuDieJs3W0aAE0B0GjjCCpUn4J/bFWraZW8Q4cD4MUxZlEt7+Du",
	"8+B85vf0PzZIiZbyfowSOss/FLbmF9jqotEWefHOWjD+Chlyligm0TxrQv3Gys73IwIxNbeTJ8oyEUlI",
	"EicVeo4Ix/FtfcXLTx8NiDnbzxEfULwejx+Iw8liJBMqzc0es77kk+aOQsfubmr5CqMX/wpuj5Is2g/l",
	"ldwBI0Z9gZfkIliGqq9XINk1jklPHx5+zRY+2U+lIRemrzxfh4JsTfQU1if1D4i39kC41qF1/qrsLch4",
	"GWxR7Ke2uBNawVeyhbA9op+ZqYyc3CSVp6hvQBYJ/KV4VJx198B1cdl5E0HF8nqPfZWGO34bEb1yPPJt",
	"xDCf8NTlUfy/u3RqA8N1Tr6tO7hNXNTt2qY+7Bkid18FoCnvcdKFvVx3fBBECMGqeAxBZX97+DemYYll",
	"rxW7fx8nuH9/7pv+7VH3szvO9+8nNYlP9hSIcOTH8POmKObXseQQlABhJA9Jbz9qURaHCKOTVaYtHI95",
	"U37zuas+S+n63yg8eXhUffngW7ypIMQk1tqZPJoqyhczIVWM75ZIDIOhP3mthd1hSu2gg4nfko+Wvm8C",
	"4P0Disbq5+8+qy6hScrehsvXJtyu3yte4n1ExkjpbiFVnrBvt3xTleAPyp/vLf4DHv/pSfHg8cP/WPzp",
	"wVcPcnjy1dMHD/jTJ/zh08cP4dGfvnryAB4uv366eFQ8evJo8eTRk6+/epo/fvJw8eTrp/9xz/EhBzIB",
	"OgsJHGf/OzsvVyo7f/Uiu3DAtjjhlfgBdlRK2pFxKFLNczyJsOGinJ2Fn/5nOGEnudq0w4dfZz4/3Gxt",
	"bWXOTk+vr69P4i6nK4yPzayq8/VpmGdQxfr81YvGa0l+AtxRSq0S/D+BFM7x2+tv31yw81cvTlqCmZ3N",
	"Hpw8OHnoxlcVSF6J2dnsMf6Ep2eN+37qiW129uHjfHa6Bl7icxL3xwasFnn4pIEXO/9/c81XK9AnvnK3",
	"++nq0WkQK04/+Djhj/u+ncZF8E4/dMKpiwM9sUjW6YeQ+3l/605yZR9GHnWYCMW+ZqcLTCk3tSmYqPH4",
	"UlDZMKcfUFwe/f3U58BKf0S1hc7DaXhzkG7ZwdIHu3Ww9nrk3Obrujr9gP9B+ozAohfnp3YrT9Giffqh",
	"sxr/ebCa7u9t97jF1UYVEABWyyXlst/3+fQD/RtNBNsKtHCCH73y8Nb75li9KGZns2+jRs/WkF9i+Tdy",
	"3eB5efTgQSIdR9SL0fHlixIKd/aePHgyoYNUNu7kExUPO/4iL6W6lgwfbxMvrzcbrncoI9laS8N+/oGJ",
	"JYP+FMKEGZB/8JVB+zPWmprNZx30vP/okUaPFU8xAeeuxWX4eSfz5I/Dbe7X2U39fPqhW+epQz9mXdtC",
	"XUd9UZsiU8Bwvqbyaefv02surJOP/KsfzMM97GyBl6c+xU/v1/ZV/eALpgqIfoyd1clfT5syB8mPfU6V",
	"+upP6kij4O8Kn1upJZYCZmdvo/v/7fuP79037Vrjp/ZSOzs9xUj6tTL2dPZx/qF34cUf3zc0FjIfziot",
	"rjCRwvuP/y8AAP//by2OrPPLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
