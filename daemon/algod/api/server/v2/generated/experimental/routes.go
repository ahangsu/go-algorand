// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a5PcNpLgX0HUboQsXbFbL3tHHTGx15ZkT59lWyG1Pbcr6TwoMqsK0yyAA4DdVdbp",
	"v18gEyBBEqxiPyzNRNwnqYt4JBKJRL7xcZarTaUkSGtmJx9nFdd8AxY0/sXzXNXSZqJwfxVgci0qK5Sc",
	"nYRvzFgt5Go2nwn3a8XtejafSb6Bto3rP59p+EctNBSzE6trmM9MvoYNdwPbXeVaNyNts5XK/BCnNMTZ",
	"i9mnPR94UWgwZgjlz7LcMSHzsi6AWc2l4bn7ZNiVsGtm18Iw35kJyZQEppbMrjuN2VJAWZijsMh/1KB3",
	"0Sr95ONL+tSCmGlVwhDO52qzEBICVNAA1WwIs4oVsMRGa26Zm8HBGhpaxQxwna/ZUukDoBIQMbwg683s",
	"5N3MgCxA427lIC7xv0sN8DtklusV2NmHeWpxSws6s2KTWNqZx74GU5fWMGyLa1yJS5DM9TpiP9bGsgUw",
	"Ltmb756zJ0+ePHML2XBrofBENrqqdvZ4TdR9djIruIXweUhrvFwpzWWRNe3ffPcc53/rFzi1FTcG0ofl",
	"1H1hZy/GFhA6JkhISAsr3IcO9bseiUPR/ryApdIwcU+o8Z1uSjz/F92VnNt8XSkhbWJfGH5l9DnJw6Lu",
	"+3hYA0CnfeUwpd2g7x5mzz58fDR/9PDTv707zf7b//n1k08Tl/+8GfcABpIN81prkPkuW2ngeFrWXA7x",
	"8cbTg1mruizYml/i5vMNsnrfl7m+xDoveVk7OhG5VqflShnGPRkVsOR1aVmYmNWydGzKjeapnQnDKq0u",
	"RQHF3HHfq7XI1yznhobAduxKlKWjwdpAMUZr6dXtOUyfYpQ4uG6ED1zQPy8y2nUdwARskRtkeakMZFYd",
	"uJ7CjcNlweILpb2rzPUuK3a+BoaTuw902SLupKPpstwxi/taMG4YZ+FqmjOxZDtVsyvcnFJcYH+/Goe1",
	"DXNIw83p3KPu8I6hb4CMBPIWSpXAJSIvnLshyuRSrGoNhl2twa79nafBVEoaYGrxd8it2/b/9fbnn5jS",
	"7Ecwhq/gNc8vGMhcFVAcsbMlk8pGpOFpCXHoeo6tw8OVuuT/bpSjiY1ZVTy/SN/opdiIxKp+5FuxqTdM",
	"1psFaLel4QqximmwtZZjANGIB0hxw7fDSc91LXPc/3bajiznqE2YquQ7RNiGb//8cO7BMYyXJatAFkKu",
	"mN3KUTnOzX0YvEyrWhYTxBzr9jS6WE0FuVgKKFgzyh5I/DSH4BHyevC0wlcEThhkFJxmlgPgSNgmaMad",
	"bveFVXwFEckcsV88c8OvVl2AbAidLXb4qdJwKVRtmk4jMOLU+yVwqSxklYalSNDYW48Ox2CojefAGy8D",
	"5UpaLiQUjjkj0MoCMatRmKIJ9+s7w1t8wQ1883Tsjm+/Ttz9perv+t4dn7Tb2CijI5m4Ot1Xf2DTklWn",
	"/wT9MJ7biFVGPw82UqzO3W2zFCXeRH93+xfQUBtkAh1EhLvJiJXkttZw8l4+cH+xjL21XBZcF+6XDf30",
	"Y11a8Vas3E8l/fRKrUT+VqxGkNnAmlS4sNuG/nHjpdmx3Sb1ildKXdRVvKC8o7guduzsxdgm05jXJczT",
	"RtuNFY/zbVBGrtvDbpuNHAFyFHcVdw0vYKfBQcvzJf6zXSI98aX+3f1TVaXrbatlCrWOjv2VjOYDb1Y4",
	"rapS5Nwh8Y3/7L46JgCkSPC2xTFeqCcfIxArrSrQVtCgvKqyUuW8zIzlFkf6dw3L2cns345b+8sxdTfH",
	"0eSvXK+32MmJrCQGZbyqrjHGayf6mD3MwjFo/IRsgtgeCk1C0iY6UhKOBZdwyaU9alWWDj9oDvA7P1OL",
	"b5J2CN89FWwU4YwaLsCQBEwN7xkWoZ4hWhmiFQXSVakWzQ9fnVZVi0H8flpVhA+UHkGgYAZbYay5j8vn",
	"7UmK5zl7ccS+j8dGUVzJcucuBxI13N2w9LeWv8Ua25JfQzviPcNwO5U+clsT0ODE/LugOFQr1qp0Us9B",
	"WnGN/+LbxmTmfp/U+V+DxGLcjhMXKloec6Tj4C+RcvNVj3KGhOPNPUfstN/3ZmTjRkkTzI1oZe9+0rh7",
	"8Nig8ErzigD0X+guFRKVNGpEsN6Sm05kdEmYozMc0RpCdeOzdvA8JCFBUujB8G2p8ou/cLO+gzO/CGMN",
	"jx9Ow9bAC9Bszc36aJaSMuLj1Y425Yi5hqjgs0U01VGzxLta3oGlFdzyaGke3rRYQqjHfsj0QCd0l5/x",
	"P7xk7rM7247107BH7BwZmKHj7J0MhdP2SUGgmVwDtEIotiEFnzmt+1pQPm8nT+/TpD16STYFv0N+EbhD",
	"anvnx+BbtU3B8K3aDo6A2oK5C/pw46AYaWFjJsD3wkOmcP89+rjWfDdEMo49BclugU50NXgaZHzju1la",
	"4+zpQumbcZ8eW5GsNTkz7kaNmO+8hyRsWleZJ8WE2Yoa9AZqvXz7mUZ/+BTGOlh4a/kfgAXjRr0LLHQH",
	"umssqE0lSrgD0l8nmf6CG3jymL39y+nXjx7/9vjrbxxJVlqtNN+wxc6CYV953YwZuyvh/nBlqB3VpU2P",
	"/s3TYKjsjpsax6ha57Dh1XAoMoCSCETNmGs3xFoXzbjqBsAph/McHCcntDOy7TvQXgjjJKzN4k42Ywxh",
	"RTtLwTwkBRwkpusur51mFy9R73R9F6osaK10wr6GR8yqXJXZJWgjVMKb8tq3YL5FEG+r/u8ELbvihrm5",
	"0fRbSxQoEpRlt3I636ehz7eyxc1ezk/rTazOzztlX7rID5ZEwyrQmd1KVsCiXnU0oaVWG8ZZgR3xjv4e",
	"LIoC52IDby3fVD8vl3ejKiocKKGyiQ0YNxOjFk6uN5ArSZEQB7QzP+oU9PQRE0x0dhwAj5G3O5mjnfEu",
	"ju244roREp0eZifzSIt1MJZQrDpkeXttdQwdNNU9kwDHoeMVfkZDxwsoLf9O6fPWEvi9VnV150Jef86p",
	"y+F+Md6UUri+QYcWclV2o29WDvaj1Bq/yIKeh+Pr14DQI0W+Equ1jdSK11qp5d3DmJolBSh+IKWsdH2G",
	"qtlPqnDMxNbmDkSwdrCWwzm6jfkaX6jaMs6kKgA3vzZp4WwkXgMdxejftrG8Z9ekZy3AUVfOa7faumLo",
	"vR3cF23HjOd0QjNEjRnxXTVOR2pF01EsQKmBFzu2AJBMLbyDyLuucJEcXc82iDdeNEzwiw5clVY5GANF",
	"5g1TB0EL7ejqsHvwhIAjwM0szCi25PrWwF5cHoTzAnYZBkoY9tUPv5r7XwBeqywvDyAW26TQ26j53gs4",
	"hHra9PsIrj95THZcAwv3CrMKpdkSLIyh8Fo4Gd2/PkSDXbw9Wi5Boz/uD6X4MMntCKgB9Q+m99tCW1cj",
	"4X9evXUSntswyaUKglVqsJIbmx1iy65RRwd3K4g4YYoT48Ajgtcrbiz5kIUs0PRF1wnOQ0KYm2Ic4FE1",
	"xI38a9BAhmPn7h6UpjaNOmLqqlLaQpFag4Ttnrl+gm0zl1pGYzc6j1WsNnBo5DEsReN7ZNFKCEHcNq4W",
	"H2QxXBw6JNw9v0uisgNEi4h9gLwNrSLsxiFQI4AI0yKaCEeYHuU0cVfzmbGqqhy3sFktm35jaHpLrU/t",
	"L23bIXFx297bhQKDkVe+vYf8ijBLwW9rbpiHg234hZM90AxCzu4hzO4wZkbIHLJ9lI8qnmsVH4GDh7Su",
	"VpoXkBVQ8t1w0F/oM6PP+wbAHW/VXWUhoyim9Ka3lByCRvYMrXA8kxIeGX5huTuCThVoCcT3PjByATh2",
	"ijl5OrrXDIVzJbcojIfLpq1OjIi34aWybsc9PSDInqNPAXgED83QN0cFds5a3bM/xX+B8RM0csT1J9mB",
	"GVtCO/61FjBiQ/UB4tF56bH3HgdOss1RNnaAj4wd2RGD7muurchFhbrOD7C7c9WvP0HSzcgKsFyUULDo",
	"A6mBVdyfUfxNf8ybqYKTbG9D8AfGt8RySmFQ5OkCfwE71LlfU2BnZOq4C102Maq7n7hkCGgIF3MieNwE",
	"tjy35c4JanYNO3YFGpipFxthLQVsd1Vdq6osHiDp19gzo3fiUVBk2IEpXsW3OFS0vOFWzGekE+yH77yn",
	"GHTQ4XWBSqlygoVsgIwkBJPiPVil3K4LHzseoocDJXWA9EwbPbjN9X/PdNCMK2D/pWqWc4kqV22hkWmU",
	"RkEBBUg3gxPBmjl9ZEeLIShhA6RJ4pcHD/oLf/DA77kwbAlXIeHCNeyj48EDtOO8VsZ2Dtcd2EPdcTtL",
	"XB/o8HEXn9dC+jzlcGSBH3nKTr7uDd54idyZMsYTrlv+rRlA72Rup6w9ppFpURU47iRfTjR0at2472/F",
	"pi65vQuvFVzyMlOXoLUo4CAn9xMLJV9e8vLnphsmk0DuaDSHLMcUiIljwbnrQ1kTh3TDNppMbDZQCG6h",
	"3LFKQw4U5e9EPtPAeMQo/i9fc7lCSV+reuUD0Ggc5NS1IZuKruVgiKQ0ZLcyQ+t0inP7oOOQ6OHkIOBO",
	"F+ubtknzuOLNfD63Z8qVGiGvb+pPerfms1FV1SH1slVVCTndbJUJXLwjqEX4aSee6ANB1DmhZYiveFvc",
	"KXCb+8fY2tuhU1AOJ45C4tqPY1FxTk8ud3cgrdBATEOlweDdEtuXDH1VyzgzzV8+ZmcsbIYmeOr628jx",
	"ezOq6ClZCgnZRknYJZOxhYQf8WPyOOH9NtIZJY2xvn3loQN/D6zuPFOo8bb4xd3un9C+q8l8p/Rd+TJp",
	"wMly+QTX4UE/uZ/ypg5OXpYJn6DPW+kzADNv8uSFZtwYlQsUts4KM6eD5t2IPsmli/7XTTTuHZy9/rg9",
	"51ecEonGXSgrxlleCjT9KmmsrnP7XnI0LkVLTUQtBS163Nz4PDRJ2zcT5kc/1HvJMWKtMTklIy2WkLCv",
	"fAcQrI6mXq3A2J6SsgR4L30rIVkthcW5Nu64ZHReKtAYOnRELTd8x5aOJqxiv4NWbFHbrtiOaVnGirL0",
	"njg3DVPL95JbVgI3lv0o5PkWhwve+nBkJdgrpS8aLKRv9xVIMMJk6eiq7+krBr765a99ECym0dNn8t24",
	"8dvcrR3antrU8P/z1X+evDvN/ptnvz/Mnv2P4w8fn366/2Dw4+NPf/7z/+3+9OTTn+//57+ndirAnkoa",
	"8pCfvfAq7dkL1Fta580A9s9muN8ImSWJLA7D6NEW+woTZD0B3e9atewa3ku7lY6QLnkpCsdbbkIO/Rtm",
	"cBbpdPSoprMRPStWWOs1tYFbcBmWYDI91nhjKWoYkJhOz0Nvos+4w/OyrCVtZZC+KfskBIap5bxJwaTq",
	"LCcM8/PWPEQ1+j8ff/3NbN7m1TXfZ/OZ//ohQcmi2KayJwvYppQ8f0DwYNwzrOI7AzbNPRD2ZAwcBWXE",
	"w25gswBt1qL6/JzCWLFIc7gQ0++NRVt5JinY3p0f9E3uvMtDLT8/3FYDFFDZdapqQ0dQw1btbgL04kUq",
	"rS5Bzpk4gqO+saZw+qKPxiuBL7F6AGqfaoo21JwDIrRAFRHW44VMsoik6AdFHs+tP81n/vI3d64O+YFT",
	"cPXnbByR4W+r2L3vX56zY88wzT1K5KWho9TLhCrts4s6kUSOm1GtGhLy3sv38gUshRTu+8l7WXDLjxfc",
	"iNwc1wb0t7zkMoejlWInIWHpBbf8vRxIWqPlpKJUMVbVi1Lk7CJWSFrypBIhwxHev3/Hy5V6//7DIKhi",
	"qD74qZL8hSbInCCsapv5AgeZhiuuU04r0yS448hUwWTfrCRkq5osm6GAgh8/zfN4VZl+outw+VVVuuVH",
	"ZGh8GqfbMmas0kEWcQIKQYP7+5PyF4PmV8GuUhsw7G8bXr0T0n5g2fv64cMnwDqZn3/zV76jyV0Fk60r",
	"o4m4faMKLpzUSthazbOKr1K+sffv31ngFe4+yssbtHGUJcNunYzTEFGPQ7ULCPgY3wCC49rZc7i4t9Qr",
	"FLNKLwE/4RZiGydutB77m+5XlIN64+3q5bEOdqm268yd7eSqjCPxsDNNjZuVE7JCGIURK9RWfTmgBbB8",
	"DfmFr9MCm8ru5p3uIVLHC5qBdQhDFXwogwxrSKBnYQGsrgruRXEud/1kfgPWhnjgN3ABu3PVlqC4TvZ+",
	"N5ncjB1UpNRIunTEGh9bP0Z/8304GCr2VRVysjE5L5DFSUMXoc/4QSaR9w4OcYooOsnOY4jgOoEIIv4R",
	"FNxgoW68W5F+anlOy1jQzZeo5hN4P/NNWuXJR27Fq0GrO33fAJYDU1eGLbiT25WvZEUJ0xEXqw1fwYiE",
	"HDt3JqYldxxCOMihey9506ll/0Ib3DdJkKlx5tacpBRwXxypoDLTi9cLM5H/0HsmsEClR9iiRDGpCWwk",
	"psN1x8lGFffGQEsTMGjZChwBjC5GYslmzU0osoW1yMJZniQD/IEFAPaVfTmLQs2igmNNUZfAc/vndKBd",
	"+uIvoeJLKPMSq5YTSrY4CR+j21PboSQKQAWUsKKFU+NAKG0xgnaDHBw/L5elkMCyVNRaZAaNrhk/Bzj5",
	"+AFjZIFnk0dIkXEENvrFcWD2k4rPplxdB0jpiynwMDZ61KO/IZ33RXHcTuRRlWPhYsSrlQcOwH2oY3N/",
	"9QJucRgm5Jw5NnfJS8fmvMbXDjKoPoJia6/WiI/MuD8mzu5xgNDFcq010VV0k9XEMlMAOi3Q7YF4obYZ",
	"JX4mJd7FduHoPRnajmmoqYNJdV7uGbZQW4z2wauFQqkPwDIORwAj0vC3wiC9Yr+x25yA2TftfmkqRYUG",
	"Scab8xpyGRMnpkw9IsGMkctXUemWGwHQM3a0dZC98ntQSe2KJ8PLvL3V5m1JspA1lDr+Y0couUsj+Bta",
	"YZpiK6/7EkvSTtENWunWmYlEyBTROzYxdNIMXUEGSkClIOsIUdlFynPqdBvAG+dt6BYZL7CaDZe7+1Ek",
	"lIaVMBZaI3qIk/gS5kmORfSUWo6vzlZ66db3RqnmmiI3InbsLPOzrwBDiZdCG5uhByK5BNfoO4NK9Xeu",
	"aVpW6sZaUclZUaR5A057AbusEGWdplc/7w8v3LQ/NSzR1Avkt0JSwMoCSyQnIzD3TE1BunsX/IoW/Irf",
	"2XqnnQbX1E2sHbl05/gXORc9zruPHSQIMEUcw10bRekeBhllzg65YyQ3RT7+o33W18FhKsLYB6N2Qv7u",
	"2B1FIyXXEhkM9q5CoJvIiSXCRhWGhymtI2eAV5Uotj1bKI06qjHzaxk8Ql22HhZwd/1gBzAQ2T1TWTUa",
	"TLcEXyvgU63oTgWco0mYOe8WyosZQjyVMOGlgyGimqy7Q7g6B17+ALtfXVtczuzTfHY702kK137EA7h+",
	"3WxvEs/omidTWscTck2U86rS6pKXmTcwj5GmVpeeNLF5sEd/ZlaXNmOevzx99dqD/2k+y0vgOmtEhdFV",
	"YbvqX2ZVVO1v5ICESupO5wsyO4mS0eY3Jcpio/TVGnxJ6kgaHdTObB0O0VH0RuplOkLooMnZ+0ZoiXt8",
	"JFA1LpLWfEcekq5XhF9yUQa7WYB2JJoHFzetAGuSK8QD3Nq7EjnJsjtlN4PTnT4dLXUd4EnxXHuKZm+o",
	"LrxhSvZd6BjzvKu8133DsfIlWUWGzEnWG7QkZKYUedrGKhfGEYck35lrzLDxiDDqRqzFiCtW1iIayzWb",
	"UtumB2Q0RxKZJllep8XdQvk3f2op/lEDEwVI6z5pPJW9g4plUry1fXidOtlhOJcfmCz07fC3kTHiqq/9",
	"Gw+B2C9gxJ66AbgvGpU5LLSxSLkfIpfENRz+8YyDK3GPs97Th6dmCl5cdz1u8RM9Q/7nCINqtR9+Hygo",
	"r7787Mgcyfd+hMmWWv0OaT0P1eNEwlKocyswyuV3iBMd4lcuOiymse60zxa1s49u95h0E1uhukEKI1SP",
	"Ox+55bDgZrBQc0lbTYkknVi3NMHEUaXHNH5LMB7mQSRuya8WPFWN1AkZDqbT1gHcsaVbxULngHvTZFvQ",
	"7CzyJTdtBSWjV6DbXMJhYZsbCgw07WRRoZUMkGpjmWBO/r/SqMQwtbzikl5xcf3oKPneBsj45XpdKY2l",
	"JEza7F9ALja8TEsORT408RZiJeiBktpA9AKGH4gefyIq8q+INDlEHjVnS/ZwHj3D43ejEJfCiEUJ2OIR",
	"tVhwg5y8MUQ1XdzyQNq1weaPJzRf17LQUNi1IcQaxRqhDtWbxnm1AHsFINlDbPfoGfsK3XZGXMJ9h0V/",
	"P89OHj1Doyv98TB1AfgHZvZxkwLZyV89O0nTMfotaQzHuP2oR8mse3phbpxx7TlN1HXKWcKWntcdPksb",
	"LvkK0pEimwMwUV/cTTSk9fAiC3oeyVitdkzY9PxgueNPI9Hnjv0RGCxXm42wG+/cMWrj6Kl93oImDcPR",
	"W0u+MnGAK3xEH2kVXEQ9JfLzGk3pfkutGj3ZP/ENdNE6Z5zqh5SijV4I9dLZWShPhKWamwrNhBs3l1s6",
	"ijkYzLBklRbSomJR22X2J5avuea5Y39HY+Bmi2+eJspTd8ukyusB/tnxrsGAvkyjXo+QfZAhfF/2lVQy",
	"2ziOUtxvsz2iUznqzE277cZ8h/uHniqUuVGyUXKrO+TGI059K8KTewa8JSk267kWPV57ZZ+dMmudJg9e",
	"ux365c0rL2VslE7VHGyPu5c4NFgt4BJj99Kb5Ma85V7octIu3Ab6L+t5CCJnJJaFs5xSBL5VCe00lExv",
	"LOk+Vj1hHRg7pu6DI4OFH2rOuuWpPz8fvZsoqLSnKxi2h44t9yXgAf/oI+ILkwtuYOvLp5WMEEpUnj9J",
	"MkXzPfKxc/at2k4lnN4pDMTzT4CiJEpqURa/tpmfvdcPNJf5OukzW7iOv7XvtDWLozswWT5wzaWEMjkc",
	"yZu/Bbk0ITn/XU2dZyPkxLb9Bxloub3FtYB3wQxAhQkdeoUt3QQxVrtJdU3QdrlSBcN52lp17XEdPuQR",
	"lVv/Rw3GphKU8AMFjqFt1LEDqvbNQBaokR6x7+kp5jWwTiEi1ARDpYhu1nRdlYoXc6xgcf7y9BWjWakP",
	"vTZE1cZXqAh1V9GziUVlOKeFIIeHg9LpEdPH2R+v7VZtbNYUB08loLoWbfly0fMToIoUY+eIvYgeVaVc",
	"VTcEwwImeuO0umY0ko+QJtx/rOX5GtW+DmsdJ/npZfIDVZroacrmiammNiWeOwe3r5RPhfLnTDnd/EoY",
	"eoEXLqGb89okgHuzQ8iB7S5P11ISpRxd45ZrKlFeF+0BOLoigyshCVkP8dcU+umVieu+GvAWeyVLZfWf",
	"IBi8SUkZlM3TQeFl9ZxLJUWOhapSV7R/qneKn21CTa++ITcccX9CE4cr+fBBE4rnsTj6FEJghB5xQ0N/",
	"9NVtKlEH/WnxTdg1t2wF1njOBsU8vN/hbY1CGvC1RvFh54hPKt3xXSKHTLrDs8Ztck0ywtSbEeXxO/ft",
	"J29awJj0CyFRifBo84IfWQPxJVHrNA9h2UqB8evp5h+bd67PEabiFrD9cBReHsUxyPXnlk1+7uFQp8Hr",
	"7b3Mru1z19YXSGp+7kQ506SnVeUnHX/dJSkP2K0cRXDCe5kF91GE3Gb8eLQ95LY3XAXvU0docInObqjw",
	"Hh4QRvPSSe8VLSe0EkVhC0ZhYskqCUImwHglJLTv4iYuiDx5JeDG4Hkd6WdyzS2JgJN42jnwEj3cKYZm",
	"rHdv3HaofnkohxJcY5hjfBvbR1pGGEfToBXcuNw1z/E66o6Eief4DrhH5PDJFZSqvBBVYNZC7xGWFONw",
	"jDs889S9AIbHYCgTUXeslXbdm2gsEXVRFyuwGS+KVOnXb/Erw6+sqFFygC3kdVMitKpYjnVXuoVohtTm",
	"J8qVNPVmz1yhwS2ni141SlBD/LJS2GFMdFns8N9UfczxnfGBHtcONQxRHcX1qi8NQydTUq+j6cyIVTYd",
	"E3in3B4d7dQ3I/S2/51SeqlWXUA+c/mJfVwu3qMUf3vpLo64OsOg6CtdLU3xBAzsU+EtSlQbm7TfLlfC",
	"q2xQBRYdSs1bd/sNEOOv1s3x8hsJ742KbnC6X8lDORbkm4/GpHPrs+MsZ3tZ0GjGEUUIUW4RQpG2zo5F",
	"BVFQkPs86D1NMhzI2TZd+DBCaAg3GwL0Q4hlZRUX3v3eMoshZn3U+zAPYUo8bLvB/UX4WPJRi90Pl2Nx",
	"36EYG37vv2p1AT5lvtJwKVQdHNsh8imohPRr542oJvI+uf6h4RWn+rLm0FHj7bl/XYCW6XXyH36lODkG",
	"0urdP4Epd7Dpg/eyhtIumafaJqwpTD2pUHXnVpxSqDBVE8/Lhp0Xuw68NzYgqxdTxIHh+2Hz2VlxrQsz",
	"VVdxRqOkjl36NbDxslNtqSk8YpUyoq0Pn3ombGKI4Tm+9BWVzRqOFeJ7LiG3+ChAG7egAa5TRMtNFj08",
	"+v/LT42o000kpq86ta/U1PAlgAN3/CAbLMpopCrqR9MLK5020WnIp7Ea8gqkf/uzm+cxOdp8uYTcissD",
	"2Xd/XYOMMrvmwS5Db3hHyXiiiV7G4i3Xtzq2AO1LjtsLT1RE8dbgjOXeXMDunmEdakiWdZ+Hq/YmdTsQ",
	"A8gdMkciyqSiP8iQ7B3ywjSUgVgI0VbUHdoKaKMvQkW5pDecK5Ckuzja/NI9U6afpJk0l+t6raxrDMQd",
	"S9Abvmgxrn+8wAdETPNaY6j7EWvp7GxYHfHK1w3BXMnGdxIqiIAJv4XEaJqlFBcQv1mFnqorrovQIml6",
	"CVadbM99NMiqC68x9IFeNjOLNjZ2mEeVqLeFEdB5qZwYkY2FkXfDUZtYjnuGgm6o/DsG2jq4lqD9234o",
	"/5bKQGZViKXdB8c+VFBk0Y2QYEZrXBJwo5Vn3rSldbDWL8dKM9wHFMULZBo23EGnowI443PuQ/Zz+h4S",
	"h0Kt14MWpoZeDz86EKKihRkgMab6JfO35eGEpJsYm4SU9H60SVXDkaC73pBKq6LO6YKOD0ZjkJtca2oP",
	"K0naafLhKns6QpTVeQG7Y1KCwmsNYQdjoElyItCjKgq9Tb5T85tJwb26E/C+pOVqPquUKrMRZ8fZsIRP",
	"n+IvRH4BBXM3RYgeHHlBh32FNvbGm3213oWSNVUFEor7R4ydSorXDo7tbg3p3uTynt03/xZnLWqqquWN",
	"akfvZTrwFetd6VtyszDMfh5mwLG6W05FgxwoELMdKR+k+VXiPamjqVr50NXcf+OnJSqCIiWTvCWP1XM8",
	"6L9IMXJ1XmlhwYc30FXutpN5fxczpUqECvqvmfuajUm68RBMNAXLHd21mS/EjRAIk442aA7VwOPoxydW",
	"RhX9GJr52N8e/Y1pWGLJbsUoaodm+tvj+AsagPaHAR64MvIL75rrF43oYcjPsc/G1743dCCwqYlpap9q",
	"aeOahuJcWaqrDI991hRsSymJrl33VgslattuDmkLiAKkuPESz46tecFypTXkcY90TgoBtVEaslJhvFTK",
	"lbu0ToDdYCC6ZKVaMVXlqgCqexicXsl3hKK57urNJMqvJggy8tCNVLAA4/OpPbjUeAjvnmeLrv8k0vk6",
	"YWgjKvfrufa7R57grv1cSQTmBEI/bGQ8TT3r1F1X/4Gxsef+rNqIPI3uf63wotGgoBT1plDhKwZTxiI2",
	"wwMe85TGm4ynZ4hmkHxRplxszB8/71VDOnf/RZGjPy5bgmcuI/ws8T6x567E+icAgJBSGo2tNZUZjq8n",
	"Lw6P5Ofuw3HqYbAEDTUL8++WhZTbEXpMxkPsDz+gxyIXU4MQmoLkE1lPBMB4WEIHhknBCdcFY4mPr2Y8",
	"geSzRiWcd97GFj3+GopFEh/JOZmE1sDc2LUGnwJKr0T2nqWquF0HEdE1HxpuZAFbMJifSW/rcENmxmDu",
	"9E9U9mVvVWUlXEInWsPnpdZ5DsaIS4ift6TOrACo0PjfV0lTYQgDkarVU/zas8iRPQW7ScWFEEs7xQ5o",
	"JUkdaiszOiZm6lFyEF2KouYd/JlbPPQ39sZf4qoLsH6YximuzSTSi9vHIg4GDiHNJ8+lTMcNxWnRjcUR",
	"ZysazwQRYXuyTcWv5LiGPiTKVlKb/kRmhNiXW8jx1usGxtweJwwHY6ZX8mBURNPNDt/U0jNKZfuIbPBg",
	"aFotg/Dgc1ydKIjZvm9CtiabtDCJAYRpeQOG2UIbxhk12/AdK8RyCZq8bsZyWXBdxM2FZDloy4VkV3xn",
	"bq7OOGh1DfODGo3j1DhoYFYp3QYNyARIufO6/Zi2MUFLQBdrQkOga9uqsbdMB7uSzvvhW6dVYQDkCBH4",
	"igWoU9FhVRIFWrbhF3DNeYz4HfZPg3WEvJEeFfLVpCk+7aX1nxF1eODHzRueWEnQ7EekksuQiDHQoFy1",
	"cQu0OUMaTAURn9OLWnEgcf+BirDXZL+k+WCk4OZQwt3LDge2HjcEsd8M2bLZE1QAJnqNK/dG4aFEMeDn",
	"tJ65j9G+lsDRN2jlB/haksuPHKuucqGWSOC4r3S3YWRKw9Hn/Zip7i3WUA6+L5vXGuWwK747XPqvvcnS",
	"4eY0ctC/QhRNA7WnFqJRQ0+WJCvrXUfCSRyb1Ksdw5pmd78YyqNoPb1/3HK8Lye9gFPpJX18i20fvbW6",
	"QCCVBK1xuUsdneCtuMECxwScCZHAd7ZVzWn5IzYoyeVby+rkWFgVsvAw9WF4PkciWnuBrF/CXdQHidYz",
	"btB+8ACBfvAgbdV+8KAW0j54kLxY0nG5dxeOi30/pLf0JtWLJ1HbMNA3cUCi58b301Rc3LytmqApXhxj",
	"NYKW3CexH1vtedrD56HDAfDikLzo6fPgHfXgfOHyAz82SImWMkoJneUfivLzC2zNDdEWeQneWqCnJsiJ",
	"1N2XKITTPG8iI8de6e8HUGIlcycylmUi8JKUCnoXOyIcd3j0JS8/P0/BEveniA8o3oyHW8TRdzGSCZXm",
	"Zrm/r/ikuaNIu7ubWr7GYM+/gtuj5E3vh/Jcc3Cfo0rIS/I0LcMjuZcg2RWOSZkij75hC18bqdKQC9O3",
	"j1yF9+uaYDN8ztXnW2/tgei2Q+v8VdlbkPEymBvZT+1bWOhMWckWwvaIfmGmMnJyk1Seor4BWSTwl+JR",
	"cZHiA9fFRSeFpBXUoxtNabjjVJIoKfSaqSTD8stTl0fpEu7SqQ0M1zn5tu7gNnFRt2ubKvtNFvbwoaIp",
	"6Utpwcx1x/ypzy+h/QGZU4SjJjJhtMbyr2O1NKhexEjZlt5+1KIsDhFGpwhP+84+lpn5zZf6+iIv/f9G",
	"MS7Do+pfW75FCgohJrHWzuTRVFF5nQmVdXy3RB0djJTKay3sDiuQByOG+C2Z4/V9ky/g800aw66/+6y6",
	"gKaGfZtdUJtwu36veIn3EdmbpbuFVHnEXm75pipDKNCf7y3+A5786Wnx8Mmj/1j86eHXD3N4+vWzhw/5",
	"s6f80bMnj+Dxn75++hAeLb95tnhcPH76ePH08dNvvn6WP3n6aPH0m2f/cc/xIQcyAToL9S5n/zs7LVcq",
	"O319lp07YFuc8Er8ADt6eduRcXjTm+d4EmHDRTk7CT/9z3DCjnK1aYcPv858Ob3Z2trKnBwfX11dHcVd",
	"jlcYTpxZVefr4zDP4NHv09dnjRucXEG4o02oFnmrPSmc4rc3L9+es9PXZ0ctwcxOZg+PHh49cuOrCiSv",
	"xOxk9gR/wtOzxn0/9sQ2O/n4aT47XgMvMfvG/bEBq0UePmngxc7/31zx1Qr0kX/o3P10+fg4iBXHH31Y",
	"9ad9347jNwOPP3aiz4sDPfFNseOPoVT2/tadWtQ+6j7qMBGKfc2OF1iBb2pTMFHj8aWgsmGOP6K4PPr7",
	"sS8Zlv6Iagudh+OQopFu2cHSR7t1sPZ65Nzm67o6/oj/QfqMwKIE/WO7lcfotDj+2FmN/zxYTff3tnvc",
	"4nKjCggAq+WSSv/v+3z8kf6NJoJtBVo4wY+SYryDpjlWZ8XsZPYyavR8DfkFvpZH3jk8L48fPkxUL4l6",
	"MTq+fFFC4c7e04dPJ3SQysadfF3nYcdf5IVUV5Jhrjvx8nqz4XqHMpKttTTs5x+YWDLoTyFMmAH5B18Z",
	"tMDj01yz+ayDng+fPNIot/MY65XuWlyGn3cyT/443Ob+s8Spn48/dp/F6tCPWde2UFdRX9SmyBQwnK95",
	"KLbz9/EVF9bJRz5JCsuWDztb4OWxr4jU+7UtQjD4gpUVoh/jeITkr8fNqxDJj31OlfrqT+pIo+DSDJ9b",
	"qSWWAmYn76L7/92HTx/cN32JzqN3H6NL7eT4GBMP1srY49mn+cfehRd//NDQWCgUOau0uMS6Ex8+/b8A",
	"AAD//571TeAizQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
