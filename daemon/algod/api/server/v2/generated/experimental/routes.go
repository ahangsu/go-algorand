// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+2OEzNO8YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
