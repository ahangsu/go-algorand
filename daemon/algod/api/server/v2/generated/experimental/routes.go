// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3qzS4hpf7L//+P8CAAD//wnyblzTyQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
