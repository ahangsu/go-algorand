// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
