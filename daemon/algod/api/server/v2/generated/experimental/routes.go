// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Y77o4KSUbIM1DD58+n8BAAD///FMIOHlygAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
