// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
