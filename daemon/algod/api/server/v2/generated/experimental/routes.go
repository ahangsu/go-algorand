// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
