// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N6u0uMY3/O8+/L8AAAD//0toNrvlyQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
