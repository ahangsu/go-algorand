// Package experimental provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package experimental

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns OK if experimental API is enabled.
	// (GET /v2/experimental)
	ExperimentalCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ExperimentalCheck converts echo context to params.
func (w *ServerInterfaceWrapper) ExperimentalCheck(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExperimentalCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/experimental", wrapper.ExperimentalCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
