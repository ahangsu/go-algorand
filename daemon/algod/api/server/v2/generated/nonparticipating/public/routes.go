// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
