// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Q6Vka+yu9/b9/x8AAP//NyV3CStpAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
