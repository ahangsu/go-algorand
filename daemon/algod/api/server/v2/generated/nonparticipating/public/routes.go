// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
=======
	"H4sIAAAAAAAC/+x9a5PbtpLoX0Fpt8qPFTV+Zk+mKrV3YucxG8dxeSY5ezb2TSCyJeEMBfAAoEaKr//7",
	"LTQAEiRBiZqnncwne0QSaDQajX73h1EqloXgwLUaHX4YFVTSJWiQ+BdNU1FynbDM/JWBSiUrNBN8dOif",
	"EaUl4/PReMTMrwXVi9F4xOkS6nfM9+ORhH+VTEI2OtSyhPFIpQtYUjOw3hTm7WqkdTIXiRviyA5x/HL0",
	"ccsDmmUSlOpC+RPPN4TxNC8zIFpSrmhqHilyzvSC6AVTxH1MGCeCAxEzoheNl8mMQZ6piV/kv0qQm2CV",
	"bvL+JX2sQUykyKEL5wuxnDIOHiqogKo2hGhBMpjhSwuqiZnBwOpf1IIooDJdkJmQO0C1QITwAi+Xo8Nf",
	"Rwp4BhJ3KwW2wv/OJMAfkGgq56BH78exxc00yESzZWRpxw77ElSZa0XwXVzjnK2AE/PVhPxYKk2mQCgn",
	"b799QZ4+ffqlWciSag2ZI7LeVdWzh2uyn48ORxnV4B93aY3mcyEpz5Lq/bffvsD5T9wCh75FlYL4YTky",
	"T8jxy74F+A8jJMS4hjnuQ4P6zReRQ1H/PIWZkDBwT+zLV7op4fy3uisp1emiEIzryL4QfErs4ygPCz7f",
	"xsMqABrvFwZT0gz666Pky/cfHo8fP/r4b78eJf/r/nz+9OPA5b+oxt2BgeiLaSkl8HSTzCVQPC0Lyrv4",
	"eOvoQS1EmWdkQVe4+XSJrN59S8y3lnWuaF4aOmGpFEf5XChCHRllMKNlromfmJQ8N2zKjOaonTBFCilW",
	"LINsbLjv+YKlC5JSZYfA98g5y3NDg6WCrI/W4qvbcpg+higxcF0IH7igTxcZ9bp2YALWyA2SNBcKEi12",
	"XE/+xqE8I+GFUt9Var/LipwugODk5oG9bBF33NB0nm+Ixn3NCFWEEn81jQmbkY0oyTluTs7O8Hu3GoO1",
	"JTFIw81p3KPm8Pahr4OMCPKmQuRAOSLPn7suyviMzUsJipwvQC/cnSdBFYIrIGL6T0i12fb/PvnpNRGS",
	"/AhK0Tm8oekZAZ6KDLIJOZ4RLnRAGo6WEIfmy751OLhil/w/lTA0sVTzgqZn8Rs9Z0sWWdWPdM2W5ZLw",
	"cjkFabbUXyFaEAm6lLwPIDviDlJc0nV30lNZ8hT3v562IcsZamOqyOkGEbak668ejR04itA8JwXwjPE5",
	"0WveK8eZuXeDl0hR8myAmKPNngYXqyogZTMGGalG2QKJm2YXPIzvB08tfAXg+EF6walm2QEOh3WEZszp",
	"Nk9IQecQkMyE/OyYGz7V4gx4RehkusFHhYQVE6WqPuqBEafeLoFzoSEpJMxYhMZOHDoMg7HvOA68dDJQ",
	"KrimjENmmDMCLTRYZtULUzDhdn2ne4tPqYIvnvXd8fXTgbs/E+1d37rjg3YbX0rskYxcneapO7Bxyarx",
	"/QD9MJxbsXlif+5sJJufmttmxnK8if5p9s+joVTIBBqI8HeTYnNOdSnh8B1/aP4iCTnRlGdUZuaXpf3p",
	"xzLX7ITNzU+5/emVmLP0hM17kFnBGlW48LOl/ceMF2fHeh3VK14JcVYW4YLShuI63ZDjl32bbMfclzCP",
	"Km03VDxO114Z2fcLva42sgfIXtwV1Lx4BhsJBlqazvCf9Qzpic7kH+afosjN17qYxVBr6NhdyWg+cGaF",
	"o6LIWUoNEt+6x+apYQJgFQlav3GAF+rhhwDEQooCpGZ2UFoUSS5SmidKU40j/buE2ehw9G8Htf3lwH6u",
	"DoLJX5mvTvAjI7JaMSihRbHHGG+M6KO2MAvDoPERsgnL9lBoYtxuoiElZlhwDivK9aRWWRr8oDrAv7qZ",
	"anxbacfiu6WC9SKc2BenoKwEbF+8p0iAeoJoJYhWFEjnuZhWP9w/Kooag/j8qCgsPlB6BIaCGayZ0uoB",
	"Lp/WJymc5/jlhHwXjo2iuOD5xlwOVtQwd8PM3VruFqtsS24N9Yj3FMHtFHJitsajwYj5V0FxqFYsRG6k",
	"np20Yl7+3r0bkpn5fdDHnweJhbjtJy5UtBzmrI6DvwTKzf0W5XQJx5l7JuSo/e3FyMaMEieYC9HK1v20",
	"427BY4XCc0kLC6B7Yu9SxlFJsy9ZWC/JTQcyuijMwRkOaA2huvBZ23keopAgKbRg+DoX6dn3VC2u4MxP",
	"/Vjd44fTkAXQDCRZULWYjGJSRni86tGGHDHzIir4ZBpMNamWeFXL27G0jGoaLM3BGxdLLOrxO2R6ICO6",
	"y0/4H5oT89icbcP67bATcooMTNnj7JwMmdH2rYJgZzIvoBVCkKVV8InRuveC8kU9eXyfBu3RN9am4HbI",
	"LQJ3SKyv/Bh8LdYxGL4W684REGtQV0EfZhwUIzUs1QD4XjrIBO6/Qx+Vkm66SMaxhyDZLNCIrgpPAw9v",
	"fDNLbZw9mgp5Me7TYiuc1CZnQs2oAfMdt5CEr5ZF4kgxYrayL7QGqr1825lGe/gYxhpYONH0GrCgzKhX",
	"gYXmQFeNBbEsWA5XQPqLKNOfUgVPn5CT74+eP37y25PnXxiSLKSYS7ok040GRe473YwovcnhQXdlqB2V",
	"uY6P/sUzb6hsjhsbR4lSprCkRXcoawC1IpB9jZj3ulhrohlXXQE45HCeguHkFu3E2vYNaC+ZMhLWcnol",
	"m9GHsKyeJSMOkgx2EtO+y6un2YRLlBtZXoUqC1IKGbGv4RHTIhV5sgKpmIh4U964N4h7w4u3Rft3Cy05",
	"p4qYudH0W3IUKCKUpdd8ON+3Q5+ueY2brZzfrjeyOjfvkH1pIt9bEhUpQCZ6zUkG03Le0IRmUiwJJRl+",
	"iHf0d6BRFDhlSzjRdFn8NJtdjaoocKCIysaWoMxMxL5h5HoFqeA2EmKHduZGHYKeNmK8iU73A+AwcrLh",
	"KdoZr+LY9iuuS8bR6aE2PA20WANjDtm8QZaX11b70GGnuqci4Bh0vMLHaOh4Cbmm3wp5WlsCv5OiLK5c",
	"yGvPOXQ51C3GmVIy863XoRmf583om7mBfRJb460s6IU/vm4NCD1S5Cs2X+hArXgjhZhdPYyxWWKA4gOr",
	"lOXmm65q9lpkhpnoUl2BCFYPVnM4Q7chX6NTUWpCCRcZ4OaXKi6c9cRroKMY/ds6lPf0wupZUzDUldLS",
	"rLYsCHpvO/dF/WFCU3tCE0SN6vFdVU5H+5adzsYC5BJotiFTAE7E1DmInOsKF0nR9ay9eONEwwi/aMBV",
	"SJGCUpAlzjC1EzT/nr069BY8IeAIcDULUYLMqLw0sGernXCewSbBQAlF7v/wi3pwC/BqoWm+A7H4Tgy9",
	"lZrvvIBdqIdNv43g2pOHZEclEH+vEC1Qms1BQx8K98JJ7/61Iers4uXRsgKJ/rhrpXg/yeUIqAL1mun9",
	"stCWRU/4n1NvjYRnNoxTLrxgFRssp0onu9iyeamhg5sVBJwwxolx4B7B6xVV2vqQGc/Q9GWvE5zHCmFm",
	"in6Ae9UQM/IvXgPpjp2ae5CrUlXqiCqLQkgNWWwNHNZb5noN62ouMQvGrnQeLUipYNfIfVgKxnfIsiux",
	"CKK6crW4IIvu4tAhYe75TRSVDSBqRGwD5MS/FWA3DIHqAYSpGtGWcJhqUU4VdzUeKS2KwnALnZS8+q4P",
	"TSf27SP9c/1ul7ioru/tTIDCyCv3voP83GLWBr8tqCIODrKkZ0b2QDOIdXZ3YTaHMVGMp5Bso3xU8cxb",
	"4RHYeUjLYi5pBkkGOd10B/3ZPib28bYBcMdrdVdoSGwUU3zTa0r2QSNbhhY4nooJjwSfkNQcQaMK1ATi",
	"vt4xcgY4dow5OTq6Vw2Fc0W3yI+Hy7ZbHRkRb8OV0GbHHT0gyI6jDwG4Bw/V0BdHBX6c1Lpne4p/gHIT",
	"VHLE/pNsQPUtoR5/rwX02FBdgHhwXlrsvcWBo2yzl43t4CN9R7bHoPuGSs1SVqCu8wNsrlz1a08QdTOS",
	"DDRlOWQkeGDVwCL8ntj4m/aYF1MFB9neuuB3jG+R5eRMocjTBP4MNqhzv7GBnYGp4yp02cio5n6inCCg",
	"PlzMiODhK7Cmqc43RlDTC9iQc5BAVDldMq1twHZT1dWiSMIBon6NLTM6J54NivQ7MMSreIJDBcvrbsV4",
	"ZHWC7fCdthSDBjqcLlAIkQ+wkHWQEYVgULwHKYTZdeZix330sKekBpCOaaMHt7r+76kGmnEF5B+iJCnl",
	"qHKVGiqZRkgUFFCANDMYEaya00V21BiCHJZgNUl88vBhe+EPH7o9Z4rM4NwnXJgX2+h4+BDtOG+E0o3D",
	"dQX2UHPcjiPXBzp8zMXntJA2T9kdWeBGHrKTb1qDV14ic6aUcoRrln9pBtA6meshaw9pZFhUBY47yJcT",
	"DB1bN+77CVuWOdVX4bWCFc0TsQIpWQY7ObmbmAn+zYrmP1Wf7dDp6igwtlxCxqiGfEMKCSnY6Hwjqqlq",
	"7AmxcXvpgvI5SuhSlHMXOGbHQQ5bKmsLkSXvDBGVYvSaJ2hVjnFcFyzsEzSM/ALU6FBtk7TVGM5pNZ/L",
	"yRlyFfqdi5joo16p8ahXxTRIXdUqpkVOM8tkAPdtCFgBfuqJB/ouEHVG2OjiK9wWQ71mc6/HRl4PHYOy",
	"O3EQylY/7ItmM/ptvrkCKcMORCQUEhTeCaFdSNmnYhZmlLlLQ22UhmXXdG4//a3n+L3tVdAEzxmHZCk4",
	"bKJJ1IzDj/gwepzwXur5GCWEvm/bQn8D/hZYzXmGUONl8Yu73T6hET/bxV2Qg3jFAM/eEEk66ojL84gr",
	"zqWLtM+vGlfp6UwSqpRIGco4x5ka23PivHcut6SJvTdVEOwVHJ32uC2fU5iJiDZVyAtCSZoztLgKrrQs",
	"U/2OU7TpBEuNBAt55bXfyvfCvxI3K0asfm6od5xioFhl6YkGOMwgYtb4FsAb+1Q5n4PSLd1gBvCOu7cY",
	"JyVnGudaGmpPLLkXIDFiZ2LfXNINmRma0IL8AVKQaamb0jJmQynN8tw5wMw0RMzecapJDkbh/5Hx0zUO",
	"553k/sRx0OdCnlVYiF/Oc+CgmEriQU3f2acYb+qWv3Cxp5i9bh9bl4kZv06Z2qDJp87I/r/3/+vw16Pk",
	"f2nyx6Pky/84eP/h2ccHDzs/Pvn41Vf/r/nT049fPfivf4/tlIc9lqvjID9+6TTJ45eoLtQ+kw7sN2Yv",
	"XzKeRIksjH5o0Ra5j3mpjoAeNI1JegHvuF5zQ0grmrPM8JaLkEP7guicRXs6WlTT2IiW8civdU8h/BJc",
	"hkSYTIs1XlgI6sYBxrPi0InnEt3wvMxKbrfSC8826cPHY4nZuMp8tEVRDgmmxS2oDyZ0fz55/sVoXKez",
	"Vc9H45F7+j5CySxbx5IWM1jHdCt3QPBg3FOkoBsFOs49EPZo6JmNhQiHXYJRytWCFTfPKZRm0ziH86H0",
	"zkaz5sfcxrib84MuwY3zNIjZzcOtJUAGhV7EiiU05Cx8q95NgFaYRiHFCviYsAlM2jaSzKh7LgguBzrD",
	"pH1UHsUQZaY6B5bQPFUEWA8XMsgQEaMfFHkct/44HrnLX125NuMGjsHVnrPy//m/tSD3vvvmlBw4hqnu",
	"2fxZO3SQ8RjRhF1STyOAx3AzWyLGCnnv+Dv+EmaMM/P88B3PqKYHU6pYqg5KBfJrmlOewmQuyKHPE3pJ",
	"NX3HO5JWbxWnIEOLFOU0Zyk5C/WJmjxtZY7uCO/e/UrzuXj37n0nlqEr/bupovzFTpAYQViUOnF1BRIJ",
	"51TGfEWqyivHkW3hkG2zWiFblNag6OsWuPHjPI8WhWrnl3aXXxS5WX5AhsplT5otI0oL6WURI6BYaHB/",
	"Xwt3MUh67s0ipQJFfl/S4lfG9XuSvCsfPXoKpJFw+bu78g1NbgoYbBzpzX9t20Rw4VYrhLWWNCnoPOaS",
	"evfuVw20wN1HeXmJJoo8J/hZI9HTB7LjUPUCPD76N8DCsXfSGi7uxH7la0jFl4CPcAvxHSNu1I7yi+5X",
	"kPp54e1qpY92dqnUi8Sc7eiqlCFxvzNVaZm5EbJ89IJic9RWXRWeKZB0AemZK48Cy0Jvxo3PfYCMEzQ9",
	"62DKFs6xiVtYugEN+lMgZZFRJ4pTvmnn0CvQ2ofhvoUz2JyKuvLDPknzzRxu1XdQkVID6dIQa3hs3Rjt",
	"zXdRWKjYF4VPhcacOE8WhxVd+G/6D7IVea/gEMeIopFj3IcIKiOIsMTfg4ILLNSMdynSjy3PaBlTe/NF",
	"iuh43k/cK7Xy5AKmwtWg0dw+XwJW4RLnikypkduFKyBl85QDLlYqOoceCTn0qQzMBm74YXCQXfde9KYT",
	"s/aF1rlvoiDblxOz5iilgHliSAWVmVaYnJ/Juu2cYwHrQjqETXMUk6p4Qst0qGz4tmyhuz7Q4gQMktcC",
	"hwejiZFQsllQ5WtbYQkwf5YHyQDXmHe/rdrKcRDhFdT5qmqpeJ7bPqcd7dLVXPGFVnx1lVC1HFApxUj4",
	"GFQe2w7BUQDKIIe5Xbh92RNKXQOg3iADx0+zWc44kCQWLBaYQYNrxs0BRj5+SIg1oJPBI8TIOAAb3dE4",
	"MHktwrPJ5/sAyV0NA+rHRkd28DfE061s+LQReURhWDjrcUqlngNQF2FY3V+tOFcchjA+JobNrWhu2JzT",
	"+OpBOkU/UGxtlfhwAREP+sTZLf4Le7HstSZ7FV1kNaHM5IGOC3RbIJ6KdWLzLaMS73Q9NfQejSjH7M/Y",
	"wbTlVe4pMhVrDLLBq8VGMO+ApR8OD0ag4a+ZQnrF7/pucwvMtmm3S1MxKlRIMs6cV5FLnzgxZOoeCaaP",
	"XO4HFVMuBEDL2FGXH3bK704ltSmedC/z+lYb15XAfLJO7Pj3HaHoLvXgr2uFqWqcvGlLLFE7RTNWpFne",
	"JRAhY0Rv2ETXSdN1BSnIAZWCpCFEJWcxx6fRbQBvnBP/WWC8wCIylG8eBAFIEuZMaaiN6D7M4TbMkxRr",
	"1wkx61+dLuTMrO+tENU1Zd2I+GFjmTe+AozgnTGpdIIeiOgSzEvfKlSqvzWvxmWlZoiTrfTKsjhvwGnP",
	"YJNkLC/j9Orm/eGlmfZ1xRJVOUV+y7iNN5liZeJo4OOWqW1s7NYFv7ILfkWvbL3DToN51UwsDbk05/hM",
	"zkWL825jBxECjBFHd9d6UbqFQQYJq13uGMhNgY9/ss362jlMmR97Z9CNT5vtu6PsSNG1BAaDratg6CYy",
	"YgnTQWHfbiZpzxmgRcGydcsWakft1ZjpXgYPXw6thQXcXTfYDgwEds9YMosE1ax8Vwv4tkRzo/DMZBBm",
	"Tpv16UKGEE7FlG8w0EVUley2C1enQPMfYPOLeReXM/o4Hl3OdBrDtRtxB67fVNsbxTO65q0preEJ2RPl",
	"tCikWNE8cQbmPtKUYuVIE1/39ugbZnVxM+bpN0ev3jjwP45HaQ5UJpWo0LsqfK/4bFZli+z1HBBfwNzo",
	"fF5mt6JksPlVZbDQKH2+AFcJOpBGOyUra4dDcBSdkXoWjxDaaXJ2vhG7xC0+EigqF0ltvrMekqZXhK4o",
	"y73dzEPbE82DixtW9zTKFcIBLu1dCZxkyZWym87pjp+Omrp28KRwri21qpe2HLsigrdd6BiyvCmc131J",
	"seCktYp0mRMvl2hJSFTO0riNlU+VIQ5ufWfmZYIv9wijZsSS9bhiecmCscxrQ0rKtIAM5ogiU0Wr2tS4",
	"mwrXaqfk7F8lEJYB1+aRxFPZOqhYncRZ27vXqZEdunO5ga2Fvh7+MjJGWGy1feMhENsFjNBT1wH3ZaUy",
	"+4VWFinzQ+CS2MPhH87YuRK3OOsdfThqtsGLi6bHLeyM0+V/hjBsifTdbXm88uqqvvbMEW2zw1Qyk+IP",
	"iOt5qB5H8oR8eVmGUS5/QJinEDaXaLCYyrpTdwuqZ+/d7j7pJrRCNYMUeqgedz5wy2GdS2+hptxute16",
	"0Yh1ixNMGFV6YMevCcbB3InEzen5lMaKgBohw8B0VDuAG7Z0LYj/2ONeVckSdnYS+JKrd5nNAS9A1il8",
	"3XoyFxQY7LSDRYVaMkCqDWWCsfX/5UpEhin5OeW2eYr5zh4l97UCa/wyX50LiRUcVNzsn0HKljSPSw5Z",
	"2jXxZmzObF+QUkHQeMINZHsuWSpyzTuqFCCHmuMZeTQOut+43cjYiik2zQHfeGzfmFKFnLwyRFWfmOUB",
	"1wuFrz8Z8Pqi5JmETC+URawSpBLqUL2pnFdT0OcAnDzC9x5/Se6j206xFTwwWHT38+jw8ZdodLV/PIpd",
	"AK6vyzZukiE7+btjJ3E6Rr+lHcMwbjfqJJrsbhu79TOuLafJfjrkLOGbjtftPktLyukc4pEiyx0w2W9x",
	"N9GQ1sILz2xXIqWl2BCm4/ODpoY/9USfG/ZnwSCpWC6ZXjrnjhJLQ091Vwk7qR/OtjhyBYE9XP4h+kgL",
	"7yJqKZE3azS191ts1ejJfk2X0ETrmFBbtiNndfSCL1NOjn1VIKyQXBVGtrgxc5mlo5iDwQwzUkjGNSoW",
	"pZ4lfyPpgkqaGvY36QM3mX7xLFIVulmdlO8H+I3jXYICuYqjXvaQvZch3LfkPhc8WRqOkj2osz2CU9nr",
	"zI277fp8h9uHHiqUmVGSXnIrG+RGA059KcLjWwa8JClW69mLHvde2Y1TZinj5EFLs0M/v33lpIylkLFS",
	"f/VxdxKHBC0ZrDB2L75JZsxL7oXMB+3CZaC/Xc+DFzkDscyf5Zgi8LWIaKe+UnllSXex6hHrQN8xNQ8M",
	"GUzdUGPSrAp983z0aqKg4p4ub9juOrbME48H/KONiFsmF9zA2pdvV9JDKEFV/CjJZNXzwMdOyddiPZRw",
	"WqfQE88ngKIoSkqWZ7/UmZ+tpgOS8nQR9ZlNzYe/1e3RqsXZOzBatW9BOYc8OpyVN3/zcmlEcv6nGDrP",
	"kvGB77b7INjlthZXA94E0wPlJzToZTo3E4RYbSbVVUHb+VxkBOepS8TVx7XbPyOocv6vEpSOJSjhAxs4",
	"hrZRww5skW0CPEONdEK+sx2QF0Aa9X9QE/SFHppZ02WRC5qNsQDF6TdHr4id1X5jm/zYIt9zVISaq2jZ",
	"xILql8NCkH2/nnh6xPBxtsdrm1UrnVQ1uWMJqOaNumo4a/kJUEUKsTMhL4NepjZX1Qxh6GHG5NJoddVo",
	"Vj5CmjD/0ZqmC1T7Gqy1n+SHV6f3VKmCjpBVZ6eqJCSeOwO3K1Bv69OPiTC6+TlTtvEtrKCZ81olgDuz",
	"g8+BbS5PlpxbSpnscctVBSD3RbsHzl6R3pUQhayF+D2FftvcYd9i/Sf4VbRCVbvyf6cVpM2grDr2+Ibm",
	"KeWCsxTrQ8WuaNchd4ifbUAprbYh1x9xd0Ijhyvab6AKxXNY7O1A4BmhQ1zX0B88NZtqqcP+qbEV64Jq",
	"MgetHGeDbOzbZjhbI+MKXIlP7Kcc8EkhG75L5JBRd3hSuU32JCNMvelRHr81z1470wLGpJ8xjkqEQ5sT",
	"/Kw1EBt4aqN5ME3mApRbTzP/WP1qvplgKm4G6/cT3/ATx7CuP7Ns6+fuDnXkvd7Oy2zefWHedfWNqp8b",
	"Uc520qOicJP2N1WJygN6zXsRHPFeJt59FCC3Gj8cbQu5bQ1XwfvUEBqs0NkNBd7DHcKoGoy0mlcZodVS",
	"FL5BbJhYtEoC4xEwXjEOdTvayAWRRq8E3Bg8rz3fqVRSbUXAQTztFGiOHu4YQ1PauTcuO1S7upNBCa7R",
	"z9G/jXVvlB7GUb1QC26Ub6ouuIa6A2HiBbbfdojsdjpBqcoJURlmLbR6n8QYh2HcvrtS8wLoHoOuTGQ/",
	"15Lak7PPTdSXiDotsznohGZZrOLq1/iU4FOSlSg5wBrSsqrMWRQkxborzUI0XWpzE6WCq3K5ZS7/wiWn",
	"C5oJRaghbGjkdxgTXaYb/DdWlrJ/Z1ygx96hhj6qw/Xh2FNubo7UkXoNTSeKzZPhmMA75fLoqKe+GKHX",
	"318ppedi3gTkhstPbONy4R7F+Ns35uIIqzN0aq3aq6UqnoCBfcK3gES1sUr7bXIlvMo6xVfRoVS1mNtu",
	"gOhvFjfGy68nvDcoukHt/Wo9lH1BvmlvTDrVLjtOU7KVBfVmHNkIIZtbhFDErbN9UUE2KMg87nw9TDLs",
	"yNk6XrcwQKgPN+sC9IOPZSUFZc79XjOLLmZd1Hs3D2FIPGy9we1FuFjyXovdD6u+uG9fjA2ft5tJnYFL",
	"mS8krJgovWPbRz55ldD+2mjNVEXeR9ffNbziVLdrDu013p66ov52mU4n/+EXGydHgGu5+QRMuZ1N77Sp",
	"6kq71jxVv0KqetCD6kM3bsUhBQhjNfGcbNholLWjzVeXsQ4RB7ptu8Yjlu11YbavEhzGjhI7dvEmXP1l",
	"p+pSU3jECqFYXZY91p1rYIjhKTbYCspmdcfy8T0rSDXW4q/jFiTAPkW0zGRBv8+78lM96nQViemqTm0r",
	"NdUtwL/jju9kgwUZjbZ4+WR4YaWjKjoN+TQWM54Ddy03m3keg6PNZzNINVvtyL77+wJ4kNk19nYZ2zo7",
	"SMZjVfQyFm/Z3+pYA7QtOW4rPEERxUuD05d7cwabe4o0qCFaTX3sr9qL1O1ADCB3SAyJCBWL/rCGZOeQ",
	"Z6qiDMSCj7ayn0NdAa23EVOQS3rBuTxJmoujzi/dMmW8E8ygucyne2VdYyBuX4Jet5FEv/7xEvt2qKpJ",
	"oq/7EWrp5LhbHfHc1Q3BXMnKd+IriIDyv/nEaDtLzs4gbBWFnqpzKjP/RtT04q06yZb7qJNV55sgtIGe",
	"VTOzOja2m0cVqbeFEdBpLowYkfSFkTfDUatYjnvKBt3Y6u0YaGvgmoF0LfVQ/s2FgkQLH0u7DY5tqLCR",
	"RRdCguqtcWmB660887YurYO1filWmqEuoChcIJGwpAY6GRTA6Z9zG7Jf2Oc+ccjXet1pYarodXfPAB8V",
	"zVQHiSHVz4i7LXcnJF3E2MQ4t22bVawaDgfZ9IYUUmRlai/o8GBUBrnBtaa2sJKonSbtrrKlIwRZnWew",
	"ObBKkG+24HcwBNpKThb0oIpCa5Ov1PymYnDPrwS827RcjUeFEHnS4+w47pbwaVP8GUvPICPmpvDRgz2N",
	"a8h9tLFX3uzzxcaXrCkK4JA9mBByxG28tndsN2tItybn9/S2+dc4a1baqlrOqDZ5x+OBr1jvSl6Sm/lh",
	"tvMwBYbVXXIqO8iOAjHrnvJBkp5H2jhNhmrlXVdzu7VOTVQWiphMUneN2REnU4XI1I076jCZrnSQ5+I8",
	"QSpKqvpfMZ3DvNdkkr7iaf2ZwfYUgngbqtwFuiELmpFUSAlp+EU8xcECtRQSklxg+E3MMzjTRh5aYlwz",
	"J7mYE1EYNdeW0fM+lGhXmWAum2Zrv0yso6ankAEol1brprEvd+fZ0nxm/8Y2p4uIvQUR7bG8d/caRygD",
	"ulG0uyBVYA4g0N22pqNYc57mutrtnfqarWmxZGkc3Z9XlElvbMiO1kOR9VXk6Doj+azAHlxFXbbbPaS2",
	"jdx0qJ+0qpk88FgEAPR7ThswDPKf7gvGDNsyJjSC5ONKah03uuay1tn39ewsjafUaq0LIGbsUoLLUrP9",
	"41qNbwqqF/4WM693dUujp4DCFDLb/oMqawnxFhnXvK4tHogiyWEFDYeyS50r0xSUYisIG9/Zj0kGUKB9",
	"si01xzylIZdriVJu7UngaxuC3ahsZRFrd4rsEJyiYt6aJ/aYqKFHyUC0YllJG/hTl2gl1tdFLMKGPawD",
	"OcXeTCK+uG0sYmdsA9J89FzyeGhDmLlZGUVwtqwynloirE+2Kug571ciInanyt9++XUQHIyoViZ175Uv",
	"q125qALZSxnbCKPT/i8qcyjw7VvDoide3HLfRmQsa+piKjIAU/V5xug9qKPDgteWdEMyNpuBtMZ8pSnP",
	"qMzC1xknKUhNmdFsNuriYq2BVpYw3inZGu6Kg3oGE5Nx0S5lAck3TmW4hNSJnpuIxGmvWi36Ohx2diWe",
	"TkDXRrrGuKoeInCJ0Chb2wMmOApIZEnPYM95FPsDtk+D5Umc7U8LnHXIFDFf6wVrqw1i3d0whMjtFvQy",
	"3O4ZCksv1jld0kazoCXZX5BtGv+xvjiHdVX0H+wAL3QYBn0Vve3GgXPLyVE/VkgJlvK+jxIay9/lg3QL",
	"rCWNYIscI9AabCFcG1Df3JfAwaxeVH7bvhagbfcu1lkU3Db567iFLW+yXfsCwjFnQa5ofvOuXSzAeYT4",
	"gOxtvzE49A2GSLaoVBfLTHhFB80d+AGvbmr+Bl3RfwezR1Gt1A3lRJhKrPfBPHiz0NwaLma+hdcKODnH",
	"MW0c2+MvyNRlbhcSUqbaotG5765RucKw2ZTLBlnrHb63Xev8RehLkPHMaxrkdV2pH3X8Oa8hrI/oLTOV",
	"npMbpfIY9XXIIoK/GI8KS6jtuC7OGgFutvNJK3NDSLjiQLcgZH3PQLducbihy7PBXObSKRV01zn4tm7g",
	"NnJR12sbGqXZRe62cu5DgivjXRrM5xjdaRGCLU4Igkp+f/w7kTDDHoaCPHyIEzx8OHav/v6k+dgc54cP",
	"o9LZjcV1Why5Mdy8MYr5pS/Tz2az9SSVtvajZHm2izAaKcJ1F1BMgv3NFSK4lT6kv9lYk+5Rdb3gLhEg",
	"ZxETWWtj8mCqIPl3QN6v+yyS5Yt+nLSUTG+wPqK3H7DfohGo31XRTC4artIP3d2nxRlUFTbr2KdS+dv1",
	"O0FzvI+s2srNLSTyCflmTZdFDu6gfHVv+p/w9G/PskdPH//n9G+Pnj9K4dnzLx89ol8+o4+/fPoYnvzt",
	"+bNH8Hj2xZfTJ9mTZ0+mz548++L5l+nTZ4+nz7748j/vGT5kQLaAjnw1ntH/YLPe5OjNcXJqgK1xQgv2",
	"A7hmz4aMfcdBmuJJhCVl+ejQ//R//AmbpGJZD+9/HbliH6OF1oU6PDg4Pz+fhJ8czDHYIdGiTBcHfp5O",
	"S8KjN8eVl8hagXBHbZ6st+55UjjCZ2+/OTklR2+OJ0G7+cPRo8mjyWPsTl4ApwUbHY6e4k94eha47weO",
	"2EaHHz6ORwcLoDnGBpo/lqAlS/0jCTTbuP+rczqfg5y4Nozmp9WTAy9WHHxwQR8fzQxRfdqmiAd5wd3u",
	"hC6ADI1RNgW80e1HueYz46oHlDM28gwzd20chWFzFeKOs7rZwXHNtHzJR1sD+/DXSCDujM3R9OArETY6",
	"RLoGcUyR/z756TURkjj15g1Nzyq/BTme2fJdUqwYJoRmQRax+XLi6fdfJchNTV+O84X1nX1LH+cAWap5",
	"0cxJq6WqmI8m1gkSZzZkERB2FaJVMy400YT9cys2bFjro+TL9x+e/+3jaAAgGC+oAKt//U7z/HdyzrCh",
	"INoXff1MVx9tHGlfg9L0uA75wQ/qnRxjUl31NOxQWL3TTOX+nQsOv/dtgwMsug80z82LgkNsD95jfSok",
	"FjxzTx49urLWplX1AuulqUbxJHGBgboMyT6qWqSeS1rYs+g7nKKjG1Vhv1Bs6PrsChfazD269HLbw3UW",
	"/TXNsGscKG2X8vizXcoxx5Bdc0EQewF+HI+ef8Z7c8wNz6E5wTeD4o/di+ZnfsbFOfdvGuGnXC6p3KBo",
	"E7S2bFVGoXOF8SDIIu3ZbjSzG73/2HvrHYS9ug4+NKI+s0vdiZ02hccvd1yT91Qf5+yWTm+1AjPPq05P",
	"GBfo+p1h7yn1YEK+C79G7o2VyGydr1JyyHzQpr/1qtKqvmBrDds9FRZpi17agbn47v6+7fv7qGnsaJTn",
	"jgHTOAVbYep4FS57gXZdpa1mzxdqphw05bpAa5Nr7TjZ0jXtTO9jquBORn2Hux7c9YlJAbyVxNRspnb9",
	"rNknCVY3SePKuEbG/ZkLfT/S3NBJsNxWMR5bs/5OGPzLCINVMtHcSmeuTcvlxENs2HjwwfchuAKR0PVh",
	"GCAMhmp18G0Q9XG/xU4eTGxTgfCdi/EMlz20U8zD7hB3At4nIOB1O6/EwKj7adyeUIcwLOrWLDu7wPim",
	"Ku1e+nu1kPlMpbi/MLJ6xTYD6W6B7QLssyOMOWZ9bWz1TymEOaTdiV9/afGryum9lADW6J3kssQDN9al",
	"rHdt6xzTlSTWzOsOOBuGVBuG4o7wuO7zaFgMlsX0FdHU2GuG6E61SqPdrHFHb+yKWN9BqKB+vTl+uUu6",
	"+ozsPIPLM0dugfjeXDcvjbod3t6M22EYb3r26NnNQRDuwmuhybd4i18zh7xWlhYnq31Z2DaOdDC1zSm2",
	"cSXeYkvIKOqmEwGPqgpajIPn5m0bpXHfdVYPC3o9mBDfCkNVjb1cYtdcGEblc0qonNuPDK8zyCD3/J+H",
	"OP69CfkWE3q0GmOwmXZdn8g9xvXh4ydPn7lXJD23sVzt96ZfPDs8+uor91rd+MTqOZ3XlZaHC8hz4T5w",
	"d0R3XPPg8H/+8b+TyeTeTrYq1l9vXtsKwJ8Kb+2qdyEB9O3WZ75JMW3d9/LYhbobcd9/LdbRW0Cs726h",
	"W7uFDPb/FLfPtElGThGtLJmNGkFXeBvZY7LPfTT2TT4M36kukwl5LVy5tjKnkgiZgXSdEOcllZRrgGzi",
	"KRWTTpUtT5XmDLg2iiP2dpOJYhnYKjfzUkKVPldIWGGMPE6POn0Dgt2MHiNpP1km/yNdByWcptU1rYVb",
	"Mpo9l3Ttu0ti/zQh8aevviKPxrX2kudmgKRCTIy5Lul6dINWv4rYBsWfN5sz7QzQxbGHWJBq6afKoQ07",
	"wfy1OfdnK7lbcncbe0Wcc2/HT+3YCe0IrijaVguCFexs70lshrips/GNlOdFqDiLMzMMNQ58wj6Cnabp",
	"qBLaRu/dIb4zAlyKlbQJak+2gVmn6uAD6uUhz+icW8ya+2u5SwPfkRRL7zwSZAY6XbiE3RbqI+zJt4bq",
	"503bmo9ftVSDu9itehHWpMam2APLngW5lOjAAxkh4p98lwbzmM1sgRlfkMn32EfXFPNtZ6uOs64vtys1",
	"oUWV12t2cS8oX9STdwUyRMtV+D/vELwfgjvM8RvfehQx5hbxZ4j496pkQl6LOm3cdb36M7oer/Nmv+4F",
	"vRYcrI/dSL6WFu/cqZXYYRiHRYqvF2L1l6r/yIVFkAPfRHerHPK9bWG7VRYZcnubyT7LK/x7h6Utt4xZ",
	"22RnMYR6tCHM2bxoq2A1O2LcohZzK/z0E1RtboNj3QyLwUPq+YwTC/jVMh0swWOJ+aBqhtDHgeL9ZQZz",
	"Iy2qMLRoS5gp5ILP1afJirZ2+oniJUIlVeedeHudv97ZfYHVfYzKayMgXb0nxXgKtkk09rdjiiyZUi5Y",
	"8tmjv90chJotfUVxHuau3jJ3ef7o6c1NfwJyxVIgp7AshKSS5RvyM68ael+G22HzoKr+mrcGR/tFobep",
	"WRcsDYsYXZwJNkLXPug1yz7uZoZBxco9+SDjAR8MyxvSogAqL84Ad7uu2uW2j1+G0cGNnjZVRa0IKAZF",
	"ewbI/8dooN0J097FzF1+JbeA+upfjk240F0xG1fBMUYKELND8o4/JGpBnz9+8tuT51/4P588/6LHcmbm",
	"cUV7urazeiDz2A4zxID2WZsDr1Zqr/B7eNO7vd8mjkcsW0e7XtR97DpFr51Ydk+Rgm56W+MUO/rwhcPW",
	"Pfluvtih0my6iOpXXv2pysof868rLdhW5HPt6+767/UkTwR8xhBa3Yivwvr2nnxbpMkWWVbNz25aOa2T",
	"DOxF55EnW3fOrQq6+raU1AR1VOBesGmi5fZkSuzMMg7c3YUUWqQit7ErZVEIqavTrSaDxD3oc9s1pL0+",
	"wt1LmEupThdlcfAB/4MVvj7WiQe2AfuBXvMDrB598GFriACCGGkNa+XSaEuFrpo8oDPtrhCA1okZtw+R",
	"rYSNsQQR+ex6pLO/tFCzX6ffy5q0IyN2DnCVVxd00a5oNyj8vaO58eTOBfOJLag2iswYzwgNtrGluwlZ",
	"M4JrNoxc96Jvw85y836n55/xOXstNDleFrZhDmSXi94hbQ7nb4+t1+1+goG7+rshPt07P7zxfWBiZV3f",
	"ecHv4ZALUrHBT0cl5kabu/p6bN93N/mnfZO/8CWHG2R4dy9/Pvey9OGUd1fwp38FP/1sV3ONjpiBV7K/",
	"iS58Ddea+J4XcqRLKJoMWq7wbX4aVL3bq1TfCunbW9zd4p/NLT4oOWmIJSaWsrTzFF/j7MP0/DyPaPp9",
	"B2Vse+3oBTAs+iJShvW7jzM1tofIGQfcKboTPD5pwSPY6zu54071/8xU/x4pw2ndzSapfRf9vgLIaiky",
	"8FEfYjZzRdb6pI9m7xdDnkrTZUHsl1EpA72hp2wJJ+bNn+wUV+pHr8FuiSUt8AyyFKSCZ2qAV9KNOsTd",
	"GLuH0I3aD8CNeyCrHfCwuPTryYVJ9m1Qw6VDCaSNfIU9e3yxOYeMDFbEEODkCsj24IP9F81ZhVCxrsee",
	"gDsbc99ti62eZ8dtAEjeoBBoy/D5r8SMPLJF9EqOmTJ1cz7KM6LlxgiKvmaIBJqTtBEhX8HRPTknvSdn",
	"pyjeWV3PmuKyuKhP6FWGk7ayk3648QPwgnJH8l0EaUEo4TCnmq3Ax41P7jLaL3ybuXzyLQxwTGiW2dNY",
	"bwKsQG6IKqfKyDq8Geh4TzXPyx4MA9YFSGauaJrXDnCrJhzYdPVtAY0n9o1LXlotXmST5Fs9//3N6lLo",
	"xYz8yFIpjvK5UD6uSm2UhmWn9Z379Leeoqdeke/GYAmeMw7JUvBYQ7af8OmP+DDaz1xomvd9fGoe9n3b",
	"um+b8LfAas4z5E6+LH4/kdN/qVyJ1molFEJq3yQfnJq851Hyh2bD0+5J2vA0cCq5h8FAYfu2xs8HHxp/",
	"umIV7k21KHUmzoNvUbO3QTdD8tSDRtEXsGS1Gi6r67VlXacPJ8BD7MRUTyOtt4J24L3dt/6i+RnO5RES",
	"CYZOpmIFUrXUs7skjT9Vksbgfd+Lx9pWk7s4WqmuViJ5LTKw4zY7vcbqI3ORgeuI2RVEqmDDeGC7v5Xq",
	"91qhxikt5wtNyoJoEQtqrj9MaGqZbGLVm/iEQUUyqwThdAu6AkJz7DNKpgCciKlZdH0/4iKpwppwPjLa",
	"hVRGRaEArkKKFJSCLPH1oHeBVvUZxThqvQVPCDgCXM1ClCAzKi8N7NlqJ5xVn25F7v/wi1GYbxxeKwpu",
	"R6ytRBVBb1Xtwkl7XaiHTb+N4NqTh2RHJRAvGmAih1gWObhUjggK98JJ7/61Iers4uXRgrkO7Jop3k9y",
	"OQKqQL1mer8stGWRmPu7C+IL+/SULVES45QLb1eMDZZTpZNdbNm8FK5FmRUEnDDGiXHgHoXzFVX6rcvq",
	"y7ACjL1OcB4rY5sp+gFe9fWDNyP/UnWD74ydmvuQq1JVLeNdpD5ksTVwWG+Z6zWsq7kwrdKPXaUCWAvf",
	"rpH7sBSM75AVFMUmVAfedDNcZHFof6TOQNFFZQOIGhHbADnxbwXYDd3oPYAwVSPaEg4W+QwpZypEDpTb",
	"jCpRFIZb6KTk1Xd9aDqxbx/pn+t3u8RFdX1vZwJUmKbhID+3mFVooF1QRRwcZEnPXCbH3DU56sJsDmOC",
	"GdjJNspHk615KzwCOw9pWcwlzSDJIKcRU8rP9jGxj7cNgDvuyTNZCQ3JFGZCQnzTa0qWvSaiamiB46mY",
	"8EjwCUnNETTKc00g7usdI2eAY8eYk6Oje9VQOFd0i/x4uGy71T1mKTOG2XFHDwiy4+hDAO7BQzX0xVGB",
	"Hye1+aA9xT9AuQkqOWL/STag+pZQj7/XAtrmvPACa9wULfbe4sBRttnLxnbwkb4jGzMgfpbG/nbs0DVW",
	"X2kaUAMFcHIR5fbgnDKdzIS0gnRCZxrkzoD0v1Pm3eHONaCFqw1AcAR3b7pxkMmHrSYcF7EgEHddGBLp",
	"+t/MVN8KOajEZbOQC2WalFyzPCjzXanKn57B8M4IcGcEuDMC3BkB7owAd0aAOyPAnRHgzghwZwS4MwLc",
	"GQH+ukaA2ypam3iJw5fy4oIn7ahEcheV+Kcq8ljdVd4ogWaMc8q061rp8+3dk8vVuNVAc8QBy6E/TtqG",
	"b55+c/SKKFHKFEhqIGScFDk1ugGsddVDrdmd0/cNto0YbeNPquDpE3Ly/ZGvRbdwNdOa794/cv23ld7k",
	"8MB1KQCeWVHUtysAbpDuuhVQfyf4Xmuu8xzLMcZckW/w7ZewglwUIG2ZK6JlGTH5nALNXzjc7LD4/N1M",
	"7oJWfzej/T5uGJoc2pa08HK+XytVhNrcQfIyyCb8fUZzBb/3JRTa8Za0iLU7q24+awtCbvK1yDatE2J2",
	"7QA3sHk26op0jFO5idQ76iYTtElDC8OvHGF1jVkfr7xuYpdou2S2i8Ji4roEFT3H26g8WjCw2rDOUDbl",
	"dNaik1Gs0Ui7St6oAnBICOwpJhzYPSFv7Xe3W5UdIXJHrGbmn0zkYPPNimngu0aLcKznc43K94iPnl48",
	"+2ND2FmZAmFaEV96cff1Mh6tEzPSHHjiGFAyFdkmabCvUeMWypiiSsFyuvsmCvmna/DrLh/zZPs9dTvX",
	"yMtgcdt4ckg068Qx4B7uvNEwmDdX2MIRHXsOMH7dLLqPjYYgEMefYlalFu/bl+nV02zuGN8d4wtOY0si",
	"YNyVqm0zkck1Mj65kSXv53nfrCEtDXDhSb6P5nn0ycFaNxybGUzL+RwbFXecdGZpgOMxwW+JFdrlDuWC",
	"+1GQHbxqXnnZdO/2cF3uEmRg3/c1Bh/gdlC+QW/GsqB8432+kCi2LHOLQ9vj7WoZra0m240EQH+sM/71",
	"mbXfeJtfYLx1V23zd4sWck4VsfsLGSl55nKHOjWn13x4k2Q79Oma12x6a5tku97I6ty8Q64Iv8vNpG1F",
	"CpCJXnN7oJqdzG1ta3tyJ3cNWv8a14ZN+YYeBtut01wzhCu6PWTA1/D6CLpx1MlwjR4daLXoTx0JW3PY",
	"N680eqQzfDOIpDapOCcp5AWhvnt+KrjSskz1O07RSRMsbNINMPHW6H7+9sK/EvcTRtx4bqh3nGJz9cp1",
	"E+VzM4j4Kb4F8GxUlfM5KMMrQyKZAbzj7i3GScmNpiVmZMlSKRKbiGrOkJFPJvbNJd2QGdb/EOQPkIJM",
	"zc0e7Lo1GCvN8txFtJhpiJi941STHKjS5EdmuKwZzhcfqEK5QJ8LeVZhId6pYQ4cFFNJ3PjynX2KzRDc",
	"8r2RDw2W9nFdxPxmuyB42FnWC/nxSwM3xdrBOVO6DoLowH5jDvAl40mUyE4XQFxMWJu2yH2sWOYI6EHT",
	"O6QX8I6bG04Lglyd6ouRQ9vN0zmL9nS0qKaxES1vkF/rIBXvSrgMiTCZO9fKnyg1M6AD777EjbfV4Ft7",
	"v6cbpXHlAs/M054L2T51zbN6XnJKQsMQ1ioH4944bYD85228/v569EWPxivTGLsDdtlVsz0S4s1v+JjQ",
	"XPC5rUJoNEiB+8R4UWoMrL5OIx2saJ6IFUjJMlADV8oE/2ZF85+qz3ZcgEFzt+USMkY15BtSSEghs3Wy",
	"mCK1kjyxlQZIuqB8jnelFOV8YV+z45yDhKoPltFL20PE65SseWJrpnVhPCLWwBiWdQWaLiJ9RfBGMYqw",
	"30FbBmKIqhs5wljpsk/zHY96JVuD1FUdkGaR0zzXA67txgUc4Kee+Cq6399R2R2V7U1lsRJ7iLpZS+e2",
	"+Aq35ZqNM9ddUPIGbT23Um32rmT6n71kuudAilAiaUPKjvfqooowTc6xoM4UiLkwSrQxu5beTiOdEMOQ",
	"Anu6rbyoXKfJdEEZd9VYqvB8hEO7brjat9+7FvOcZWZolzPogLSUTG9QLqcF++0MzP/fG8FWgVx5kb2U",
	"+ehwtNC6ODw4yEVK84VQ+mD0cRw+U62H7yv4P3hpu5BsZTSIj+8//v8AAAD//xNodLIldAEA",
>>>>>>> master
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
