// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
