// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NfxvvbRdKr6G0mtv3v3/AQAA//+W0WlIf2EBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
