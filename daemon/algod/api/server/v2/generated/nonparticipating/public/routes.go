// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wAAAP//XZwCBBFpAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
