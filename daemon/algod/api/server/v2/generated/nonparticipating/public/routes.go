// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
