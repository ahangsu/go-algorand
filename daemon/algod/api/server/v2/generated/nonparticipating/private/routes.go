// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
