// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
