// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
