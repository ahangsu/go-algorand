// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"M32K8XpTbz7e/E8AAAD//zq33ucb1wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
