// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
