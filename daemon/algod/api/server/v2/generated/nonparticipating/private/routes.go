// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
