// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Hz/Wm+mTkNebevPx5v8FAAD//yFcIDt+1wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
