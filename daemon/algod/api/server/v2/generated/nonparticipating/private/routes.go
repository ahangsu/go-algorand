// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/z0rNtye1wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
