// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
