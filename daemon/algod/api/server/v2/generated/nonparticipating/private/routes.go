// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPcNrLgv4KafVWOfUNJ/kh2raqtd4qdZHVxHJelZO8925fFkD0zWHEAhgBHM/Hp",
	"f3+FboAESXCGIyn2pmp/sjXER6PRaPQXuj9OUrUqlARp9OT046TgJV+BgRL/4mmqKmkSkdm/MtBpKQoj",
	"lJyc+m9Mm1LIxWQ6EfbXgpvlZDqRfAVNG9t/Oinh10qUkE1OTVnBdKLTJay4HdhsC9u6HmmTLFTihjij",
	"Ic5fTm52fOBZVoLWfSh/lPmWCZnmVQbMlFxqntpPml0Ls2RmKTRznZmQTElgas7MstWYzQXkmT7yi/y1",
	"gnIbrNJNPrykmwbEpFQ59OF8oVYzIcFDBTVQ9YYwo1gGc2y05IbZGSysvqFRTAMv0yWbq3IPqARECC/I",
	"ajU5fTfRIDMocbdSEGv877wE+A0Sw8sFmMmHaWxxcwNlYsQqsrRzh/0SdJUbzbAtrnEh1iCZ7XXEfqi0",
	"YTNgXLK3375gT58+fW4XsuLGQOaIbHBVzezhmqj75HSScQP+c5/WeL5QJZdZUrd/++0LnP/CLXBsK641",
	"xA/Lmf3Czl8OLcB3jJCQkAYWuA8t6rc9Ioei+XkGc1XCyD2hxve6KeH8n3VXUm7SZaGENJF9YfiV0eco",
	"Dwu67+JhNQCt9oXFVGkHfXeSPP/w8fH08cnNn96dJf/t/vzy6c3I5b+ox92DgWjDtCpLkOk2WZTA8bQs",
	"uezj462jB71UVZ6xJV/j5vMVsnrXl9m+xDrXPK8snYi0VGf5QmnGHRllMOdVbpifmFUyt2zKjuaonQnN",
	"ilKtRQbZ1HLf66VIlyzlmobAduxa5LmlwUpDNkRr8dXtOEw3IUosXLfCBy7oXxcZzbr2YAI2yA2SNFca",
	"EqP2XE/+xuEyY+GF0txV+rDLil0ugeHk9gNdtog7aWk6z7fM4L5mjGvGmb+apkzM2VZV7Bo3JxdX2N+t",
	"xmJtxSzScHNa96g9vEPo6yEjgryZUjlwicjz566PMjkXi6oEza6XYJbuzitBF0pqYGr2T0iN3fb/c/Hj",
	"a6ZK9gNozRfwhqdXDGSqMsiO2PmcSWUC0nC0hDi0PYfW4eCKXfL/1MrSxEovCp5exW/0XKxEZFU/8I1Y",
	"VSsmq9UMSrul/goxipVgqlIOAUQj7iHFFd/0J70sK5ni/jfTtmQ5S21CFznfIsJWfPPXk6kDRzOe56wA",
	"mQm5YGYjB+U4O/d+8JJSVTIbIeYYu6fBxaoLSMVcQMbqUXZA4qbZB4+Qh8HTCF8BOH6QQXDqWfaAI2ET",
	"oRl7uu0XVvAFBCRzxH5yzA2/GnUFsiZ0Ntvip6KEtVCVrjsNwIhT75bApTKQFCXMRYTGLhw6LIOhNo4D",
	"r5wMlCppuJCQWeaMQCsDxKwGYQom3K3v9G/xGdfw1bOhO775OnL356q76zt3fNRuY6OEjmTk6rRf3YGN",
	"S1at/iP0w3BuLRYJ/dzbSLG4tLfNXOR4E/3T7p9HQ6WRCbQQ4e8mLRaSm6qE0/fykf2LJezCcJnxMrO/",
	"rOinH6rciAuxsD/l9NMrtRDphVgMILOGNapwYbcV/WPHi7Njs4nqFa+UuqqKcEFpS3Gdbdn5y6FNpjEP",
	"JcyzWtsNFY/LjVdGDu1hNvVGDgA5iLuC24ZXsC3BQsvTOf6zmSM98Xn5m/2nKHLb2xTzGGotHbsrGc0H",
	"zqxwVhS5SLlF4lv32X61TABIkeBNi2O8UE8/BiAWpSqgNIIG5UWR5CrleaINNzjSf5Qwn5xO/nTc2F+O",
	"qbs+DiZ/ZXtdYCcrspIYlPCiOGCMN1b00TuYhWXQ+AnZBLE9FJqEpE20pCQsC85hzaU5alSWFj+oD/A7",
	"N1ODb5J2CN8dFWwQ4YwazkCTBEwNH2gWoJ4hWhmiFQXSRa5m9Q9fnBVFg0H8flYUhA+UHkGgYAYboY1+",
	"iMvnzUkK5zl/ecS+C8dGUVzJfGsvBxI17N0wd7eWu8Vq25JbQzPiA81wO1V5ZLfGo8GK+fdBcahWLFVu",
	"pZ69tGIb/821DcnM/j6q8x+DxELcDhMXKloOc6Tj4C+BcvNFh3L6hOPMPUfsrNv3dmRjR4kTzK1oZed+",
	"0rg78Fij8LrkBQHovtBdKiQqadSIYL0jNx3J6KIwB2c4oDWE6tZnbe95iEKCpNCB4etcpVd/43p5D2d+",
	"5sfqHz+chi2BZ1CyJdfLo0lMygiPVzPamCNmG6KCz2bBVEf1Eu9reXuWlnHDg6U5eONiCaEe+yHTgzKi",
	"u/yI/+E5s5/t2basn4Y9YpfIwDQdZ+dkyKy2TwoCzWQboBVCsRUp+Mxq3QdB+aKZPL5Po/boG7IpuB1y",
	"i8AdUpt7PwZfq00Mhq/VpncE1Ab0fdCHHQfFSAMrPQK+lw4yhfvv0MfLkm/7SMaxxyDZLtCKrhpPgwxv",
	"fDtLY5w9m6nydtynw1Yka0zOjNtRA+Y77SAJm1ZF4kgxYraiBp2BGi/fbqbRHT6GsRYWLgz/HbCg7aj3",
	"gYX2QPeNBbUqRA73QPrLKNOfcQ1Pn7CLv519+fjJL0++/MqSZFGqRclXbLY1oNkXTjdj2mxzeNhfGWpH",
	"VW7io3/1zBsq2+PGxtGqKlNY8aI/FBlASQSiZsy262OtjWZcdQ3gmMN5CZaTE9oZ2fYtaC+FthLWanYv",
	"mzGEsKyZJWMOkgz2EtOhy2um2YZLLLdldR+qLJSlKiP2NTxiRqUqT9ZQaqEi3pQ3rgVzLbx4W3R/J2jZ",
	"NdfMzo2m30qiQBGhLLOR4/k+DX25kQ1udnJ+Wm9kdW7eMfvSRr63JGpWQJmYjWQZzKpFSxOal2rFOMuw",
	"I97R34FBUeBSrODC8FXx43x+P6qiwoEiKptYgbYzMWph5XoNqZIUCbFHO3OjjkFPFzHeRGeGAXAYudjK",
	"FO2M93FshxXXlZDo9NBbmQZarIUxh2zRIsu7a6tD6KCpHugIOBYdr/AzGjpeQm74t6q8bCyB35WqKu5d",
	"yOvOOXY53C3GmVIy29fr0EIu8nb0zcLCfhRb42dZ0At/fN0aEHqkyFdisTSBWvGmVGp+/zDGZokBih9I",
	"Kcttn75q9lpllpmYSt+DCNYM1nA4S7chX+MzVRnGmVQZ4OZXOi6cDcRroKMY/dsmlPfMkvSsGVjqSnll",
	"V1sVDL23vfui6ZjwlE5ogqjRA76r2ulIrWg6igXIS+DZls0AJFMz5yByritcJEfXs/HijRMNI/yiBVdR",
	"qhS0hixxhqm9oPl2dHWYHXhCwBHgehamFZvz8s7AXq33wnkF2wQDJTT74vuf9cPPAK9Rhud7EIttYuit",
	"1XznBexDPW76XQTXnTwkO14C8/cKMwql2RwMDKHwIJwM7l8Xot4u3h0tayjRH/e7Uryf5G4EVIP6O9P7",
	"XaGtioHwP6feWgnPbpjkUnnBKjZYzrVJ9rFl26ilg9sVBJwwxolx4AHB6xXXhnzIQmZo+qLrBOchIcxO",
	"MQzwoBpiR/7ZayD9sVN7D0pd6Vod0VVRqNJAFluDhM2OuV7Dpp5LzYOxa53HKFZp2DfyEJaC8R2yaCWE",
	"IG5qV4sLsugvDh0S9p7fRlHZAqJBxC5ALnyrALthCNQAIEI3iCbCEbpDOXXc1XSijSoKyy1MUsm63xCa",
	"Lqj1mfmpadsnLm6aeztToDHyyrV3kF8TZin4bck1c3CwFb+ysgeaQcjZ3YfZHsZEC5lCsovyUcWzrcIj",
	"sPeQVsWi5BkkGeR82x/0J/rM6POuAXDHG3VXGUgoiim+6Q0l+6CRHUMrHE/HhEeGX1hqj6BVBRoCcb33",
	"jJwBjh1jTo6OHtRD4VzRLfLj4bJpqyMj4m24VsbuuKMHBNlx9DEAD+ChHvr2qMDOSaN7dqf4L9BuglqO",
	"OHySLeihJTTjH7SAARuqCxAPzkuHvXc4cJRtDrKxPXxk6MgOGHTf8NKIVBSo63wP23tX/boTRN2MLAPD",
	"RQ4ZCz6QGliE/RnF33THvJ0qOMr21ge/Z3yLLCcXGkWeNvBXsEWd+w0FdgamjvvQZSOj2vuJS4aA+nAx",
	"K4KHTWDDU5NvraBmlrBl11AC09VsJYyhgO22qmtUkYQDRP0aO2Z0TjwKivQ7MMareIFDBcvrb8V0QjrB",
	"bvguO4pBCx1OFyiUykdYyHrIiEIwKt6DFcruunCx4z562FNSC0jHtNGDW1//D3QLzbgC9l+qYimXqHJV",
	"BmqZRpUoKKAAaWewIlg9p4vsaDAEOayANEn88uhRd+GPHrk9F5rN4do/uLANu+h49AjtOG+UNq3DdQ/2",
	"UHvcziPXBzp87MXntJAuT9kfWeBGHrOTbzqD114ie6a0doRrl39nBtA5mZsxaw9pZFxUBY47ypcTDB1b",
	"N+77hVhVOTf34bWCNc8TtYayFBns5eRuYqHkN2ue/1h3w8ckkFoaTSFJ8QnEyLHg0vahVxP7dMMmmkys",
	"VpAJbiDfsqKEFCjK34p8uobxiFH8X7rkcoGSfqmqhQtAo3GQU1eabCplJXtDRKUhs5EJWqdjnNsFHfuH",
	"HlYOAm51sa5pmzSPa17P5972jLlSA+R1Tf1R79Z0MqiqWqSuG1WVkNN+rTKCi7cEtQA/zcQjfSCIOiu0",
	"9PEVbos9BXZzfx9bezN0DMr+xEFIXPNxKCrO6sn59h6kFRqIlVCUoPFuCe1Lmr6qefgyzV0+eqsNrPom",
	"eOr6y8Dxezuo6CmZCwnJSknYRh9jCwk/4MfoccL7baAzShpDfbvKQwv+DljtecZQ413xi7vdPaERf93t",
	"XZmjeMUID+EYiTzq0MvziEvPPTvpnl89rZ+5i5JxrVUqUFY6z/SUzonzAro3Km3svamDae/h6HTH7fiu",
	"wheNaJuFvGCcpblAy62S2pRVat5LjrahYKmRoCOvBA9bC1/4JnHzZMR66IZ6LzkGnNUWo2igxBwi5pFv",
	"AbzRUFeLBWjT0THmAO+layUkq6QwONfKUntC5F5AiZE/R9RyxbdsbmnCKPYblIrNKtOWuvFVlTYiz50j",
	"zU7D1Py95IblwLVhPwh5ucHhvLPdnzgJ5lqVVzUW4pfzAiRooZN4cNR39BXjVt3yly6GFV/B02dyvdjx",
	"m6dXWzQdNS+7/98X/3n67iz5b578dpI8/1/HHz4+u3n4qPfjk5u//vX/t396evPXh//5H7Gd8rDH3vw4",
	"yM9fOo30/CWqHY3vpQf7J7O7r4RMokQWRlF0aIt9ge9bHQE9bBulzBLeS7ORlpDWPBeZ5S23IYfuBdE7",
	"i3Q6OlTT2oiOEcqv9UBh/g5chkWYTIc13loI6scTxl/XoTPQPZjD8zKvJG2lF57p8YiP61Lzaf2CkpKr",
	"nDJ8XrfkPijR/fnky68m0+ZZXP19Mp24rx8ilCyyTezxYwabmI7mDggejAeaFXyrwcS5B8IeDWGjmIpw",
	"2BVY5V4vRfHpOYU2YhbncD4k39l6NvJcUqy8PT/oWtw6j4Waf3q4TQmQQWGWsaQLLTkLWzW7CdAJ9yhK",
	"tQY5ZeIIjrq2lsyqey6YLgc+x8f/qDyqMcpMfQ6I0DxVBFgPFzLKoBGjHxR5HLe+mU7c5a/vXZtxA8fg",
	"6s5Z+xH930axB999c8mOHcPUD+gdLg0dvJyMaMLucVArEMhyM0o1Q0Lee/levoS5kMJ+P30vM2748Yxr",
	"kerjSkP5Nc+5TOFoodipf2/0khv+XvYkrcFsUMFLL1ZUs1yk7CrUJxrypAwf/RHev3/H84V6//5DLyai",
	"L/27qaL8hSZIrCCsKpO4/ARJCde8jPmcdP0+HUemBCS7ZiUhW1VkmPT5D9z4cZ7Hi0J336n2l18UuV1+",
	"QIbavcK0W8a0UaWXRayAQtDg/r5W7mIo+bU3i1QaNPvHihfvhDQfWPK+Ojl5Cqz1cPMf7sq3NLktYLRx",
	"ZPAdbdcmggsnrRA2puRJwRcx19b79+8M8AJ3H+XlFZoo8pxht9aDUR8Qj0M1C/D4GN4AguPgx2+4uAvq",
	"5XNRxZeAn3ALsY0VNxqH+233K3hCeuvt6jxD7e1SZZaJPdvRVWlL4n5n6hQ1Cytk+SgILRaorbpsPjNg",
	"6RLSK5dmBVaF2U5b3X2gjRM0PesQmhLw0AMwTAGBjoEZsKrIuBPFudx23+JrMMaH876FK9heqiaDxCGP",
	"79tvwfXQQUVKDaRLS6zhsXVjdDffRXOhYl8U/kk1vq3zZHFa04XvM3yQSeS9h0McI4rWW+UhRPAygggi",
	"/gEU3GKhdrw7kX5seVbLmNHNF0nG43k/c00a5ckFXoWrQaM5fV8BZvNS15rNuJXblUtERe+dAy5Wab6A",
	"AQk59M2MfFXc8ufgIPvuvehNp+bdC61330RBpsaJXXOUUsB+saSCykwn3M7PRO4/51jA/JIOYbMcxaQ6",
	"LpGYDi9bPjJKmDcEWpyAoZSNwOHBaGMklGyWXPscWZhKzJ/lUTLA7/h+f1fWlvMgUizIF1bnZPE8t3tO",
	"e9qly93iE7b4LC2hajki44qV8DE4PbYdSqIAlEEOC1o4NfaE0uQSaDbIwvHjfJ4LCSyJBZ0FZtDgmnFz",
	"gJWPHzFGBnQ2eoQYGQdgo1sbB2avVXg25eIQIKXLhcD92OgQD/6G+LMtCsO2Io8qLAsXA06p1HMA7iIV",
	"6/urEy+LwzAhp8yyuTXPLZtzGl8zSC95CIqtnVQhLrDi4ZA4u8N/QRfLQWuiq+g2qwllJg90XKDbAfFM",
	"bRJ6txmVeGebmaX3aGQ6viKNHUxK0/JAs5naYLAOXi0UCb0HlmE4PBiBhr8RGukV+w3d5gTMrml3S1Mx",
	"KtRIMs6cV5PLkDgxZuoBCWaIXL4IMq/cCoCOsaNJY+yU371Kals86V/mza02bTKK+Uc/seM/dISiuzSA",
	"v74Vps6V8qYrsUTtFO2Yk3aamECEjBG9ZRN9J03fFaQhB1QKkpYQlVzFHJ9WtwG8cS58t8B4gclouNw+",
	"DAKZSlgIbaAxovswh89hnuSYA0+p+fDqTFHO7freKlVfU+RGxI6tZX7yFWAk8FyU2iTogYguwTb6VqNS",
	"/a1tGpeV2qFSlDFWZHHegNNewTbJRF7F6dXN+/1LO+3rmiXqaob8VkiKN5lhhuNoAOWOqSnGdueCX9GC",
	"X/F7W++402Cb2olLSy7tOf4g56LDeXexgwgBxoijv2uDKN3BIIOHr33uGMhNgY//aJf1tXeYMj/23qAb",
	"//x26I6ikaJrCQwGO1ch0E1kxRJhggTB/RepA2eAF4XINh1bKI06qDHzgwwePq1aBwu4u26wPRgI7J6x",
	"RzEl6HYGvUbAp1TPrQQ2R6Mwc9nOcxcyhHAqoX2hgj6i6kdz+3B1CTz/HrY/27a4nMnNdHI302kM127E",
	"Pbh+U29vFM/omidTWssTciDKeVGUas3zxBmYh0izVGtHmtjc26M/MauLmzEvvzl79caBfzOdpDnwMqlF",
	"hcFVYbviD7MqStY3cEB8InSr83mZnUTJYPPrDGOhUfp6CS6jdCCN9lJfNg6H4Cg6I/U8HiG01+TsfCO0",
	"xB0+EihqF0ljviMPSdsrwtdc5N5u5qEdiObBxY3LnxrlCuEAd/auBE6y5F7ZTe90x09HQ117eFI4146c",
	"1ytK666Zkl0XOoYsbwvndV9xTFxJVpE+c5LVCi0Jic5FGrexypm2xCHJd2YbM2w8IIzaESsx4IqVlQjG",
	"ss3GpKbpABnMEUWmjmbHaXA3U65kTyXFrxUwkYE09lOJp7JzUDHLibO2969TKzv053IDk4W+Gf4uMkaY",
	"tLV74yEQuwWM0FPXA/dlrTL7hdYWKftD4JI4wOEfzti7Enc46x19OGqm4MVl2+MWVtjp8z9LGJRqfX95",
	"H6+8uuyxA3NEy/UIncxL9RvE9TxUjyPvjXyaWoFRLr9B+E4hLFLRYjG1daepOtTMPrjdQ9JNaIVqBykM",
	"UD3ufOCWw3yZ3kLNJW01vQNpxbrFCSaMKj2m8RuCcTD3InFzfj3jsWSiVsiwMJ01DuCWLd0o5jt73Ov6",
	"sQTNzgJfct1W0FvyAsrmKWA/L80tBQaadrSo0EgGSLWhTDAl/1+uVWSYSl5zSUVYbD86Sq63BjJ+2V7X",
	"qsRMEDpu9s8gFSuexyWHLO2beDOxEFRfpNIQFLBwA1HtJqIiVwSkfgLkUHM+ZyfToIqO241MrIUWsxyw",
	"xWNqMeMaOXltiKq72OWBNEuNzZ+MaL6sZFZCZpaaEKsVq4U6VG9q59UMzDWAZCfY7vFz9gW67bRYw0OL",
	"RXc/T04fP0ejK/1xErsAXH2YXdwkQ3byd8dO4nSMfksawzJuN+pR9NE8FYgbZlw7ThN1HXOWsKXjdfvP",
	"0opLvoB4pMhqD0zUF3cTDWkdvMiMqhtpU6otEyY+Pxhu+dNA9LllfwQGS9VqJczKOXe0Wll6aqpT0KR+",
	"OCqV5BILe7j8R/SRFt5F1FEiP63RlO632KrRk/2ar6CN1injlP4jF030gk93zs59diHMtFwnWCbc2Lns",
	"0lHMwWCGOStKIQ0qFpWZJ39h6ZKXPLXs72gI3GT21bNIdul2llN5GOCfHO8laCjXcdSXA2TvZQjXl30h",
	"lUxWlqNkD5vXHsGpHHTmxt12Q77D3UOPFcrsKMkguVUtcuMBp74T4ckdA96RFOv1HESPB6/sk1NmVcbJ",
	"g1d2h356+8pJGStVxlIGNsfdSRwlmFLAGmP34ptkx7zjXpT5qF24C/Sf1/PgRc5ALPNnOaYIfK0i2qnP",
	"eF5b0l2sesQ6MHRM7QdLBjM31JS1s0t/ej56P1FQcU+XN2z3HVv2i8cD/tFFxGcmF9zAxpdPKxkglCC7",
	"fpRksvp74GPn7Gu1GUs4nVPoiedfAEVRlFQiz35uXn52iheUXKbLqM9sZjv+0pRZqxdHd2A0+9+SSwl5",
	"dDiSN3/xcmlEcv6nGjvPSsiRbbv1FGi5ncU1gLfB9ED5CS16hcntBCFW24/q6qDtfKEyhvM0qeaa49qv",
	"wxFkS/+1Am1iD5TwAwWOoW3UsgNK1s1AZqiRHrHvqJLyElgrjxBqgj7RQ/vVdFXkimdTTEBx+c3ZK0az",
	"Uh8qFkTJwheoCLVX0bGJBVk0x4Ug+7o/8ecR48fZHa9tV61NUuf2jj1AtS2a7OOi4ydAFSnEzhF7GdRE",
	"pbeqdgiG+UfKldXq6tFIPkKasP8xhqdLVPtarHWY5MdnufdUqYPKknWFqDq1JJ47C7dLdE957qdMWd38",
	"WmgqoAtraL95rR+AO7ODfwPbXl5ZSUmUcnTALVcnkjwU7R44uiK9KyEKWQfxBwr9VCTi0KT/F9grmumq",
	"W0GgV1KSXlDWlX98YfSUSyVFinmmYle0q7Q7xs82IiVX15Drj7g7oZHDFa1bUIfiOSwOVjLwjNAhrm/o",
	"D77aTSXqoD8NlnRdcsMWYLTjbJBNffkNZ2sUUoNLFYp1mQM+qcqW7xI5ZNQdntRukwPJCJ/eDCiP39pv",
	"r51pAWPSr4REJcKhzQl+ZA3EQqDGah7CsIUC7dbTfn+s39k+R/gUN4PNhyNfOBTHINefXTb5uftDnXmv",
	"t/My27YvbFuX36j+uRXlTJOeFYWbdLg4S1QeMBs5iOCI9zLx7qMAufX44Wg7yG1nuArep5bQYI3Obijw",
	"Hu4RRl2opFMEywqtRFHYglGYWDRLgpARMF4JCU1Z28gFkUavBNwYPK8D/XRackMi4Ciedgk8Rw93jKFp",
	"49wbdx2qm93JogTX6OcY3samxsoA46gbNIIbl9u6mq6l7kCYeIFlvB0i+xVTUKpyQlSGrxY6NVRijMMy",
	"bl+lqX0B9I9BXyai7pjq7NCbaOgh6qzKFmASnmWxzK1f41eGX1lWoeQAG0irOsNnUbAU8660E9H0qc1N",
	"lCqpq9WOuXyDO04XFCWKUENYGMnvMD50mW3x31h6y+GdcYEeB4ca+qgOV8/jQLm5PVJP6rU0nWixSMZj",
	"Au+Uu6Ojmfp2hN70v1dKz9WiDcgnTj+xi8uFexTjb9/YiyPMztDL2UpXS508AQP7lC8liWpj/ey3zZXw",
	"KuslcUWHUl2qbrcBYrjo3BQvv4Hw3iDpBqf7lTyUQ0G+6WBMOjfudZzhbCcLGnxxRBFC9LYIoYhbZ4ei",
	"gigoyH7u9R4nGfbkbBPPWxgg1Ieb9QH63seysoIL535vmEUfsy7qvf8OYUw8bLPB3UW4WPJBi93366G4",
	"b5+MDb93i1JdgXsyX5SwFqryjm0f+eRVQvq1VeKpjryPrr9veMWpPq85dNB4e+mKA9AynU7+/c8UJ8dA",
	"mnL7L2DK7W16r9xVX9ol81TThNV5pUflmW7dimMSEMZy4jnZsFVwa0+5sD5jHSMO9Mt/TSciO+jC7F4l",
	"OAyNEjt28WJew2mnmlRTeMQKpUWT3j1W5WtkiOElFuoK0mb1x/LxPWtIDeb0b+IWSoBDkmjZyYK6of9O",
	"PzWgTteRmC7r1K5UU/1E/nvu+N5rsOBFIyVBPxqfWOmsjk5DPo3JjBcgXenO9juP0dHm8zmkRqz3vL77",
	"+xJk8LJr6u0yVII7eIwn6uhlTN5yuNWxAWjX47id8ARJFO8MztDbmyvYPtCsRQ3RrOxTf9XeJm8HYgC5",
	"Q2JJROlY9AcZkp1DXuiaMhALPtqKukOTAW2woFPwlvSWc3mStBdH8750x5TxijKj5rJdD3p1jYG4Qw/0",
	"+gUphvWPl1j/Q9fFFn3ej1BLZ+f97IjXLm8IvpWsfSc+gwho/5t/GE2z5OIKwpJT6Km65mXmW0RNL96q",
	"k+y4j3qv6nwxhS7Q83pm0cTG9t9RRfJtYQR0misrRiRDYeTtcNQ6luOBpqAbyt6OgbYWrjmUrjQfyr+5",
	"0pAY5WNpd8GxCxUUWXQrJOjBHJcE3GDmmbdNah3M9csx0wx3AUXhAlkJK26hK4MEOMNz7kL2C/ruHw75",
	"XK97LUw1ve6vGeCjooXuITGk+jlzt+X+B0m3MTYJKan8s45lw5FQtr0hRamyKqULOjwYtUFudK6pHawk",
	"aqdJ+6vs6AjBq84r2B6TEuSLLfgdDIEmyYlAD7IodDb5Xs1vOgb34l7A+5yWq+mkUCpPBpwd5/0UPl2K",
	"vxLpFWTM3hQ+enCgAA77Am3stTf7ern1KWuKAiRkD48YO5MUr+0d2+0c0p3J5QOza/4NzppVlFXLGdWO",
	"3st44CvmuyrvyM38MLt5mAbL6u44FQ2yJ0HMZiB9UMmvI+WgjsZq5X1Xc7dET0NUBEVMJvG1R5x369Kb",
	"h+O+L7Qeu+crjUpPv1rdtrD6ICMZmwJeOFvxgtSnWjV1zagbOkZFl1e6IiH1O/xOYZ84lGGdLZqDYPDw",
	"OPdHU3nkFoy3KZrzI86ACPtJimjMDVXQgRxWJBckRiV0ZewQE2p8ucOWApabcuhzhFcjLHUq/9SfUrtC",
	"lynTQIHbVPLUhKumwC3QTM3nhH8u/YgbSc8TehNj4Mc132p6q+MCXmxHs5G/UH20W2DxTXqp8KZEx/Ze",
	"Uwzt/C5C3hvwVcd6hXTg4736Ym6eq+sE2WFSJ7KLKc+2Xfu296l7m24WYzMIAse4dpLgli15xlJVlpCG",
	"PeJvdQiolSohyRXGkcVc3HNjBfsVBuhLlquFP3iYD7J/GuJz3VcpKHp3ThAk5LkcyOwB2r0zd+BS48jp",
	"Ha7GdHilp8tlxACJG+Z36+ByTo7gRpRn6ZYXq8EcQej7ja9nsWpV7XV166YNVTE0aiXSOLr/WGFXg8FS",
	"MeqNocJlUm4Sc/pLcS4WeNRjtwxx1T7CQfJZHrvQmDuIzu+IFG//i0JZd1w2B8dmBjhb5E3xrvXHapFF",
	"9reeypVK88+EB2glGsOxO2SC6lPOxgZO1EnUR7KFAIDhUIoWDKMCKg4FY471XhMeQfJ5rcZOW+W4RYf3",
	"+QSXdMZTTmasJTA7dlWCe7ZKQlKnElbBzdJLF7Z539hkL2grUZXg6gFxTaZRb6J1VTG7+oIqkhzW0Iow",
	"cW9pqzQFrcUawoqa1JllAAU6LLpqdCx0IuTyHSHMrT0JnO9jsBtVtgixtFNsjyYV1fs2MqFjosceJQvR",
	"WmQVb+FP36G24FBZwcg15GH9MI5THMwk4ovbxSL2BjshzUfPpYzHOoVPuWsrKc6W1d4UIsLmZOuCX8th",
	"q0KfKBsparxoHCD2mw2kpJq1gnnujhOGgzHdSdMwKD6V9Q7f1jo1SGW7iKxXozQqv2nwNabDjEpeBHZ9",
	"I3Iv2dGFjgwgdMMbMDQYmtDToNmKb1km5nMoSXXThsuMl1nYXEiWQml1ZmbVqNurGhbasoLpXm3Dcmoc",
	"1DOrmN6BRm8CJN86e8SQJjBCgke3cER6p2vbqKHyqb1dib9V4hur8WDQph5SnzHLAuo7dFiVRGGTrfgV",
	"HDiPFr/B7mkw95FzLBiFs46Z4mYnrXdNC7uo3dsA2lG0ZPIgYvQ0KBdNrAVtTp8GY4HPl1QFLAx+7hbV",
	"8HtNNleaL+oP7dmo0j3HvmMfGLKYFHZi56TvwurtG2jFaKxN4WWQgr5vAwp29pP6mAzaq5GWlG7Mxx67",
	"UW+BNBte7lM7Ay0qYmoD41eU4YoQjx6LLRPZuEj535NgQjRM95NP9A4dYFptZUrNkTrw1JDkgLFK9X05",
	"7UbRxajKFwxOqxKl3Gu+3Z8M8iA5oW24jedhvNuAzse13+S6G+uNvuERFsE4l9uIwF97cW5hXxwSokZE",
	"SB+OrChXv1063lHL7EeuRlYWlL/eHUwUZutu0gCUFACNNg6vQnUp+IdGtRpXiNt32ANeGGMWlOL27j4H",
	"zmd+T/9DjZRgKR+GKKG1/H1ha26BjS4abJET74wB7a6QPmcJYhL1izrUb6hqfDciEFNzW3kizyORhCRx",
	"UqHngHAs3y7XPP/00YCYs/0M8QHZ2+H4gTCcLEQyoVLf7jHrKz5q7iB07P6mlm8wevHvYPcoyqLdUE7J",
	"7TFi1Bd4Ti6Cua/6ugbJrnFMevrw+Cs2c8l+ihJSobvK87UvyFZHT2F9UveAeGP2hGvtW+fPytyBjOfe",
	"FsVeN8Wd0Aq+kA2EzRH9zExl4ORGqTxGfT2yiOAvxqPCrLt7rour1psIKpbXeeyrSrjntxHBK8cD30b0",
	"8wmPXR7F/9tLp9LQX+fo27qF28hF3axt7MOePnJ3VQAa8x4nXtjLdscHQYQQrIrHEFT2j8f/YCXMsey1",
	"Yo8e4QSPHk1d0388aX+2x/nRo6gm8cmeAhGO3Bhu3hjF/DyUHIISIAzkIensRyXybB9htLLKNIXjMW/K",
	"Ly531WcpXf8LhSf3j6orH3yHNxWEmMhaW5MHUwX5YkakinHdIolhMPQnrUphtphS2+tg4pfoo6Xv6gB4",
	"94Citvq5u8+oK6iTsjfh8pX2t+t3iud4H5ExUtpbSOVH7JsNXxU5uIPy1wezP8PTvzzLTp4+/vPsLydf",
	"nqTw7MvnJyf8+TP++PnTx/DkL18+O4HH86+ez55kT549mT178uyrL5+nT589nj376vmfH1g+ZEEmQCc+",
	"gePk/yZn+UIlZ2/Ok0sLbIMTXojvYUulpC0Z+yLVPMWTCCsu8smp/+l/+xN2lKpVM7z/deLyw02WxhT6",
	"9Pj4+vr6KOxyvMD42MSoKl0e+3l6VazP3pzXXkvyE+COUmoV7//xpHCG395+c3HJzt6cHzUEMzmdnByd",
	"HD2246sCJC/E5HTyFH/C07PEfT92xDY5/XgznRwvgef4nMT+sQJTitR/KoFnW/d/fc0XCyiPXOVu+9P6",
	"ybEXK44/ujjhm13fjsMieMcfW+HU2Z6eWCTr+KPP/by7dSu5sgsjDzqMhGJXs+MZppQb2xR00Hh4Kahs",
	"6OOPKC4P/n7scmDFP6LaQufh2L85iLdsYemj2VhYOz1SbtJlVRx/xP8gfd64V2kQe2FAqaM4a5pPmTCM",
	"z1SJSZdNurQ8wmd7FTpoOUGqJYI/zyyh214vCAKf150K3Zy+64cN4EDMj4RcwZJ8c2hbMzV8Gf0KQe2V",
	"+tZptW/unncnyfMPHx9PH5/c/MneLe7PL5/ejIzceFGPyy7qi2Nkww+YKhXdSniWn5ycHFRlv6cmNYuk",
	"TarffvfvdUcLw05lt1WdgViNjD0pHTvD98UT5NnPDlzxTltS6z08Dt/N1JcxH1yHcz/+dHOfS3yoZXk8",
	"ozvsZjr58lOu/lxakuc5w5ZBju7+1v8kr6S6lr6lFTiq1YqXW3+MdYspMLfZeK3xhUa3SCnWHOU8qWSr",
	"8PDkA4aLxwIcB/iNNvwW/ObC9vo3v/lU/AY36T74TXuge+Y3Tw4883/8Ff+bw/7ROOwFsbs7cVgn8FES",
	"oWOzkccYpHD8sSWgus89AbX9e9M9bLFeqQy8DKrmcypPtOvz8Uf6N5gINgWUYgWS0ra7XynBwjEmDd/2",
	"f97KNPpjfx1Fp9Ju7Ofjj+3alC0E6WVlMnVNmXKjVxYWYOK5q9aA5tpa9TOK+QGa1+zsR5eAJ9+ijVpk",
	"wDhmBlWVaXRzhk5wF0hYe0/sCEwvnZl6ISROgGZwnIXKkvDgnaiGVEmqst+5Hh1kr1UG/esRL8BfKyi3",
	"zQ3oYJxMW/zREXikCMidr5s+O7s5jPzRXE++pj5x1KX1W38fX3Nh7CXqnpUjRvudDfD82OWQ7PzapG3q",
	"fcFcVMGPYTRk9Nfjuo5W9GNXFY59dargQCMfUOU/N2ax0MyEJFEbmN59sDuLVRoctTRWk9PjY3yquVTa",
	"HE9uph87FpXw44d6M31q7XpTbz7c/E8AAAD//+DTyScT1gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
