// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N/8vAAD//yDj4zbO1QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
