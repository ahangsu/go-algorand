// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
