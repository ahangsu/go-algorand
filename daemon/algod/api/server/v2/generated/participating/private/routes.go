// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
