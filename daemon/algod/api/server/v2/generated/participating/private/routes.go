// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VEFy9GTfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
