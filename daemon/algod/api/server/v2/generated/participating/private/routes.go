// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/ZPbNrLgv4LSe1VOfOKMv5LduGrr3SROsnNxEpc9yd57ti8LkS0JOxTABcAZKT7/",
	"71foBkiQBCVqZmJn7+Une0R8NBqNRn+h+90sV5tKSZDWzJ6+m1Vc8w1Y0PgXz3NVS5uJwv1VgMm1qKxQ",
	"cvY0fGPGaiFXs/lMuF8rbtez+UzyDbRtXP/5TMM/a6GhmD21uob5zORr2HA3sN1VrnUz0jZbqcwPcUZD",
	"nD+bvd/zgReFBmOGUP4oyx0TMi/rApjVXBqeu0+GXQu7ZnYtDPOdmZBMSWBqyey605gtBZSFOQmL/GcN",
	"ehet0k8+vqT3LYiZViUM4fxKbRZCQoAKGqCaDWFWsQKW2GjNLXMzOFhDQ6uYAa7zNVsqfQBUAiKGF2S9",
	"mT19PTMgC9C4WzmIK/zvUgP8CpnlegV29naeWtzSgs6s2CSWdu6xr8HUpTUM2+IaV+IKJHO9Ttj3tbFs",
	"AYxL9vKbr9jjx4+/cAvZcGuh8EQ2uqp29nhN1H32dFZwC+HzkNZ4uVKayyJr2r/85iuc/5Vf4NRW3BhI",
	"H5Yz94WdPxtbQOiYICEhLaxwHzrU73okDkX78wKWSsPEPaHGd7op8fwfdVdybvN1pYS0iX1h+JXR5yQP",
	"i7rv42ENAJ32lcOUdoO+fpB98fbdw/nDB+//7fVZ9l/+z88ev5+4/K+acQ9gINkwr7UGme+ylQaOp2XN",
	"5RAfLz09mLWqy4Kt+RVuPt8gq/d9metLrPOKl7WjE5FrdVaulGHck1EBS16XloWJWS1Lx6bcaJ7amTCs",
	"0upKFFDMHfe9Xot8zXJuaAhsx65FWToarA0UY7SWXt2ew/Q+RomD60b4wAX9fpHRrusAJmCL3CDLS2Ug",
	"s+rA9RRuHC4LFl8o7V1ljrus2MUaGE7uPtBli7iTjqbLcscs7mvBuGGchatpzsSS7VTNrnFzSnGJ/f1q",
	"HNY2zCENN6dzj7rDO4a+ATISyFsoVQKXiLxw7oYok0uxqjUYdr0Gu/Z3ngZTKWmAqcU/ILdu2//Xqx9/",
	"YEqz78EYvoIXPL9kIHNVQHHCzpdMKhuRhqclxKHrObYOD1fqkv+HUY4mNmZV8fwyfaOXYiMSq/qeb8Wm",
	"3jBZbxag3ZaGK8QqpsHWWo4BRCMeIMUN3w4nvdC1zHH/22k7spyjNmGqku8QYRu+/cuDuQfHMF6WrAJZ",
	"CLliditH5Tg392HwMq1qWUwQc6zb0+hiNRXkYimgYM0oeyDx0xyCR8jj4GmFrwicMMgoOM0sB8CRsE3Q",
	"jDvd7gur+AoikjlhP3nmhl+tugTZEDpb7PBTpeFKqNo0nUZgxKn3S+BSWcgqDUuRoLFXHh2OwVAbz4E3",
	"XgbKlbRcSCgcc0aglQViVqMwRRPu13eGt/iCG/j8ydgd336duPtL1d/1vTs+abexUUZHMnF1uq/+wKYl",
	"q07/CfphPLcRq4x+HmykWF2422YpSryJ/uH2L6ChNsgEOogId5MRK8ltreHpG3nf/cUy9spyWXBduF82",
	"9NP3dWnFK7FyP5X003O1EvkrsRpBZgNrUuHCbhv6x42XZsd2m9Qrnit1WVfxgvKO4rrYsfNnY5tMYx5L",
	"mGeNthsrHhfboIwc28Num40cAXIUdxV3DS9hp8FBy/Ml/rNdIj3xpf7V/VNVpettq2UKtY6O/ZWM5gNv",
	"VjirqlLk3CHxpf/svjomAKRI8LbFKV6oT99FIFZaVaCtoEF5VWWlynmZGcstjvTvGpazp7N/O23tL6fU",
	"3ZxGkz93vV5hJyeykhiU8ao6YowXTvQxe5iFY9D4CdkEsT0UmoSkTXSkJBwLLuGKS3vSqiwdftAc4Nd+",
	"phbfJO0Qvnsq2CjCGTVcgCEJmBreMyxCPUO0MkQrCqSrUi2aHz45q6oWg/j9rKoIHyg9gkDBDLbCWPMp",
	"Lp+3Jyme5/zZCfs2HhtFcSXLnbscSNRwd8PS31r+FmtsS34N7Yj3DMPtVPrEbU1AgxPz74LiUK1Yq9JJ",
	"PQdpxTX+q28bk5n7fVLnfw0Si3E7TlyoaHnMkY6Dv0TKzSc9yhkSjjf3nLCzft+bkY0bJU0wN6KVvftJ",
	"4+7BY4PCa80rAtB/obtUSFTSqBHBektuOpHRJWGOznBEawjVjc/awfOQhARJoQfDl6XKL//KzfoOzvwi",
	"jDU8fjgNWwMvQLM1N+uTWUrKiI9XO9qUI+YaooLPFtFUJ80S72p5B5ZWcMujpXl402IJoR77IdMDndBd",
	"fsT/8JK5z+5sO9ZPw56wC2Rgho6zdzIUTtsnBYFmcg3QCqHYhhR85rTuo6D8qp08vU+T9uhrsin4HfKL",
	"wB1S2zs/Bl+qbQqGL9V2cATUFsxd0IcbB8VICxszAb5nHjKF++/Rx7XmuyGScewpSHYLdKKrwdMg4xvf",
	"zdIaZ88WSt+M+/TYimStyZlxN2rEfOc9JGHTuso8KSbMVtSgN1Dr5dvPNPrDpzDWwcIry38DLBg36l1g",
	"oTvQXWNBbSpRwh2Q/jrJ9BfcwONH7NVfzz57+OiXR5997kiy0mql+YYtdhYM+8TrZszYXQmfDleG2lFd",
	"2vTonz8JhsruuKlxjKp1DhteDYciAyiJQNSMuXZDrHXRjKtuAJxyOC/AcXJCOyPbvgPtmTBOwtos7mQz",
	"xhBWtLMUzENSwEFiOnZ57TS7eIl6p+u7UGVBa6UT9jU8YlblqsyuQBuhEt6UF74F8y2CeFv1fydo2TU3",
	"zM2Npt9aokCRoCy7ldP5Pg19sZUtbvZyflpvYnV+3in70kV+sCQaVoHO7FayAhb1qqMJLbXaMM4K7Ih3",
	"9LdgURS4EBt4Zfmm+nG5vBtVUeFACZVNbMC4mRi1cHK9gVxJioQ4oJ35Uaegp4+YYKKz4wB4jLzayRzt",
	"jHdxbMcV142Q6PQwO5lHWqyDsYRi1SHL22urY+igqe6ZBDgOHc/xMxo6nkFp+TdKX7SWwG+1qqs7F/L6",
	"c05dDveL8aaUwvUNOrSQq7IbfbNysJ+k1vhRFvRVOL5+DQg9UuRzsVrbSK14oZVa3j2MqVlSgOIHUspK",
	"12eomv2gCsdMbG3uQARrB2s5nKPbmK/xhaot40yqAnDza5MWzkbiNdBRjP5tG8t7dk161gIcdeW8dqut",
	"K4be28F90XbMeE4nNEPUmBHfVeN0pFY0HcUClBp4sWMLAMnUwjuIvOsKF8nR9WyDeONFwwS/6MBVaZWD",
	"MVBk3jB1ELTQjq4OuwdPCDgC3MzCjGJLrm8N7OXVQTgvYZdhoIRhn3z3s/n0I8BrleXlAcRimxR6GzXf",
	"ewGHUE+bfh/B9SePyY5rYOFeYVahNFuChTEUHoWT0f3rQzTYxduj5Qo0+uN+U4oPk9yOgBpQf2N6vy20",
	"dTUS/ufVWyfhuQ2TXKogWKUGK7mx2SG27Bp1dHC3gogTpjgxDjwieD3nxpIPWcgCTV90neA8JIS5KcYB",
	"HlVD3Mg/Bw1kOHbu7kFpatOoI6auKqUtFKk1SNjumesH2DZzqWU0dqPzWMVqA4dGHsNSNL5HFq2EEMRt",
	"42rxQRbDxaFDwt3zuyQqO0C0iNgHyKvQKsJuHAI1AogwLaKJcITpUU4TdzWfGauqynELm9Wy6TeGplfU",
	"+sz+1LYdEhe37b1dKDAYeeXbe8ivCbMU/Lbmhnk42IZfOtkDzSDk7B7C7A5jZoTMIdtH+ajiuVbxETh4",
	"SOtqpXkBWQEl3w0H/Yk+M/q8bwDc8VbdVRYyimJKb3pLySFoZM/QCsczKeGR4ReWuyPoVIGWQHzvAyMX",
	"gGOnmJOno3vNUDhXcovCeLhs2urEiHgbXinrdtzTA4LsOfoUgEfw0Ax9c1Rg56zVPftT/CcYP0EjRxw/",
	"yQ7M2BLa8Y9awIgN1QeIR+elx957HDjJNkfZ2AE+MnZkRwy6L7i2IhcV6jrfwe7OVb/+BEk3IyvAclFC",
	"waIPpAZWcX9G8Tf9MW+mCk6yvQ3BHxjfEssphUGRpwv8JexQ535BgZ2RqeMudNnEqO5+4pIhoCFczIng",
	"cRPY8tyWOyeo2TXs2DVoYKZebIS1FLDdVXWtqrJ4gKRfY8+M3olHQZFhB6Z4FV/hUNHyhlsxn5FOsB++",
	"i55i0EGH1wUqpcoJFrIBMpIQTIr3YJVyuy587HiIHg6U1AHSM2304DbX/z3TQTOugP2nqlnOJapctYVG",
	"plEaBQUUIN0MTgRr5vSRHS2GoIQNkCaJX+7f7y/8/n2/58KwJVyHBxeuYR8d9++jHeeFMrZzuO7AHuqO",
	"23ni+kCHj7v4vBbS5ymHIwv8yFN28kVv8MZL5M6UMZ5w3fJvzQB6J3M7Ze0xjUyLqsBxJ/lyoqFT68Z9",
	"fyU2dcntXXit4IqXmboCrUUBBzm5n1go+fUVL39suuFjEsgdjeYJUexrWW9Aczp47ixsAeNVc2BF7fDF",
	"TDMwCg7AnfLStwXPvbJmrTtSlee9MueVQXSYJvyi/e62pokbzfHi5/klhpVqJ2pkplSpx437ldQ2rE1s",
	"NlAIbqHcsUpDDvTcwMme7ZpOGAUi5msuVwimVvXKR8LROHhl1IaMO7qWgyGSYpndygxRk7pCfPRzeHEy",
	"jldSga55M59/ZDTlbg+kmPA5JN1s89mozuyQetXqzISc7rOZCddJR2KM8NNOPNEZg6hz0tMQX/G2uOPo",
	"Nve3Mfq3Q6egHE4cxea1H8fC85zCXu7uQGyigZiGSoPBSy42dBn6qpbxEzl/C5qdsbAZ+gKo6y8jx+/l",
	"qMapZCkkZBslYZd8FS4kfI8fk8cJL9qRzijyjPXtazEd+HtgdeeZQo23xS/udv+EJhyHN/epTuIVE1yV",
	"U1SDpGexLBO+Rf/+pX9+zbx5by8048aoXKDQdl6YOZ0T7470j2W62HvRRPXewdHpj9tzosVPK9FIDGXF",
	"OMtLgSZkJY3VdW7fSI5GqmipieinoI2Pmy2/Ck3SdtKEGdMP9UZyvNkb01UyYmMJCeHgG4BgvTT1agXG",
	"9pSdJcAb6VsJyWopLM61cdSeEblXoDEE6YRabviOLR1NWMV+Ba3YorZd8R+fdxkrytJ79Nw0TC3fSG5Z",
	"CdxY9r2QF1scLnj9w4mTYK+VvmywkL6cVyDBCJOlo7S+pa8YQOuXv/bBtPgcnz6TD8iN374B26ENq31i",
	"/n8++Y+nr8+y/+LZrw+yL/7H6dt3T95/en/w46P3f/nL/+3+9Pj9Xz79j39P7VSAPfX4yEN+/syrxufP",
	"UP9pnUAD2D+YA2AjZJYksjico0db7BN8aOsJ6NOudcyu4Y20W+kI6YqXonC85Sbk0L8gBmeRTkePajob",
	"0bOGhbUeqVXcgsuwBJPpscYbC0HDwMb0Mz/0SvqXe3helrWkrQzCM71iCQFmajlvnnJSlpenDN/5rXmI",
	"jvR/Pvrs80hXaL87XYG+prQEUWxTrzAL2KaURX9A8GDcM6ziOwM2zT0Q9mQsHQV3xMNuYLMAbdai+vCc",
	"wlixSHO48DbAG5228lxS0L47P+jj3HnXiVp+eLitBiigsutU9oeOnIWt2t0E6MWdVFpdgZwzcQInfaNP",
	"4dQ9H9VXAl9iFgJUHtUUZaY5B0RogSoirMcLmWRZSdEPijyeW7+fz/zlb+5cm/EDp+Dqz9k4NMPfVrF7",
	"3359wU49wzT36EEwDR094Uxowv6VUiciyXEzynlDQt4b+UY+g6WQwn1/+kYW3PLTBTciN6e1Af0lL7nM",
	"4WSl2NPw8OkZt/yNHEhao2mpoidnrKoXpcjZZaxPtORJqUaGI7x585qXK/XmzdtBcMZQ+vdTJfkLTZA5",
	"QVjVNvOJEjIN11ynnF+meSiPI1MmlH2zkpCtarKQhkQMfvw0z+NVZfoPZofLr6rSLT8iQ+Ofg7otY8Yq",
	"HWQRJ6AQNLi/Pyh/MWh+HcwitQHD/r7h1Wsh7VuWvakfPHgMrPOC9O/+ync0uatgsnFk9EFv3yaCCyet",
	"ELZW86ziq5SP7c2b1xZ4hbuP8vIGTRRlybBb5+VqiMzHodoFBHyMbwDBcfQrPFzcK+oVkmKll4CfcAux",
	"jRM3Ws//Tfcrest64+3qvYcd7FJt15k728lVGUfiYWeaXDkrJ2SFcAwjVqit+rRCC2D5GvJLn+8FNpXd",
	"zTvdQ8SPFzQD6xCGMgHRSzTMRYEeigWwuiq4F8W53PWTAhiwNsQVv4RL2F2oNpXFMVkAuo/SzdhBRUqN",
	"pEtHrPGx9WP0N9+HlaFiX1XhbTc+8gtk8bShi9Bn/CCTyHsHhzhFFJ1H02OI4DqBCCL+ERTcYKFuvFuR",
	"fmp5TstY0M2XyAoUeD/zTVrlyUeAxatBozl93wCmFVPXhi24k9uVz4hFD68jLlYbvoIRCTl2Ek183txx",
	"LOEgh+695E2nlv0LbXDfJEGmxplbc5JSwH1xpILKTC/uL8xEfkjvWMBElx5hixLFpCZAkpgO1x1nHWXu",
	"GwMtTcCgZStwBDC6GIklmzU3IVkX5jQLZ3mSDPAbJhLYlz7mPApZixKXNclhAs/tn9OBdumTyITMMSFd",
	"TKxaTkj9gn4qW6e3Q0kUgAooYUULp8aBUNqkBu0GOTh+XC5LIYFlqei3yAwaXTN+DnDy8X3GyIDOJo+Q",
	"IuMIbPSv48DsBxWfTbk6BkjpkzLwMDZ65qO/If1+jOLBncijKsfCxYhTKg8cgPuQyeb+6gXu4jBMyDlz",
	"bO6Kl47NeY2vHWSQxQTF1l7OEh/h8emYOLvHf0EXy1FroqvoJquJZaYAdFqg2wPxQm0zekCalHgX24Wj",
	"92SIPD5nTR1Myhdzz7CF2mLUEF4tFJJ9AJZxOAIYkYa/FQbpFfuN3eYEzL5p90tTKSo0SDLenNeQy5g4",
	"MWXqEQlmjFw+iVLA3AiAnrGjzafsld+DSmpXPBle5u2tNm9Tm4XXR6njP3aEkrs0gr+hFaZJ2vKiL7Ek",
	"7RTd4JduvppIhEwRvWMTQyfN0BVkoARUCrKOEJVdphyfTrcBvHFehW6R8QKz4nC5+zSKqNKwEsZCa0QP",
	"YQ4fwzzJMRmfUsvx1dlKL936XirVXFPkRsSOnWV+8BVgSPJSaGMz9EAkl+AafWNQqf7GNU3LSt2YLUpd",
	"K4o0b8BpL2GXFaKs0/Tq5/3umZv2h4YlmnqB/FZIijdZYKrlZCTnnqkp2Hfvgp/Tgp/zO1vvtNPgmrqJ",
	"tSOX7hz/Iueix3n3sYMEAaaIY7hroyjdwyCjF7hD7hjJTZGP/2Sf9XVwmIow9sGgm/AOeOyOopGSa4kM",
	"BntXIdBN5MQSYaNMxcOnsSNngFeVKLY9WyiNOqox86MMHiG/Ww8LuLt+sAMYiOyeqdc5Gkw3lV8r4FPO",
	"6U4mnZNJmLnoJtyLGUI8lTChYsIQUc3rvUO4ugBefge7n11bXM7s/Xx2O9NpCtd+xAO4ftFsbxLP6Jon",
	"U1rHE3IkynlVaXXFy8wbmMdIU6srT5rYPNijPzCrS5sxL74+e/7Cg/9+PstL4DprRIXRVWG76l9mVZQ1",
	"cOSAhIzsTucLMjuJktHmN6nOYqP09Rp8autIGh3k4GwdDtFR9EbqZTpC6KDJ2ftGaIl7fCRQNS6S1nxH",
	"HpKuV4RfcVEGu1mAdiSaBxc3LZFrkivEA9zauxI5ybI7ZTeD050+HS11HeBJ8Vx7km9vKL+8YUr2XegY",
	"sryrvNd9wzGDJllFhsxJ1hu0JGSmFHnaxioXxhGHJN+Za8yw8Ygw6kasxYgrVtYiGss1m5IjpwdkNEcS",
	"mSaZpqfF3UL52kG1FP+sgYkCpHWfNJ7K3kHFdCve2j68Tp3sMJzLD0wW+nb428gYcfbY/o2HQOwXMGJP",
	"3QDcZ43KHBbaWKTcD5FL4giHfzzj4Erc46z39OGpmYIX112PW1zqZ8j/HGFQzvfDdYaC8urT2I7Mkawb",
	"JEy21OpXSOt5qB4nHj6FfLkCo1x+hfidQlwto8NiGutOW/6onX10u8ekm9gK1Q1SGKF63PnILYeJO4OF",
	"mkvaairj0Yl1SxNMHFV6SuO3BONhHkTilvx6wVNZTZ2Q4WA6ax3AHVu6VSx0Drg3zWMJmp1FvuSmraBH",
	"7RXo9k3iMEHODQUGmnayqNBKBki1sUwwJ/9faVRimFpec0nVYFw/Okq+twEyfrle10pjSgqTNvsXkIsN",
	"L9OSQ5EPTbyFWAkqdFIbiCpp+IGoiBRRka9G0jwB8qg5X7IH86icj9+NQlwJIxYlYIuH1GLBDXLyxhDV",
	"dHHLA2nXBps/mtB8XctCQ2HXhhBrFGuEOlRvGufVAuw1gGQPsN3DL9gn6LYz4go+dVj09/Ps6cMv0OhK",
	"fzxIXQC+UM0+blIgO/mbZydpOka/JY3hGLcf9ST5ep8q1Y0zrj2nibpOOUvY0vO6w2dpwyVfQTpSZHMA",
	"JuqLu4mGtB5eZEFllozVaseETc8Pljv+NBJ97tgfgcFytdkIu/HOHaM2jp7aMhk0aRiOajb5DMcBrvAR",
	"faRVcBH1lMgPazSl+y21avRk/8A30EXrnHHKQ1KKNnoh5F1n5yHNEaZ8bjI9E27cXG7pKOZgMMOSVVpI",
	"i4pFbZfZn1m+5prnjv2djIGbLT5/kkhz3U23Ko8D/IPjXYMBfZVGvR4h+yBD+L7sE6lktnEcpfi0fe0R",
	"ncpRZ27abTfmO9w/9FShzI2SjZJb3SE3HnHqWxGe3DPgLUmxWc9R9Hj0yj44ZdY6TR68djv008vnXsrY",
	"KJ3KXdgedy9xaLBawBXG7qU3yY15y73Q5aRduA30H9fzEETOSCwLZzmlCHypEtppSL3eWNJ9rHrCOjB2",
	"TN0HRwYLP9ScddNcf3g+ejdRUGlPVzBsDx1b7kvAA/7RR8RHJhfcwNaXTysZIZQozX+SZIrme+Rj5+xL",
	"tZ1KOL1TGIjnd4CiJEpqURY/ty8/e1UUNJf5OukzW7iOv7T13prF0R2YTEO45lJCmRyO5M1fglyakJz/",
	"oabOsxFyYtt+YQdabm9xLeBdMANQYUKHXmFLN0GM1e6juiZou1ypguE8bc679rgOC4JEadv/WYOxqQdK",
	"+IECx9A26tgBZQ1nIAvUSE/Yt1TSeQ2sk9AINcGQ6KH7arquSsWLOSaguPj67DmjWakPVS2irOUrVIS6",
	"q+jZxKJ0ntNCkEMBovTziOnj7I/XxkQhNmuSjKceoLoWbRp00fMToIoUY+eEPYuKs/ocJUApJZdCb5xW",
	"14xG8hHShPuPtTxfo9rXYa3jJD893X6gShOVuGxKVTU5LvHcObh9xn1KuD9nyunm18JQJV+4gu6b1+YB",
	"uDc7hDew3eXpWkqilJMjbrkmo+WxaA/A0RUZXAlJyHqIP1Lop2oVx1YfeIW9kim3+qUMBrUt6QVlU4Io",
	"VGjPuVRS5JjwKnVF+5K/U/xsE3KD9Q254Yj7E5o4XMkCCk0onsfiaEmFwAg94oaG/uir21SiDvrTYm3Z",
	"NbdsBdZ4zgbFPNQB8bZGIQ34nKVYIDrik0p3fJfIIZPu8KxxmxxJRvj0ZkR5/MZ9+8GbFjAm/VJIVCI8",
	"2rzgR9ZArEhqneYhLFspMH493ffH5rXrc4JPcQvYvj0JFUxxDHL9uWWTn3s41Fnwensvs2v7lWvr8xs1",
	"P3einGnSs6ryk45XiUnKA3YrRxGc8F5mwX0UIbcZPx5tD7ntDVfB+9QRGlyhsxsqvIcHhNFUTOnlwnJC",
	"K1EUtmAUJpbMkiBkAoznQkJbXzdxQeTJKwE3Bs/rSD+fEGsyT7sAXqKHO8XQKMvWHQzVz+7kUDKPM3mN",
	"b2Nb7GWEcTQNWsGNy11T1tdRdyRMfIX1xD0ih6VbUKryQlSBrxZ6xVxSjMMx7lAuqnsBDI/BUCai7k3O",
	"tWNuorGHqIu6WIHNeFGkUsh+iV8Zfg2Z22ALed2kGq0qlmPelW4imiG1+YlyJU292TNXaHDL6aLqSAlq",
	"iCs0hR3Ghy6LHf6byrM5vjM+0OPoUMMQ1eELixwpN3dHGki9jqYzI1bZdEzgnXJ7dLRT34zQ2/53Suml",
	"WnUB+cDpJ/ZxuXiPUvzta3dxxNkZBslj6WppkidgYJ8KNS1RbWye/Xa5El5lg2yy6FBqaubtN0CMV7+b",
	"4+U3Et4bJd3gdL+Sh3IsyDcfjUnn1r+Os5ztZUGjL44oQojeFiEUaevsWFQQBQW5z4Pe0yTDgZxt03kL",
	"I4SGcLMhQN+FWFZWceHd7y2zGGLWR70P3yFMiYdtN7i/CB9LPmqx++5qLO47JGPD7/3qWJfgn8xXGq6E",
	"qoNjO0Q+BZWQfu3Ummoi75PrHxpecaqPaw4dNd5e+CoFtEyvk3/3M8XJMZBW734HptzBpg/qbg2lXTJP",
	"tU1Yk+B6UsLrzq04JQFhKieelw07lb8O1C0bMtYp4sCwDtl8JoqjLsz+VYLD0CipY5euKjaedqpNNYVH",
	"rFJGtHnmU+XGJoYYXmDFsCht1nCsEN9zBbnF4gJt3IIGOCaJlpssKmD6R/qpEXW6icT0Waf2pZoaVhQ4",
	"cMcPXoNFLxopG/vJ9MRKZ010GvJpTGa8AulriHbfeUyONl8uIbfi6sDru7+tQUYvu+bBLkPJqKPHeKKJ",
	"XsbkLcdbHVuA9j2O2wtPlETx1uCMvb25hN09wzrUkEwPPw9X7U3ydiAGkDtkjkSUSUV/kCHZO+SFaSgD",
	"sRCirag7tBnQRitLRW9JbzhXIEl3cbTvS/dMmS5tM2ku1/WoV9cYiDv2QG9YGWNc/3iGhUhMU/Ux5P2I",
	"tXR2PsyOeO3zhuBbycZ3EjKIgAm/hYfRNEspLiGufYWeqmuui9AiaXoJVp1sz300eFUXqjr0gV42M4s2",
	"Nnb4jiqRbwsjoPNSOTEiGwsj74ajNrEc9wwF3VD2dgy0dXAtQfsagSj/lspAZlWIpd0Hxz5UUGTRjZBg",
	"RnNcEnCjmWdetql1MNcvx0wz3AcUxQtkGjbcQaejBDjjc+5D9lf0PTwcCrleD1qYGno9XDMgREULM0Bi",
	"TPVL5m/Lww+SbmJsElJSHWqTyoYjQXe9IZVWRZ3TBR0fjMYgNznX1B5WkrTT5MNV9nSE6FXnJexOSQkK",
	"xRbCDsZAk+REoEdZFHqbfKfmN5OCe3Un4H1My9V8VilVZiPOjvNhCp8+xV+K/BIK5m6KED04UomHfYI2",
	"9sabfb3ehZQ1VQUSik9PGDuTFK8dHNvdHNK9yeU9u2/+Lc5a1JRVyxvVTt7IdOAr5rvSt+RmYZj9PMyA",
	"Y3W3nIoGOZAgZjuSPkjz60RdqpOpWvnQ1dyvFdQSFUGRkknaMjgH4mSaEJmozEwTJjOUDspSXWdIRVmT",
	"/yulc7h2XSYZMp623Ry2FxDF23DjL9AdW/OC5UpryOMe6ScOBNRGachKheE3Kc/g0jp5aINxzZKVasVU",
	"5dRcSqM3LLaTnuv/u1I+9G6YUJGR52kkMwMY/07Y440aH7W04yv1XKwTBiSknEA2R5fj8ZQ/obxGv05V",
	"A+aEE3fYeHaWqjbUXVe/ANdYOTyrNiJPo/tfK2xmNNjlQC2lxPoacvSlnsIzxxFcJX3Q+12+VOhvMdXx",
	"2ySBnngsIgDGXcEdGCY5hI8FY4mFMzOeQPJ5I4bPO3WNRe/shwR9ROM5JzXcMTEuylqDf3ZHFf56lXwq",
	"btfhWnbNh8qyU7zA4Js4qmfCDZl2gonJlxfsyzuqykq4go6H3L8FrPMcjBFXEJcmpM6sAKjQ4NpXA1Ku",
	"35jL9WRDv/Ysch5OwW5SWCTE0k6xA5JgUm7dyoyOiZl6lBxEV6KoeQd/5ha10cbKoiXYcIB1Iqc4mkmk",
	"F7ePRRwM1kCaT55LmY7ViJ+iNlYenK1orMFEhO3JNhW/luNa0ZAou+LMtPKGEWK/3kJ+gb07wQi3xwnD",
	"wZjpPTMfFR90s8M31a5HqWwfkQ2KPSblFwOhWG+cESbIor5vQgAlO6AwiQGEaXkDhjZCGzoXNdvwHSvE",
	"cgmaPB3GcllwXcTNhWQ5aMuFU/t25uYyv4NW1zA/KPY7To2DBmaVUgDQaEeAlDuvT42J5BMkWHRrJaRX",
	"uratGiv/ONiV9FsLvnWqBwadjRCBfyWOigcdViVR2GIbfglHzmPEr7B/Gszd4g2jVuGsU6Z4v5fWf0TU",
	"4YH/SQq7l9pJ7+lHAZKbhogx0KBctb5i2pwhDaYCNy+oilEcvNkvChD2mmxGNF/SnzPQsfMDx/5FfqHQ",
	"Eng+bhje8KpyE3snYx9WMpx4u7G0qsfNCYOmufvdSL5UgoUKYz00R+24ucTo5Q445XNJQ+IEKKhsJb1P",
	"x85h0uBTpr0yjJeOBVDWBv/0wY1gt/IXKtmd8llL0NlBz3W0QJoNL/e5m4EWNZCnmDuefkUFrgjxGLDY",
	"sa1Oi/T9LQkmRsP8MPkk79ARphXuRcKbWiJ14KkhyQFjLZr7ct6PAkpRVSh4mtcapdxrvhvb2RFbR1yE",
	"ff+yWoE+QJRYEpe7hETdmHmP1fH3SCkTQih/V1adI5fdZ9HJ+HOoMqsy2t8Nr0a5F5042+UaDb/wSll8",
	"qLHF749jHYnDHm9PvUn6b0IqCPtIVYjfibVzclI+qWQWPwxotLq3BwvUt1hIcvWbJeadtFvDGNbELkWF",
	"sPeHFcV5u9uEAJpCoTEMIRgj+nfB962RYlpJ7tDhAHhxtFlUlDs4/jw4H/ll/fcNUqKljFJCZ/mHAtj8",
	"AlurTrRFXlGyFoxnbcM7OopONF81QX9j9eP7sYGYpNtJ5mWZiCkk3Y1KPkeE4yQgfcXLDx8XiNnbzxAf",
	"ULwcjySIA8tiJBMqzc2etT7nk+aOgsjubmr5AuMY/wZuj5KymB/Km4sGEhdq3rwkr9cy1H+9AsmucUx6",
	"BPHwc7bwaX8qDbkwfTPUdSjN1sRRYaVS/5R4aw8Ebh1a58/K3oKMl8Gqy35oyzyhP2UlWwjbI/qRmcrI",
	"yU1SeYr6BmSRwF+KR8X5dw9cF5ed1xFUNq/37FdpuONXEtF7xyNfSQwzC09dHr0EcJdObWC4zsm3dQe3",
	"iYu6XdvUJz5D5O6rBTTlZU5amHPd8WkQIQTr4zEElf394d+ZhiUWwFbs/n2c4P79uW/690fdz+4437+f",
	"1Mk/2KMgwpEfw8+bopifx9JEUCqEkYwkvf2oRVkcIoxOfpm2hDxmUPnFZ7H6KEXsf6FA5eFR9YWEb/G6",
	"ghCTWGtn8miqKHPMhKQxvlsiRQwGAeW1FnaHybWDr0b8kny+9G0TCu+fUjT2c3/3WXUJTXr2NnC+NuF2",
	"/VbxEu8jMutLdwup8oR9veWbqgR/UP5yb/EnePznJ8WDxw//tPjzg88e5PDksy8ePOBfPOEPv3j8EB79",
	"+bMnD+Dh8vMvFo+KR08eLZ48evL5Z1/kj588XDz5/Is/3XN8yIFMgM5CKsfZ/87OypXKzl6cZxcO2BYn",
	"vBLfwY6KSjsyDuWqeY4nETZclLOn4af/GU7YSa427fDh15nPFDdbW1uZp6en19fXJ3GX0xVGymZW1fn6",
	"NMwzqGd99uK8CTEijxvuKCVZCfpdIIUz/Pby61cX7OzF+UlLMLOnswcnD04euvFVBZJXYvZ09hh/wtOz",
	"xn0/9cQ2e/ru/Xx2ugZe4sMS98cGrBZ5+KSBFzv/f3PNVyvQJ76Gt/vp6tFpECtO3/mI4ff7vp3G5fBO",
	"33UCq4sDPbFc1um7kAV6f+tOmmUfUB51mAjFvmanC0wuN7UpmKjx+FJQ2TCn71BcHv391GfDSn9EtYXO",
	"w2l4fZBu2cHSO7t1sPZ65Nzm67o6fYf/QfqMwKK356d2K0/RcnH6rrMa/3mwmu7vbfe4xdVGFRAAVssl",
	"ZbXf9/n0Hf0bTQTbCrRwgh++9/C/0ru8U8w1uRv+vJN58sfhOgYlZZN+tpeUCIuzUhibLmw1w/NKR/28",
	"QA5s+++jqD4d+WbxGD968OCoUvvToq37r7KGd9qQee1b2fv57MmRgO61/nTesieA+ZIXLER44twPP9zc",
	"5xIfWTmuzOjWQQiefDgIusUAv4Md+0FZ9g2qR+/ns88+5E6cSyes8ZJhyyjX9/CI/CQvpbqWoaUTV+rN",
	"huvd5ONj+cqgl1KLK+6Fxag+7Owthp5T1G/3qJ0VxYDoSWwDY79UeP+NYWxjVpXPXNMirZVahXRLGKq9",
	"A1RdrCHxwJGe4QSnglQFzGJ50uoa3t+SJ/Rcylzb84QVB82RWLF1GbLzR6AmX+v1ncc08lDjOETCbZEK",
	"9F2YoC78wVP+4Cmapn/84aZ/BfpK5MAuYFMpzbUod+wn2eQdvDGPOyuK5BPn7tE/yOPms22WqwJWIDPP",
	"wLKFKnahfktngksgBXUgyJy+6xZhJJFuVkAJNvl80/3OOFth/tDhIhY7dv5sIOFQtz7n/XKHTaPihk9f",
	"vyMNz6kvrQLWB3HAGeO6en3e9DbNNfeRvVvISllGWCj8ov5gRH8wolsJN5MPzxT5Jql9UFZfPriz5yFB",
	"byr9O7dDUKboKB/1+N7Jxg/1n5S+Q0/FoWDRBwrS7aP5DxbxB4u4HYv4FhKHEU+tZxoJojtOH5rKMPC1",
	"RNEvdY5OjtC8LrmOYrMPmTnOcERv3PgQXONDK3VJXJFOxyWDraA4hsQG3q2e9wfL+4Pl/euwvLPDjKYr",
	"mNxaM7qE3YZXjT5k1rUt1HXk50BYKAZpaAd2H2vT//v0mgubLZX2iYewFOCwswVenvos471f28Segy+Y",
	"rTT6MX5vlvz1tKm0mvzYd5GkvnoXwUij8GQlfG7dpbH7EVl743h8/daxZazj5bl+6017enqKyTzWytjT",
	"2fv5u56nLf74tiGBd81d4Unh/dv3/y8AAP//obf7+b7gAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
