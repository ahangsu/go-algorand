// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
