// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"75u7wpPCh3cf/l8AAAD//1cB2Ka24QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
