// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
