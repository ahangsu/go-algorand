// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
