// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
