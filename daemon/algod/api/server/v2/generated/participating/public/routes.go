// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
