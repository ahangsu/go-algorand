// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9fXPcNpIw/lXwm7sq27qhJL8kt1ZV6n6yneR0sR2XpWR3z/KTxZA9M1iRABcARzPx",
	"4+/+FBoACZLgDEdS7GTXf9ka4qXRaDT6Dd0fJqkoSsGBazU5+TApqaQFaJD4F01TUXGdsMz8lYFKJSs1",
	"E3xy4r8RpSXji8l0wsyvJdXLyXTCaQFNG9N/OpHwj4pJyCYnWlYwnah0CQU1A+tNaVrXI62ThUjcEKd2",
	"iLMXk49bPtAsk6BUH8ofeb4hjKd5lQHRknJFU/NJkWuml0QvmSKuM2GcCA5EzIlethqTOYM8U4d+kf+o",
	"QG6CVbrJh5f0sQExkSKHPpzPRTFjHDxUUANVbwjRgmQwx0ZLqomZwcDqG2pBFFCZLslcyB2gWiBCeIFX",
	"xeTk3UQBz0DibqXAVvjfuQT4FRJN5QL05P00tri5BploVkSWduawL0FVuVYE2+IaF2wFnJheh+RVpTSZ",
	"AaGcvP3uOXn8+PFTs5CCag2ZI7LBVTWzh2uy3Scnk4xq8J/7tEbzhZCUZ0nd/u13z3H+c7fAsa2oUhA/",
	"LKfmCzl7MbQA3zFCQoxrWOA+tKjf9IgciubnGcyFhJF7Yhvf6aaE83/WXUmpTpelYFxH9oXgV2I/R3lY",
	"0H0bD6sBaLUvDaakGfTdcfL0/YeH04fHH//t3Wnyv+7Prx5/HLn85/W4OzAQbZhWUgJPN8lCAsXTsqS8",
	"j4+3jh7UUlR5RpZ0hZtPC2T1ri8xfS3rXNG8MnTCUilO84VQhDoyymBOq1wTPzGpeG7YlBnNUTthipRS",
	"rFgG2dRw3+slS5ckpcoOge3INctzQ4OVgmyI1uKr23KYPoYoMXDdCB+4oN8vMpp17cAErJEbJGkuFCRa",
	"7Lie/I1DeUbCC6W5q9R+lxW5WALByc0He9ki7rih6TzfEI37mhGqCCX+apoSNicbUZFr3JycXWF/txqD",
	"tYIYpOHmtO5Rc3iH0NdDRgR5MyFyoByR589dH2V8zhaVBEWul6CX7s6ToErBFRAx+zuk2mz7/5z/+JoI",
	"SV6BUnQBb2h6RYCnIoPskJzNCRc6IA1HS4hD03NoHQ6u2CX/dyUMTRRqUdL0Kn6j56xgkVW9omtWVAXh",
	"VTEDabbUXyFaEAm6knwIIDviDlIs6Lo/6YWseIr730zbkuUMtTFV5nSDCCvo+pvjqQNHEZrnpASeMb4g",
	"es0H5Tgz927wEikqno0Qc7TZ0+BiVSWkbM4gI/UoWyBx0+yCh/H94GmErwAcP8ggOPUsO8DhsI7QjDnd",
	"5gsp6QICkjkkPznmhl+1uAJeEzqZbfBTKWHFRKXqTgMw4tTbJXAuNCSlhDmL0Ni5Q4dhMLaN48CFk4FS",
	"wTVlHDLDnBFoocEyq0GYggm36zv9W3xGFXz9ZOiOb76O3P256O761h0ftdvYKLFHMnJ1mq/uwMYlq1b/",
	"EfphOLdii8T+3NtItrgwt82c5XgT/d3sn0dDpZAJtBDh7ybFFpzqSsLJJT8wf5GEnGvKMyoz80thf3pV",
	"5Zqds4X5Kbc/vRQLlp6zxQAya1ijChd2K+w/Zrw4O9brqF7xUoirqgwXlLYU19mGnL0Y2mQ75r6EeVpr",
	"u6HicbH2ysi+PfS63sgBIAdxV1LT8Ao2Egy0NJ3jP+s50hOdy1/NP2WZm966nMdQa+jYXcloPnBmhdOy",
	"zFlKDRLfus/mq2ECYBUJ2rQ4wgv15EMAYilFCVIzOygtyyQXKc0TpanGkf5dwnxyMvm3o8b+cmS7q6Ng",
	"8pem1zl2MiKrFYMSWpZ7jPHGiD5qC7MwDBo/IZuwbA+FJsbtJhpSYoYF57CiXB82KkuLH9QH+J2bqcG3",
	"lXYsvjsq2CDCiW04A2UlYNvwniIB6gmilSBaUSBd5GJW/3D/tCwbDOL307K0+EDpERgKZrBmSqsHuHza",
	"nKRwnrMXh+T7cGwUxQXPN+ZysKKGuRvm7tZyt1htW3JraEa8pwhup5CHZms8GoyYfxcUh2rFUuRG6tlJ",
	"K6bxf7u2IZmZ30d1/mOQWIjbYeJCRcthzuo4+Eug3NzvUE6fcJy555CcdvvejGzMKHGCuRGtbN1PO+4W",
	"PNYovJa0tAC6L/YuZRyVNNvIwnpLbjqS0UVhDs5wQGsI1Y3P2s7zEIUESaEDw7NcpFf/TdXyDs78zI/V",
	"P344DVkCzUCSJVXLw0lMygiPVzPamCNmGqKCT2bBVIf1Eu9qeTuWllFNg6U5eONiiUU99kOmBzKiu/yI",
	"/6E5MZ/N2Tas3w57SC6QgSl7nJ2TITPavlUQ7EymAVohBCmsgk+M1r0XlM+byeP7NGqPvrU2BbdDbhG4",
	"Q2J958fgmVjHYHgm1r0jINag7oI+zDgoRmoo1Aj4XjjIBO6/Qx+Vkm76SMaxxyDZLNCIrgpPAw9vfDNL",
	"Y5w9nQl5M+7TYSucNCZnQs2oAfOddpCETasycaQYMVvZBp2BGi/fdqbRHT6GsRYWzjX9DbCgzKh3gYX2",
	"QHeNBVGULIc7IP1llOnPqILHj8j5f59+9fDRL4+++tqQZCnFQtKCzDYaFLnvdDOi9CaHB/2VoXZU5To+",
	"+tdPvKGyPW5sHCUqmUJBy/5Q1gBqRSDbjJh2fay10YyrrgEcczgvwHByi3ZibfsGtBdMGQmrmN3JZgwh",
	"LGtmyYiDJIOdxLTv8pppNuES5UZWd6HKgpRCRuxreMS0SEWerEAqJiLelDeuBXEtvHhbdn+30JJrqoiZ",
	"G02/FUeBIkJZes3H83079MWaN7jZyvnteiOrc/OO2Zc28r0lUZESZKLXnGQwqxYtTWguRUEoybAj3tHf",
	"g0ZR4IIVcK5pUf44n9+NqihwoIjKxgpQZiZiWxi5XkEquI2E2KGduVHHoKeLGG+i08MAOIycb3iKdsa7",
	"OLbDimvBODo91IangRZrYMwhW7TI8vba6hA67FT3VAQcg46X+BkNHS8g1/Q7IS8aS+D3UlTlnQt53TnH",
	"Loe6xThTSmb6eh2a8UXejr5ZGNgPY2v8LAt67o+vWwNCjxT5ki2WOlAr3kgh5ncPY2yWGKD4wSpluenT",
	"V81ei8wwE12pOxDBmsEaDmfoNuRrdCYqTSjhIgPc/ErFhbOBeA10FKN/W4fynl5aPWsGhrpSWpnVViVB",
	"723vvmg6JjS1JzRB1KgB31XtdLSt7HQ2FiCXQLMNmQFwImbOQeRcV7hIiq5n7cUbJxpG+EULrlKKFJSC",
	"LHGGqZ2g+Xb26tBb8ISAI8D1LEQJMqfy1sBerXbCeQWbBAMlFLn/w8/qwWeAVwtN8x2IxTYx9NZqvvMC",
	"9qEeN/02gutOHpIdlUD8vUK0QGk2Bw1DKNwLJ4P714Wot4u3R8sKJPrjflOK95PcjoBqUH9jer8ttFU5",
	"EP7n1Fsj4ZkN45QLL1jFBsup0skutmwatXRws4KAE8Y4MQ48IHi9pEpbHzLjGZq+7HWC81ghzEwxDPCg",
	"GmJG/tlrIP2xU3MPclWpWh1RVVkKqSGLrYHDestcr2FdzyXmwdi1zqMFqRTsGnkIS8H4Dll2JRZBVNeu",
	"Fhdk0V8cOiTMPb+JorIFRIOIbYCc+1YBdsMQqAFAmGoQbQmHqQ7l1HFX04nSoiwNt9BJxet+Q2g6t61P",
	"9U9N2z5xUd3c25kAhZFXrr2D/Npi1ga/LakiDg5S0Csje6AZxDq7+zCbw5goxlNItlE+qnimVXgEdh7S",
	"qlxImkGSQU43/UF/sp+J/bxtANzxRt0VGhIbxRTf9IaSfdDIlqEFjqdiwiPBLyQ1R9CoAg2BuN47Rs4A",
	"x44xJ0dH9+qhcK7oFvnxcNl2qyMj4m24EtrsuKMHBNlx9DEAD+ChHvrmqMDOSaN7dqf4Kyg3QS1H7D/J",
	"BtTQEprx91rAgA3VBYgH56XD3jscOMo2B9nYDj4ydGQHDLpvqNQsZSXqOj/A5s5Vv+4EUTcjyUBTlkNG",
	"gg9WDSzD/sTG33THvJkqOMr21ge/Z3yLLCdnCkWeNvBXsEGd+40N7AxMHXehy0ZGNfcT5QQB9eFiRgQP",
	"m8CapjrfGEFNL2FDrkECUdWsYFrbgO22qqtFmYQDRP0aW2Z0TjwbFOl3YIxX8RyHCpbX34rpxOoE2+G7",
	"6CgGLXQ4XaAUIh9hIeshIwrBqHgPUgqz68zFjvvoYU9JLSAd00YPbn3931MtNOMKyF9FRVLKUeWqNNQy",
	"jZAoKKAAaWYwIlg9p4vsaDAEORRgNUn8cnDQXfjBgdtzpsgcrv2DC9Owi46DA7TjvBFKtw7XHdhDzXE7",
	"i1wf6PAxF5/TQro8ZXdkgRt5zE6+6Qxee4nMmVLKEa5Z/q0ZQOdkrsesPaSRcVEVOO4oX04wdGzduO/n",
	"rKhyqu/CawUrmidiBVKyDHZycjcxE/zbFc1/rLvhYxJIDY2mEVHsW14VIKk9eOYsrAHjVVMgWWXwRVQ9",
	"MAoOQI3y0rUFT52yprU5UqXjvTylpUJ0qDr8ovlutqaOG03x4qfpFYaVSiNqJCoXsceN25XUJqyNFQVk",
	"jGrIN6SUkIJ9bmBkz2ZNh8QGIqZLyhcIphTVwkXC2XHwyqiUNe7IiveGiIples0TRE3sCnHRz/7FyTBe",
	"rQp0Tev53COjMXe7J8WIzyHqZptOBnVmg9RVozNb5LSfzYy4TloSY4CfZuKRzhhEnZGe+vgKt8UcR7O5",
	"v43Rvxk6BmV/4iA2r/k4FJ5nFPZ8cwdikx2ISCglKLzkQkOXsl/FPHwi525BtVEair4vwHb9ZeD4vR3U",
	"OAXPGYekEBw20VfhjMMr/Bg9TnjRDnRGkWeob1eLacHfAas9zxhqvC1+cbe7JzTiOLy5T3UUrxjhqhyj",
	"GkQ9i3ke8S269y/d86um9Xt7JglVSqQMhbazTE3tOXHuSPdYpo29N3VU7x0cne64HSda+LQSjcSQl4SS",
	"NGdoQhZcaVml+pJTNFIFS41EP3ltfNhs+dw3idtJI2ZMN9Qlp3iz16araMTGHCLCwXcA3nqpqsUClO4o",
	"O3OAS+5aMU4qzjTOVRhqTyy5lyAxBOnQtizohswNTWhBfgUpyKzSbfEfn3cpzfLcefTMNETMLznVJAeq",
	"NHnF+MUah/Nef3/iOOhrIa9qLMQv5wVwUEwl8Sit7+1XDKB1y1+6YFp8jm8/Wx+QGb95A7ZBG1bzxPz/",
	"3P+vk3enyf/S5Nfj5Ol/HL3/8OTjg4Pej48+fvPN/23/9PjjNw/+699jO+Vhjz0+cpCfvXCq8dkL1H8a",
	"J1AP9k/mACgYT6JEFoZzdGiL3MeHto6AHrStY3oJl1yvuSGkFc1ZZnjLTcihe0H0zqI9HR2qaW1Exxrm",
	"17qnVnELLkMiTKbDGm8sBPUDG+PP/NAr6V7u4XmZV9xupRee7SsWH2Am5tP6KafN8nJC8J3fkvroSPfn",
	"o6++DnSF5rvRFezXmJbAsnXsFWYG65iy6A4IHox7ipR0o0DHuQfCHo2ls8Ed4bAFFDOQasnKT88plGaz",
	"OIfzbwOc0WnNz7gN2jfnB32cG+c6EfNPD7eWABmUehnL/tCSs7BVs5sAnbiTUooV8Clhh3DYNfpkRt1z",
	"UX050DlmIUDlUYxRZupzYAnNU0WA9XAhoywrMfpBkcdx64/Tibv81Z1rM27gGFzdOWuHpv9bC3Lv+28v",
	"yJFjmOqefRBshw6ecEY0YfdKqRWRZLiZzXljhbxLfslfwJxxZr6fXPKMano0o4ql6qhSIJ/RnPIUDheC",
	"nPiHTy+oppe8J2kNpqUKnpyRsprlLCVXoT7RkKdNNdIf4fLyHc0X4vLyfS84oy/9u6mi/MVOkBhBWFQ6",
	"cYkSEgnXVMacX6p+KI8j20wo22a1QraorIXUJ2Jw48d5Hi1L1X0w219+WeZm+QEZKvcc1GwZUVpIL4sY",
	"AcVCg/v7WriLQdJrbxapFCjyt4KW7xjX70lyWR0fPwbSekH6N3flG5rclDDaODL4oLdrE8GFW60Q1lrS",
	"pKSLmI/t8vKdBlri7qO8XKCJIs8Jdmu9XPWR+ThUswCPj+ENsHDs/QoPF3due/mkWPEl4CfcQmxjxI3G",
	"83/T/Qrest54uzrvYXu7VOllYs52dFXKkLjfmTpXzsIIWT4cQ7EFaqsurdAMSLqE9Mrle4Gi1Jtpq7uP",
	"+HGCpmcdTNlMQPYlGuaiQA/FDEhVZtSJ4pRvukkBFGjt44rfwhVsLkSTymKfLADtR+lq6KAipQbSpSHW",
	"8Ni6Mbqb78LKULEvS/+2Gx/5ebI4qenC9xk+yFbkvYNDHCOK1qPpIURQGUGEJf4BFNxgoWa8W5F+bHlG",
	"y5jZmy+SFcjzfuKaNMqTiwALV4NGc/u9AEwrJq4VmVEjtwuXEcs+vA64WKXoAgYk5NBJNPJ5c8uxhIPs",
	"uveiN52Ydy+03n0TBdk2Tsyao5QC5oshFVRmOnF/fibrh3SOBUx06RA2y1FMqgMkLdOhsuWss5n7hkCL",
	"EzBI3ggcHow2RkLJZkmVT9aFOc38WR4lA/yGiQS2pY85C0LWgsRldXIYz3O757SnXbokMj5zjE8XE6qW",
	"I1K/oJ9KV/HtEBwFoAxyWNiF28aeUJqkBs0GGTh+nM9zxoEksei3wAwaXDNuDjDy8QEh1oBORo8QI+MA",
	"bPSv48DktQjPJl/sAyR3SRmoHxs988HfEH8/ZuPBjcgjSsPC2YBTKvUcgLqQyfr+6gTu4jCE8SkxbG5F",
	"c8PmnMbXDNLLYoJiaydniYvweDAkzm7xX9iLZa812avoJqsJZSYPdFyg2wLxTKwT+4A0KvHO1jND79EQ",
	"eXzOGjuYNl/MPUVmYo1RQ3i12JDsHbAMw+HBCDT8NVNIr9hv6Da3wGybdrs0FaNChSTjzHk1uQyJE2Om",
	"HpBghsjlfpAC5kYAdIwdTT5lp/zuVFLb4kn/Mm9utWmT2sy/Pood/6EjFN2lAfz1rTB10pY3XYklaqdo",
	"B7+089UEImSM6A2b6Dtp+q4gBTmgUpC0hKjkKub4NLoN4I1z7rsFxgvMikP55kEQUSVhwZSGxojuwxw+",
	"h3mSYjI+IebDq9OlnJv1vRWivqasGxE7tpb5yVeAIclzJpVO0AMRXYJp9J1Cpfo70zQuK7VjtmzqWpbF",
	"eQNOewWbJGN5FadXN+8PL8y0r2uWqKoZ8lvGbbzJDFMtRyM5t0xtg323LvilXfBLemfrHXcaTFMzsTTk",
	"0p7jD3IuOpx3GzuIEGCMOPq7NojSLQwyeIHb546B3BT4+A+3WV97hynzY+8MuvHvgIfuKDtSdC2BwWDr",
	"Khi6iYxYwnSQqbj/NHbgDNCyZNm6Ywu1ow5qzHQvg4fP79bBAu6uG2wHBgK7Z+x1jgTVTuXXCPg253Qr",
	"k87hKMxctBPuhQwhnIopXzGhj6j69d4uXF0AzX+Azc+mLS5n8nE6uZ3pNIZrN+IOXL+ptzeKZ3TNW1Na",
	"yxOyJ8ppWUqxonniDMxDpCnFypEmNvf26E/M6uJmzItvT1++ceB/nE7SHKhMalFhcFXYrvzDrMpmDRw4",
	"ID4ju9H5vMxuRclg8+tUZ6FR+noJLrV1II32cnA2DofgKDoj9TweIbTT5Ox8I3aJW3wkUNYuksZ8Zz0k",
	"ba8IXVGWe7uZh3YgmgcXNy6Ra5QrhAPc2rsSOMmSO2U3vdMdPx0Nde3gSeFcW5JvFza/vCKCd13oGLK8",
	"KZ3XvaCYQdNaRfrMiVcFWhISlbM0bmPlM2WIg1vfmWlMsPGAMGpGrNiAK5ZXLBjLNBuTI6cDZDBHFJkq",
	"mqanwd1MuNpBFWf/qICwDLg2nySeys5BxXQrztrev06N7NCfyw1sLfTN8LeRMcLssd0bD4HYLmCEnroe",
	"uC9qldkvtLZImR8Cl8QeDv9wxt6VuMVZ7+jDUbMNXly2PW5hqZ8+/zOEYXO+764z5JVXl8Z2YI5o3SCm",
	"krkUv0Jcz0P1OPLwyefLZRjl8iuE7xTCahktFlNbd5ryR83sg9s9JN2EVqh2kMIA1ePOB245TNzpLdSU",
	"2622ZTxasW5xggmjSo/s+A3BOJh7kbg5vZ7RWFZTI2QYmE4bB3DLlq4F8Z097lX9WMLOTgJfct2W2Uft",
	"JcjmTWI/Qc4NBQY77WhRoZEMkGpDmWBq/X+5EpFhKn5Nua0GY/rZo+R6K7DGL9PrWkhMSaHiZv8MUlbQ",
	"PC45ZGnfxJuxBbOFTioFQSUNN5AtImWpyFUjqZ8AOdSczcnxNCjn43YjYyum2CwHbPHQtphRhZy8NkTV",
	"XczygOulwuaPRjRfVjyTkOmlsohVgtRCHao3tfNqBvoagJNjbPfwKbmPbjvFVvDAYNHdz5OTh0/R6Gr/",
	"OI5dAK5QzTZukiE7+bNjJ3E6Rr+lHcMwbjfqYfT1vq1UN8y4tpwm23XMWcKWjtftPksF5XQB8UiRYgdM",
	"ti/uJhrSOnjhmS2zpLQUG8J0fH7Q1PCngehzw/4sGCQVRcF04Zw7ShSGnpoyGXZSP5yt2eQyHHu4/Ef0",
	"kZbeRdRRIj+t0dTeb7FVoyf7NS2gjdYpoTYPSc6a6AWfd52c+TRHmPK5zvRscWPmMktHMQeDGeaklIxr",
	"VCwqPU/+RNIllTQ17O9wCNxk9vWTSJrrdrpVvh/gnxzvEhTIVRz1coDsvQzh+pL7XPCkMBwle9C89ghO",
	"5aAzN+62G/Idbh96rFBmRkkGya1qkRsNOPWtCI9vGfCWpFivZy963Htln5wyKxknD1qZHfrp7UsnZRRC",
	"xnIXNsfdSRwStGSwwti9+CaZMW+5FzIftQu3gf7zeh68yBmIZf4sxxSBZyKinfrU67Ul3cWqR6wDQ8fU",
	"fDBkMHNDTUk7zfWn56N3EwUV93R5w3bfsWW+eDzgH11EfGZywQ1sfPl2JQOEEqT5j5JMVn8PfOyUPBPr",
	"sYTTOYWeeH4HKIqipGJ59nPz8rNTRUFSni6jPrOZ6fhLU++tXpy9A6NpCJeUc8ijw1l58xcvl0Yk57+L",
	"sfMUjI9s2y3sYJfbWVwDeBtMD5Sf0KCX6dxMEGK1/aiuDtrOFyIjOE+T8645rv2CIEHa9n9UoHTsgRJ+",
	"sIFjaBs17MBmDSfAM9RID8n3tqTzEkgroRFqgj7RQ/vVdFXmgmZTTEBx8e3pS2JntX1s1SKbtXyBilB7",
	"FR2bWJDOc1wIsi9AFH8eMX6c7fHamChEJ3WS8dgDVNOiSYPOOn4CVJFC7BySF0FxVpejBGxKyTmThdHq",
	"6tGsfIQ0Yf6jNU2XqPa1WOswyY9Pt++pUgUlLutSVXWOSzx3Bm6Xcd8m3J8SYXTza6ZsJV9YQfvNa/0A",
	"3Jkd/BvY9vJkxbmllMM9brk6o+W+aPfA2SvSuxKikHUQv6fQb6tV7Ft94Bx7RVNudUsZ9Gpb2heUdQki",
	"X6E9pVxwlmLCq9gV7Ur+jvGzjcgN1jXk+iPuTmjkcEULKNSheA6LgyUVPCN0iOsb+oOvZlMtddg/NdaW",
	"XVJNFqCV42yQTX0dEGdrZFyBy1mKBaIDPilky3eJHDLqDk9qt8meZIRPbwaUx+/Mt9fOtIAx6VeMoxLh",
	"0OYEP2sNxIqk2mgeTJOFAOXW035/rN6ZPof4FDeD9ftDX8EUx7CuP7Ns6+fuD3Xqvd7Oy2zaPjdtXX6j",
	"+udWlLOd9LQs3aTDVWKi8oBe80EER7yXiXcfBcitxw9H20JuW8NV8D41hAYrdHZDifdwjzDqiimdXFhG",
	"aLUUhS2IDROLZklgPALGS8ahqa8buSDS6JWAG4PndaCfS4g1mqddAM3Rwx1jaDbL1h0M1c3uZFAyDTN5",
	"DW9jU+xlgHHUDRrBjfJNXdbXUHcgTDzHeuIOkf3SLShVOSEqw1cLnWIuMcZhGLcvF9W+APrHoC8T2e51",
	"zrV9bqKhh6izKluATmiWxVLIPsOvBL/6zG2whrSqU42WJUkx70o7EU2f2txEqeCqKrbM5RvccrqgOlKE",
	"GsIKTX6H8aHLbIP/xvJsDu+MC/TYO9TQR3W4wiJ7ys3tkXpSr6HpRLFFMh4TeKfcHh3N1Dcj9Kb/nVJ6",
	"LhZtQD5x+oltXC7coxh/+9ZcHGF2hl7yWHu11MkTMLBP+JqWqDbWz37bXAmvsl42WXQo1TXzthsghqvf",
	"TfHyGwjvDZJuUHu/Wg/lUJBvOhiTTrV7Hacp2cqCBl8c2Qgh+7YIoYhbZ4eigmxQkPnc6z1OMuzJ2Tqe",
	"tzBAqA836wP0g49lJSVlzv3eMIs+Zl3Ue/8dwph42GaDu4twseSDFrsfVkNx3z4ZG37vVse6AvdkvpSw",
	"YqLyjm0f+eRVQvtrq9ZUHXkfXX/f8IpTfV5z6KDx9sJVKbDLdDr5Dz/bODkCXMvN78CU29v0Xt2tvrRr",
	"zVNNE1InuB6V8Lp1K45JQBjLiedkw1blrx11y/qMdYw40K9DNp2wbK8Ls3uV4DB2lNixi1cVG0471aSa",
	"wiNWCsWaPPOxcmMjQwwvsGJYkDarP5aP71lBqrG4QBO3IAH2SaJlJgsKmH5JPzWgTteRmC7r1LZUU/2K",
	"Ajvu+N5rsOBFo83Gfjg+sdJpHZ2GfBqTGS+Auxqi7Xceo6PN53NINVvteH335yXw4GXX1NtlbDLq4DEe",
	"q6OXMXnL/lbHBqBtj+O2whMkUbw1OENvb65gc0+RFjVE08NP/VV7k7wdiAHkDokhEaFi0R/WkOwc8kzV",
	"lIFY8NFWtjs0GdAGK0sFb0lvOJcnSXNxNO9Lt0wZL20zai7Tda9X1xiIO/RAr18ZY1j/eIGFSFRd9dHn",
	"/Qi1dHLWz4547fKG4FvJ2nfiM4iA8r/5h9F2lpxdQVj7Cj1V11RmvkXU9OKtOsmW+6j3qs5XdegCPa9n",
	"Zk1sbP8dVSTfFkZAp7kwYkQyFEbeDketYznuKRt0Y7O3Y6CtgWsO0tUIRPk3FwoSLXws7TY4tqHCRhbd",
	"CAlqMMelBW4w88zbJrUO5vqlmGmGuoCicIFEQkENdDJIgDM85zZkP7ff/cMhn+t1p4WpptfdNQN8VDRT",
	"PSSGVD8n7rbc/SDpJsYmxrmtQ61i2XA4yLY3pJQiq1J7QYcHozbIjc41tYWVRO00aX+VHR0heNV5BZsj",
	"qwT5Ygt+B0OgreRkQQ+yKHQ2+U7NbyoG9+JOwPuclqvppBQiTwacHWf9FD5dir9i6RVkxNwUPnpwoBIP",
	"uY829tqbfb3c+JQ1ZQkcsgeHhJxyG6/tHdvtHNKdyfk9vW3+Nc6aVTarljOqHV7yeOAr5ruSt+Rmfpjt",
	"PEyBYXW3nMoOsiNBzHogfZCk15G6VIdjtfK+q7lbK6ghKgtFTCZpyuDsiJOpQ2SCMjN1mExfOshzcZ0g",
	"FSV1/q+YzmHatZmkz3jadDPYnkEQb0OVu0A3ZEkzkgopIQ17xJ84WKAKISHJBYbfxDyDc23koQLjmjnJ",
	"xYKI0qi5No1ev9hOfK5/ulI+9t2wRUViPU8DmRlAuXfCDm+28V5L279Sz8UyYkBCyvFks3c5Hkf5I8pr",
	"dOtU1WCOOHG7jWensWpD7XV1C3ANlcPTomBpHN1/rLCZwWCXHbWUIuurydGVevLPHAdwFfVBb3f52kJ/",
	"s7GO3zoJ9MhjEQAw7ApuwTDKIbwvGHMsnJnQCJLPajF82qprzDpn3yfoszSeUquGGyZGWV5JcM/ubIW/",
	"TiWfkuqlv5ZN876ybBQvUPgmztYzocqadryJyZUX7Mo7okxyWEHLQ+7eAlZpCkqxFYSlCW1nkgGUaHDt",
	"qgEx12/I5TqyoVt7EjgPx2A3KixaxNqdIjskwajcuuaJPSZq7FEyEK1YVtEW/tQtaqMNlUWLsGEP60hO",
	"sTeTiC9uG4vYGayBNB89lzweqxE+Ra2tPDhbVluDLRE2J1uV9JoPa0V9omyLM+PKGwaI/XYN6QX2bgUj",
	"3B4nBAcjqvPMfFB8kPUO31S7HqSybUTWK/YYlV8U+GK9YUYYL4u6vhEB1NoBmYoMwFTDGzC0EZrQuaBZ",
	"QTckY/M5SOvpUJryjMosbM44SUFqyozat1E3l/kNtLKC6U6x33BqHNQzq5gCgEY7C0i+cfrUkEg+QoJF",
	"t1ZEerXXthZD5R97uxJ/a0HXRvXAoLMBInCvxFHxsIdVcBS2SEGvYM95FPsVtk+DuVucYVQLnHXMFB+3",
	"0vqPiDo88D9xprdSu9V7ulGA1k1jidHTIF80vmK7OX0ajAVuXtgqRmHwZrcogN9razOy80X9OT0dO91x",
	"7N+kFwItgWfDhuGClqWZ2DkZu7Baw4mzG3MtOtzcYlDVd78ZyZVK0FBirIekqB3Xl5h9uQNG+ZzbIXEC",
	"FFTW3L5Px85+Uu9TtnulCM0NC7BZG9zTBzOCXvNfbMnumM+ag0x2eq6DBdrZ8HKfmhnsonryFDHH060o",
	"wxUhHj0WW7bVcZG+vyXBhGiY7iaf6B06wLT8vWjxJuZIHXhqrOSAsRb1fTntRgHFqMoXPE0riVLuNd0M",
	"7eyArSMswr59WY1A7yGKLInyTUSirs28++r4W6SUESGUvyurzp7L7rLoaPw5lIkWid3fgpaD3MueON3m",
	"GjW/cEpZeKixxe+PY+2Jww5vj71J+hchFYR9oCrE78TaOTopHz7aS0J17v3OyvTN8qPs/GYZeUdtUz94",
	"NbI9QQXs7fFEYcLuJhOAtDHQGH/grRDdS+BVY50YV4vbd9gBXhhmFlTj9h4/B85nflL/qkZKsJRBSmgt",
	"f1fkmltgY84JtshpSFqDcjytfzkHYYnqeR3tN1Q4vhsUiNm5jUie55FgQqu02VrPAeEY0UeuaP7pAwIx",
	"bfsp4gOyt8MhBGFEWYhki0p1s/esL+mouYPosbubmr/BAMY/g9mjqBDmhnJ2op6ohSo3za27a+4Lv66A",
	"k2sc075+ePg1mbl8P6WElKmu/ena12SrA6iwRKl7Q7zWOyK2dq3zZ6FvQcZzb84lr5v6TuhIWfAGwuaI",
	"fmamMnByo1Qeo74eWUTwF+NRYeLdHdfFVetZhK2X13nvKyTc8fOI4KHjns8j+imFxy7PPgEwl06loL/O",
	"0bd1C7eRi7pZ29i3PX3kbisCNOZJTlyKM93xTZBFCBbGIwgq+dvDvxEJc6x8LcjBAU5wcDB1Tf/2qP3Z",
	"HOeDg6gy/sleA1kcuTHcvDGK+XkoP4TNgTCQiqSzHxXLs12E0Uos09SOx9Qpv7j0VZ+lev0vNkK5f1Rd",
	"BeFbPKuwiImstTV5MFWQMmZEthjXLZIbBqN/0koyvcGs2t5Jw36Jvlv6vo6Bd28oasO5u/u0uII6L3sT",
	"MV8pf7t+L2iO95G153NzC4n8kHy7pkWZgzso39yb/Sc8/tOT7Pjxw/+c/en4q+MUnnz19PiYPn1CHz59",
	"/BAe/emrJ8fwcP7109mj7NGTR7Mnj558/dXT9PGTh7MnXz/9z3uGDxmQLaATn8Nx8pfkNF+I5PTNWXJh",
	"gG1wQkv2A2xsNWlDxr5ONU3xJEJBWT458T/9//6EHaaiaIb3v05cirjJUutSnRwdXV9fH4ZdjhYYIpto",
	"UaXLIz9Pr5D16ZuzOrbIutpwR212Fa/YeVI4xW9vvz2/IKdvzg4bgpmcTI4Pjw8fmvFFCZyWbHIyeYw/",
	"4elZ4r4fOWKbnHz4OJ0cLYHm+KLE/FGAliz1nyTQbOP+r67pYgHy0BXvNj+tHh15seLogwsV/rjt21FY",
	"B+/oQyuiOtvRE+tkHX3w6Z+3t27lV3aR5GbpUQ/I96Dd4yGlwyKdLYPbbOODoadECekiLEvJhDlVU3NF",
	"ZpBKoHgGhMR0OFpWPLX+GzsFcPzvq9O/oA/r1elfyDfkeOqyJClUO2LT2/jBmhzOMgt2322nnm1O69j8",
	"oDjMybuYnTJWVByPk6GVgNrrERtuhg6toGhJw5sNvz1Onr7/8NWfPsZkvp4EWyMpCFcPUa+FT5GMSCvo",
	"+pshlK2dvceM+48K5KZZREHXkxDgvtk68oZvzhbomPNJzFvF5V1taabI/5z/+JoISZyO+4amV3WEkAEZ",
	"M/9KsWKYSyYLEhCZnkMQu+svBNrbdlyoUaEWZTudRY3m95hWFQHFQ//o+Hivivydl3x9QkMbY2Dr7gd2",
	"KgJrmup8Q6gKXJfW+qhjhRi0KJNWzMRW63p/Rl9QMBZwsm9sacTmh4X7tsN30UkX20KHCy/CAqa7HSc9",
	"ZEQheB+77MOt9TTyZXf/OXa3LzuQUpgzzTAwsbly/HXWArIpK+fAHQibPyR/FRVKeLZwNMTqOOAMGEzj",
	"53SvfILHpE2UGH45OOgu/ODA7TlTZA7XyGQpx4ZddBwcHJqderInK9tqTW4lxRh1dvYZrrdZr+i6Tp9P",
	"CRc84VjXeAUkUAufHD/8w67wjOMTUyOaEit6f5xOvvoDb9kZN4INzQm2tKt5/IddzTnIFUuBXEBRCkkl",
	"yzfkJ17nTAxqMfTZ30/8iotr7hFhtMqqKKjcOCGa1jyn4kEWy638p/depxG0kYvShcKwExRRJ636/Xwx",
	"ef/R6wAjFYttzY5mmCh6bFNQQeNh7QT9B+roA1rAB38/cplt4x/RE2FV3CP/kjjesqX4fNBrA2unR0p1",
	"uqzKow/4H1Q5A7BsHqkjveZH6IU8+tBajfvcW03796Z72GJViAw8wGI+txWqtn0++mD/DSaCdQmSmTsF",
	"3267X22OjSPMG7/p/7zhafTH/jrKTrHl2M9HH9rlSVsIUstKZ+I66IseAOu+6s9XF+xv/X10TZk28ot7",
	"rI7lY/qdNdD8yGWm7PzaJIPqfcEMV8GPHYmnFPZRVFvZfEuvL1rxvtI+5ngm0EAwxAvXyYxxZBAhA2vs",
	"evZjX3vpsa2LJdjIPe8ajYiHWpCZFDRLqcKqJC6Ha09t/XhL1aj79uQs4vhCMNES0H/3bI764U5vCI47",
	"Rv4L9iUo5oVyuLL2wN9YZupB9IxmxL+iS8grmmOQQkZOnWTewsZvLe98fgHlM0sUn0wEeOYPnyIU33q2",
	"dDcZf9QVJFsec98bBc8wgAXwxLGgZCayja9NJ+m1XtuXoV3mdlQXGYx+vAMj4e/bMrjLIPjFDvfFDvfF",
	"UvPFDvdld7/Y4Uba4b5Yqb5Yqf4lrVT7mKZiYqYzzQxLm1iEh7bmtbodbZKd1Sy+/U6b6Vom69d0Y/qQ",
	"kAtMJUXNLQErkDTHurcqyA1XYAgkvvaG7OSSJy1IbKChmfh+818b4XlZHR8/BnL8oNtHaZbnIW/u90V5",
	"Fz/ZRNTfkMvJ5aQ3koRCrCBzj56CZDu2185h/7963B97WbrwXeiSrqB+FE5UNZ+zlFmU54IvCF2IJjrZ",
	"8G3CBX4BaYCzuU4J01OXT5gpcm0W70ohtXMCtSX3vgRw1mzhTo9+h1ziznxDeHt68v9jjBv/X1pKv8Xb",
	"6lsx0q1j97jqF67yKbjKZ+crf3QfaWA+/KcUM58cP/nDLig0Nr8WmnyHkfe3E8fq8nKxlK83FbR86gRv",
	"7muid8NoWLxF6zjYd+/NRYD1pN0F2wR3nhwdYVLJpVD6aGKuv3bgZ/jxfQ2zLwI6KSVbYU2R9x//XwAA",
	"AP//odOj2UbvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
