// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//8GF7sbwu8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
