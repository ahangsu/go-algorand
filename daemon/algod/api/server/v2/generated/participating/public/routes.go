// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
