// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwF0Ukq2woIi7z/+vwAAAP//QK9s8bruAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
