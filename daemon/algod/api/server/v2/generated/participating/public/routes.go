// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
