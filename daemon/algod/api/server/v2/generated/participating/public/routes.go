// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"z6XvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
