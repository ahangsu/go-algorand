// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
