// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7B89nJSSrfANhfcf/18AAAD///bpDL9D6QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
