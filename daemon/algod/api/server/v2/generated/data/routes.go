// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
