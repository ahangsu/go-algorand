// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
