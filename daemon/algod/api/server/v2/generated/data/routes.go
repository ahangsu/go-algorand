// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
