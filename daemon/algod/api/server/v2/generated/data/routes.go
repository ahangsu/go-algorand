// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bbDXyLsP/ycAAP//bPuxjdXuAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
