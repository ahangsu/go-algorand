// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u5okfFHKSSnZGmtcvPvw/wIAAP//I+pSNdbtAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
