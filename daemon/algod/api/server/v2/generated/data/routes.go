// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
