// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a5PcNpLgX0HUboQsXbFbL3tGipjYa0u2p9eyrVC3Pbcr6TwoMqsK0yyAA4DdVdbp",
	"v18gEyBBEqxiPyzbG/NJ6iIeiUQikW98mOVqUykJ0prZ8w+zimu+AQsa/+J5rmppM1G4vwowuRaVFUrO",
	"nodvzFgt5Go2nwn3a8XtejafSb6Bto3rP59p+GctNBSz51bXMJ+ZfA0b7ga2u8q1bkbaZiuV+SFOaIjT",
	"l7OPez7wotBgzBDKH2S5Y0LmZV0As5pLw3P3ybArYdfMroVhvjMTkikJTC2ZXXcas6WAsjBHYZH/rEHv",
	"olX6yceX9LEFMdOqhCGcL9RmISQEqKABqtkQZhUrYImN1twyN4ODNTS0ihngOl+zpdIHQCUgYnhB1pvZ",
	"87czA7IAjbuVg7jE/y41wC+QWa5XYGfv56nFLS3ozIpNYmmnHvsaTF1aw7AtrnElLkEy1+uIfVcbyxbA",
	"uGRvvn7Bnjx58swtZMOthcIT2eiq2tnjNVH32fNZwS2Ez0Na4+VKaS6LrGn/5usXOP+ZX+DUVtwYSB+W",
	"E/eFnb4cW0DomCAhIS2scB861O96JA5F+/MClkrDxD2hxne6KfH8v+mu5Nzm60oJaRP7wvAro89JHhZ1",
	"38fDGgA67SuHKe0Gffswe/b+w6P5o4cf/+3tSfbf/s/Pn3ycuPwXzbgHMJBsmNdag8x32UoDx9Oy5nKI",
	"jzeeHsxa1WXB1vwSN59vkNX7vsz1JdZ5ycva0YnItTopV8ow7smogCWvS8vCxKyWpWNTbjRP7UwYVml1",
	"KQoo5o77Xq1FvmY5NzQEtmNXoiwdDdYGijFaS69uz2H6GKPEwXUjfOCCfr/IaNd1ABOwRW6Q5aUykFl1",
	"4HoKNw6XBYsvlPauMte7rNj5GhhO7j7QZYu4k46my3LHLO5rwbhhnIWrac7Eku1Uza5wc0pxgf39ahzW",
	"NswhDTenc4+6wzuGvgEyEshbKFUCl4i8cO6GKJNLsao1GHa1Brv2d54GUylpgKnFPyC3btv/8+yH75nS",
	"7Dswhq/gNc8vGMhcFVAcsdMlk8pGpOFpCXHoeo6tw8OVuuT/YZSjiY1ZVTy/SN/opdiIxKq+41uxqTdM",
	"1psFaLel4QqximmwtZZjANGIB0hxw7fDSc91LXPc/3bajiznqE2YquQ7RNiGb//ycO7BMYyXJatAFkKu",
	"mN3KUTnOzX0YvEyrWhYTxBzr9jS6WE0FuVgKKFgzyh5I/DSH4BHyevC0wlcEThhkFJxmlgPgSNgmaMad",
	"bveFVXwFEckcsR89c8OvVl2AbAidLXb4qdJwKVRtmk4jMOLU+yVwqSxklYalSNDYmUeHYzDUxnPgjZeB",
	"ciUtFxIKx5wRaGWBmNUoTNGE+/Wd4S2+4Aa+eDp2x7dfJ+7+UvV3fe+OT9ptbJTRkUxcne6rP7BpyarT",
	"f4J+GM9txCqjnwcbKVbn7rZZihJvon+4/QtoqA0ygQ4iwt1kxEpyW2t4/k4+cH+xjJ1ZLguuC/fLhn76",
	"ri6tOBMr91NJP71SK5GfidUIMhtYkwoXdtvQP268NDu226Re8Uqpi7qKF5R3FNfFjp2+HNtkGvO6hHnS",
	"aLux4nG+DcrIdXvYbbORI0CO4q7iruEF7DQ4aHm+xH+2S6QnvtS/uH+qqnS9bbVModbRsb+S0XzgzQon",
	"VVWKnDskvvGf3VfHBIAUCd62OMYL9fmHCMRKqwq0FTQor6qsVDkvM2O5xZH+XcNy9nz2b8et/eWYupvj",
	"aPJXrtcZdnIiK4lBGa+qa4zx2ok+Zg+zcAwaPyGbILaHQpOQtImOlIRjwSVccmmPWpWlww+aA/zWz9Ti",
	"m6QdwndPBRtFOKOGCzAkAVPDe4ZFqGeIVoZoRYF0VapF88NnJ1XVYhC/n1QV4QOlRxAomMFWGGvu4/J5",
	"e5LieU5fHrFv4rFRFFey3LnLgUQNdzcs/a3lb7HGtuTX0I54zzDcTqWP3NYENDgx/y4oDtWKtSqd1HOQ",
	"Vlzjv/q2MZm53yd1/mOQWIzbceJCRctjjnQc/CVSbj7rUc6QcLy554id9PvejGzcKGmCuRGt7N1PGncP",
	"HhsUXmleEYD+C92lQqKSRo0I1lty04mMLglzdIYjWkOobnzWDp6HJCRICj0YvixVfvFXbtZ3cOYXYazh",
	"8cNp2Bp4AZqtuVkfzVJSRny82tGmHDHXEBV8toimOmqWeFfLO7C0glseLc3DmxZLCPXYD5ke6ITu8gP+",
	"h5fMfXZn27F+GvaInSMDM3ScvZOhcNo+KQg0k2uAVgjFNqTgM6d1XwvKF+3k6X2atEdfkU3B75BfBO6Q",
	"2t75MfhSbVMwfKm2gyOgtmDugj7cOChGWtiYCfC99JAp3H+PPq413w2RjGNPQbJboBNdDZ4GGd/4bpbW",
	"OHuyUPpm3KfHViRrTc6Mu1Ej5jvvIQmb1lXmSTFhtqIGvYFaL99+ptEfPoWxDhbOLP8VsGDcqHeBhe5A",
	"d40FtalECXdA+usk019wA08es7O/nnz+6PHPjz//wpFkpdVK8w1b7CwY9pnXzZixuxLuD1eG2lFd2vTo",
	"XzwNhsruuKlxjKp1DhteDYciAyiJQNSMuXZDrHXRjKtuAJxyOM/BcXJCOyPbvgPtpTBOwtos7mQzxhBW",
	"tLMUzENSwEFiuu7y2ml28RL1Ttd3ocqC1kon7Gt4xKzKVZldgjZCJbwpr30L5lsE8bbq/07QsitumJsb",
	"Tb+1RIEiQVl2K6fzfRr6fCtb3Ozl/LTexOr8vFP2pYv8YEk0rAKd2a1kBSzqVUcTWmq1YZwV2BHv6G/A",
	"oihwLjZwZvmm+mG5vBtVUeFACZVNbMC4mRi1cHK9gVxJioQ4oJ35Uaegp4+YYKKz4wB4jJztZI52xrs4",
	"tuOK60ZIdHqYncwjLdbBWEKx6pDl7bXVMXTQVPdMAhyHjlf4GQ0dL6G0/M4luv4EKdhfBNImYFnhGuJu",
	"vRKrtY1E7tdaqeXdw5iaJQUofiCFpXR9hmrL96pwB83W5g7Ek3aw9vS7PY3PPF+o2jLOpCoAbUy1SQsu",
	"I7EM6ERF36+NZSG7Jh1kAY6Qcl671dYVQ8/mgJe2HTOeE/VmiBoz4tdpHHLUiqYjP3mpgRc7tgCQTC28",
	"88S7dXCRHN2yNlz9XmxKnKUOXJVWORgDReaNNgdBC+2Irdo9eELAEeBmFmYUW3J9a2AvLg/CeQG7DIMI",
	"DPvs25/M/d8AXqssLw8gFtuk0NuowN5DNoR62vT7CK4/eUx2XAMLPNfp245BlGBhDIXXwsno/vUhGuzi",
	"7dFyCRp9Vb8qxYdJbkdADai/Mr3fFtq6GgmN86qfk37chkkuVRA6UoOV3NjsEFt2jTr6qVtBxAlTnBgH",
	"HhFKXnFjyb8qZIFmIbpOcB4SUNwU4wCPiuhu5J+CdD4cO3f3oDS1aUR1U1eV0haK1BokbPfM9T1sm7nU",
	"Mhq70QesYrWBQyOPYSka3yOLVkII4rZxQ/gAhOHi0Fjv7vldEpUdIFpE7APkLLSKsBuHB40AIkyLaCIc",
	"YXqU08QkzWfGqqpy3MJmtWz6jaHpjFqf2B/btkPi4ra9twsFBqOSfHsP+RVhlgLD1twwDwfb8Asne6CJ",
	"gBzBQ5jdYcyMkDlk+ygf1R/XKj4CBw9pXa00LyAroOS74aA/0mdGn/cNgDveqoLKQkYRPulNbyk5BFTs",
	"GVrheCYlPDL8wnJ3BJ3m0RKI731g5AJw7BRz8nR0rxkK50puURgPl01bnRgRb8NLZd2Oe3pAkD1HnwLw",
	"CB6aoW+OCuyctXpZf4r/AuMnaOSI60+yAzO2hHb8ay1gxL7og6ej89Jj7z0OnGSbo2zsAB8ZO7Ijxs7X",
	"XFuRiwp1nW9hd+eqX3+CpAuOFWC5KKFg0QdSA6u4P6PYlP6YN1MFJ9mlhuAPDFOJ5ZTCoMjTBf4Cdqhz",
	"v6agx/MoVPIOdNnEqO5+4pIhoCGUyongcRPY8tyWOyeo2TXs2BVoYKZebIS1FMzcVXWtqrJ4gKTNf8+M",
	"3sFFAYNhB6Z43M5wqGh5w62Yz0gn2A/feU8x6KDD6wKVUuUE69EAGUkIJsVCsEq5XRc+rjpE1gZK6gDp",
	"mTZ6N5vr/57poBlXwP5L1SznElWu2kIj0yiNggIKkG4GJ4I1c/qohxZDUMIGSJPELw8e9Bf+4IHfc2HY",
	"Eq5CMoJr2EfHgwdox3mtjO0crjuwFbrjdpq4PtAZ4i4+r4X0ecphr7sfecpOvu4N3nhQ3JkyxhOuW/6t",
	"GUDvZG6nrD2mkWkRBzjuJD9HNHRq3bjvZ2JTl9zehUcHLnmZqUvQWhRwkJP7iYWSX13y8oem2wGdro2Q",
	"EpsNFIJbKHes0pADRa47Uc00Yx8ximnL11yuUELXql75oCoaBzlsbcgWoms5GCIpxditzFZa1VWK4/pA",
	"2pC84OQX4E6HinYEO5PGcMWb+Xy+ypSrMOxctM3fuDHHPDbz2aiK6ZB62aqYhJxuBsYE7tsRsCL8tBNP",
	"tOsj6pywMcRXvC2Oet3m/jo28nboFJTDiaMwr/bjWKSX02/L3R1IGTQQ01BpMHgnxHYhQ1/VMs628peG",
	"2RkLm6HpnLr+PHL83owqaEqWQkK2URJ2yQRjIeE7/Jg8TngvjXRGCWGsb1/o78DfA6s7zxRqvC1+cbej",
	"E/q6CXG8g83vj9vzmsR5ZmgVhLJinOWlQJuhksbqOrfvJEerRHTYEqEgQf0at1O9CE3ShrGE3coP9U5y",
	"DANqbBVJ9/USEor51wDBXGXq1QqM7Um3S4B30rcSktVSWJxr4/Yrow2rQGM8xhG13PAdW/ISzWq/gFZs",
	"UduuvIe5LsaKsvQuHDcNU8t3kltWglNZvxPyfIvDBRdooBkJ9krpiwYL6etlBRKMMFk6ZOUb+orRhH75",
	"ax9ZiLnJ9JmM/m78NiFmh0aLNt/2/372H8/fnmT/zbNfHmbP/tfx+w9PP95/MPjx8ce//OX/dX968vEv",
	"9//j31M7FWBPZWJ4yE9fel3o9CUKvK3VfwD7J7P4boTMkkQW+7Z7tMU+w6xDT0D3u+YQu4Z30m6lI6RL",
	"XorCCSI3IYc+ixucRTodParpbETP/BHWek0x8hZchiWYTI813vgaH0Z5pXOe0A3l05jwvCxrSVsZxD8K",
	"6Q/RNmo5b/LaqOTFc4ZJT2seQsX8n48//2I2b5OVmu+z+cx/fZ+gZFFsUylpBWxT2oE/IHgw7hlW8Z0B",
	"m+YeCHsysIi8+fGwG3BqpVmL6tNzCmPFIs3hQqC0tzJs5amkCGZ3ftCptfO2crX89HBbDVBAZdepVPiO",
	"pICt2t0E6AUaVFpdgpwzcQRHfS2/cAqLD3EqgS8xJRvVHzVFHG/OARFaoIoI6/FCJqnSKfpB4dZz64/z",
	"mb/8zZ3L437gFFz9ORsPVvjbKnbvm6/O2bFnmOYeZUfS0FE+W0KX8ykbnRAUx82oAAilh76T7+RLWAop",
	"3Pfn72TBLT9ecCNyc1wb0F/yksscjlaKPQ9ZIC+55e/kQNIardET5d+wql6UImcXsUTckifVXRiO8O7d",
	"W16u1Lt37wfe+KH86qdK8heaILsSdq1qm/ms8UzDFdcpb4dpsoZxZCoLsW/WOfNjEyv2Wel+/DTP41Vl",
	"+tmDw+VXVemWH5Gh8blxbsuYsUoHWcQJKAQN7u/3yl8Mml8Fxb42YNjfN7x6K6R9z7J39cOHT4B10un+",
	"7q98R5O7Ciar96PZjX2tHhdOeg1sreZZxVcpp8q7d28t8Ap3H+XlDSrZZcmwWyeNL4Qp41DtAgI+xjeA",
	"4Lh2ShIu7ox6hQpB6SXgJ9xCbOPEjdbVe9P9ihL7brxdveTAwS7Vdp25s51clXEkHnamKRyyckJW8L8b",
	"scIYR19jZQEsX0N+4YtfwKayu3mnewjx8IJmYB3CUFkUSsvBxHw0SS+A1VXBvSjO5a6fIW3A2hBk+QYu",
	"YHeu2rz+66REdzN0zdhBRUqNpEtHrPGx9WP0N9/HEWFWYlWFRFfMeApk8byhi9Bn/CCTyHsHhzhFFJ0M",
	"0jFEcJ1ABBH/CApusFA33q1IP7U8p2Us6OZLlEgJvJ/5Jq3y5EN+4tWg2Ze+bwBrLKkrwxbcye3Klwei",
	"LNSIi9WGr2BEQo69AhNzPTueBBzk0L2XvOnUsn+hDe6bJMjUOHNrTlIKuC+OVFCZ6QV6hZnI8eRN41j1",
	"zyNsUaKY1ETEEdPhuuOdoTJmY6ClCRi0bAWOAEYXI7Fks+YmVC7CAk/hLE+SAX7FrOp9tTROoxilqIpT",
	"Uykj8Nz+OR1ol76iRiijEWpnxKrlhDoYTsLHsOjUdiiJAlABJaxo4dQ4EEqb4d1ukIPjh+WyFBJYlgp3",
	"4saoXFDpqfaa8XOAk48fMEYmYDZ5hBQZR2CjQxUHZt+r+GzK1XWAlD5DnYex0RUb/Q3pZBoKAHYij6oc",
	"CxcjbpU8cADuY+Sa+6sXqYnDMCHnzLG5S146Nuc1vnaQQUkHFFt7BRy8S//+mDi7xwJPF8u11kRX0U1W",
	"E8tMAei0QLcH4oXaZpRNl5R4F9uFo/dkTDTm9qUOJhXPuGfYQm0xTASvForBPQDLOBwBjEjD3wqD9Ir9",
	"xm5zAmbftPulqRQVGiQZb85ryGVMnJgy9YgEM0Yun0X1MG4EQM/Y0RaX9crvQSW1K54ML/P2Vpu3dZ5C",
	"uknq+I8doeQujeBvaIVpKli87kssSTtFN9qhW7wjEiFTRO/YxNBJM3QFGSgBlYKsI0RlFynXndNtAG+c",
	"s9AtMl5giRAud/ejEBoNK2EstEb04Kj/LcyTHCuTKbUcX52t9NKt741SzTVFpW+wY2eZn3wFGIO6FNrY",
	"DD0QySW4Rl8bVKq/dk3TslI3SIfqeIoizRtw2gvYZYUo6zS9+nm/femm/b5hiaZeIL8VkiImFlh3Nhm6",
	"t2dqiu7cu+BXtOBX/M7WO+00uKZuYu3IpTvHH+Rc9DjvPnaQIMAUcQx3bRSlexhklHI55I6R3ESHE1Mu",
	"j/ZZXweHqQhjHwwbCYmfY3cUjZRcS2Qw2LsKgW4iJ5YIG5VtHeZCjpwBXlWi2PZsoTTqqMbMr2XwCMWu",
	"eljA3fWDHcBAZPdMpWNoMN26Zq2ATwV4O2VFjiZh5rxbfSxmCPFUwoTy8UNENelah3B1Drz8FnY/uba4",
	"nNnH+ex2ptMUrv2IB3D9utneJJ7RNU+mtI4n5Joo51Wl1SUvM29gHiNNrS49aWLzYI/+xKwubcY8/+rk",
	"1WsP/sf5LC+B66wRFUZXhe2qP8yqqITayAEJ5amdzhdkdhIlo81v6j7FRumrNfg6v5E0OihI2DocoqPo",
	"jdTLdITQQZOz943QEvf4SKBqXCSt+Y48JF2vCL/kogx2swDtSDQPLm5aVcskV4gHuLV3JXKSZXfKbgan",
	"O306Wuo6wJPiufZUIt5QsW3DlOy70DHodld5r/uGYzlBsooMmZOsN2hJyEwp8rSNVS6MIw5JvjPXmGHj",
	"EWHUjViLEVesrEU0lms2pWBID8hojiQyTbJmSYu7hfIPqdRS/LMGJgqQ1n3SeCp7BxXrN3pr+/A6dbLD",
	"cC4/MFno2+FvI2PEpTT7Nx4CsV/AiD11A3BfNipzWGhjkXI/RC6Jazj84xkHV+IeZ72nD0/NFLy47nrc",
	"4ndPhvzPEQYVwD786EpQXn1Nz5E5ko+oCJMttfoF0noeqseJTJdQPFRglMsvEEfax08HdFhMY91p34Jp",
	"Zx/d7jHpJrZCdYMURqgedz5yy2EVw2Ch5pK2mt406MS6pQkmjio9pvFbgvEwDyJxS3614KkSj07IcDCd",
	"tA7gji3dKhY6B9ybJtyfZmeRL7lpKyiLuQLdJqENK6LcUGCgaSeLCq1kgFQbywRz8v+VRiWGqeUVl/Q0",
	"hutHR8n3NkDGL9frSmmsQWDSZv8CcrHhZVpyKPKhibcQK0GvPtQGomcF/ED0og5RkX+aoUli8ag5XbKH",
	"8+htE78bhbgURixKwBaPqMWCG+TkjSGq6eKWB9KuDTZ/PKH5upaFhsKuDSHWKNYIdajeNM6rBdgrAMke",
	"YrtHz9hn6LYz4hLuOyz6+3n2/NEzNLrSHw9TF4B/tWMfNymQnfzNs5M0HaPfksZwjNuPepRM16Znu8YZ",
	"157TRF2nnCVs6Xnd4bO04ZKvIB0psjkAE/XF3URDWg8vsqA3Z4zVaseETc8Pljv+NBJ97tgfgcFytdkI",
	"u/HOHaM2jp7aNwNo0jAcPWDjy70GuMJH9JFWwUXUUyI/rdGU7rfUqtGT/T3fQBetc8ap8EQp2uiFUISa",
	"nYa6Nlj/til7S7hxc7mlo5iDwQxLVmkhLSoWtV1mf2b5mmueO/Z3NAZutvjiaaLmb7f2pLwe4J8c7xoM",
	"6Ms06vUI2QcZwvdln0kls43jKMX9NtsjOpWjzty0227Md7h/6KlCmRslGyW3ukNuPOLUtyI8uWfAW5Ji",
	"s55r0eO1V/bJKbPWafLgtduhH9+88lLGRulUsbr2uHuJQ4PVAi4xdi+9SW7MW+6FLiftwm2g/209D0Hk",
	"jMSycJZTisCXKqGdhjrUjSXdx6onrANjx9R9cGSw8EPNWbfm76fno3cTBZX2dAXD9tCx5b4EPOAffUT8",
	"xuSCG9j68mklI4QS1TxPkkzRfI987Jx9qbZTCad3CgPx/A5QlERJLcripzbzs1dSXnOZr5M+s4Xr+HP7",
	"+FWzOLoDk3Xn1lxKKJPDkbz5c5BLE5LzP9TUeTZCTmzbr3JPy+0trgW8C2YAKkzo0Cts6SaIsdpNqmuC",
	"tsuVKhjO0xY5a4/r8HWEqIb1P2swNpWghB8ocAxto44dUAllBrJAjfSIfUPv266BdSrYoCYYShWE8rVk",
	"tK+rUvFijiUUzr86ecVoVupDT7hQCecVKkLdVfRsYlH9xmkhyOE1lnR6xPRx9sdru1UbmzUVl1MJqK5F",
	"WxNa9PwEqCLF2DliL6OXKilX1Q3h6GEp9MZpdc1oJB8hTbj/WMvzNap9HdY6TvLTa48HqjTRe3/Nuz1N",
	"UUM8dw5uX36cqo/PmXK6+ZUw9KwpXEI357VJAPdmh5AD212erqUkSjm6xi3XlDC8LtoDcHRFBldCErIe",
	"4q8p9FPp/uuWYj/DXskaS/267oOH/iiDsnmPJTxXnXOppMixwlHqivbvn07xs00oBtU35IYj7k9o4nAl",
	"q8k3oXgei6P15QMj9IgbGvqjr25TiTroT4sPba65ZSuwxnM2KObhUQRvaxTSgC9Sia/lRnxS6Y7vEjlk",
	"0h2eNW6Ta5IRpt6MKI9fu2/fe9MCxqRfCIlKhEebF/zIGojPM1qneQjLVgqMX083/9i8dX2OMBW3gO37",
	"o/CcI45Brj+3bPJzD4c6CV5v72V2bV+4tr5CT/NzJ8qZJj2pKj/p+JMZSXnAbuUoghPeyyy4jyLkNuPH",
	"o+0ht73hKnifOkKDS3R2Q4X38IAwmucjek8TOaGVKApbMAoTS1ZJEDIBxishoX1sNHFB5MkrATcGz+tI",
	"P5NrbkkEnMTTzoGX6OFOMTRjvXvjtkP16xM5lOAawxzj29i+fDHCOJoGreDG5a5549RRdyRMvMDHlT0i",
	"h+9YoFTlhagCsxZ6L1ukGIdj3OHtnO4FMDwGQ5mIulvN6eRc5yYaS0Rd1MUKbMaLIlUz9Ev8yvArK2qU",
	"HGALed3UlqwqlmPdlW4hmiG1+YlyJU292TNXaHDL6aKnYhLUED9XE3YYE10WO/w3VVhxfGd8oMe1Qw1D",
	"VId/SeKacnN3pIHU62g6M2KVTccE3im3R0c79c0Ive1/p5ReqlUXkE9cfmIfl4v3KMXfvnIXR1ydYVAt",
	"lK6WpngCBvap8MAfqo1N2m+XK+FVNigfig6l5gGx/QaI8afA5nj5jYT3RkU3ON2v5KEcC/LNR2PSufXZ",
	"cZazvSxoNOOIIoQotwihSFtnx6KCKCjIfR70niYZDuRsm668FyE0hJsNAfo2xLKyigvvfm+ZxRCzPup9",
	"mIcwJR623eD+Inws+ajF7tvLsbhvZoRclcDwe/+poAvwKfPN6/m01hD5FFRC+tU/XkvjNZH3yfUPDa84",
	"1W9rDh013p77svS0TK+Tf/sTxckxkFbvfgem3MGmDx5aGkq7ZJ5qm7CmovGkCsedWzH9ZtJ4jaW2rhLS",
	"U6WMaKtopx5TmhhPd47vIUU1ooZjhWCWS8gtlk5vnfQa4DoVo9xk0dOF/6q1NKI7NmGHvsTSvrpKw3rp",
	"By60QepTlL5HtaaPplcROmlCsZApYe3ZFUj/emA3qWFyaPVyCbkVlwdSzf62BhmlMc2DEYJeAY4yz0QT",
	"qouVSq5vYmsB2pcJtheeqGLgrcEZSzS5gN09wzrUkCx+PQ/3yk2KVCAGkDtkjkSUSYU6kNXUe5+FaSgD",
	"sRBCi6g7tOW+Rt/NiRInbzhXIEl347bJlHumTD/cMWku1/VaKcYYdTqWjTas+z8ubL/EZxZM86ZdKHIR",
	"q6TsdFgK8MoXycDEwMZREMplgAm/hSxgmqUUFxC/7INumSuui9AiaWcIJoxsz300SCELNev7QC+bmUUb",
	"CDpMGkoUl8Jw37xUTv7KxmKmu7GXTeDCPUMRJlRsG6NKHVxL0P4FNBT2SmUgsyoEju6DYx8q/PP1N0GC",
	"GS3oSMCNlll509aRwcK2HMuqcB89Ey+QadhwB52Oqr2Mz7kP2S/oe8iSCYVND5pTGno9XOI9hAALM0Bi",
	"TPVL5m/Lw9k3N7GsCCnpBVqTKv0iHSpj03+lVVHndEHHB6OxPk0urLSHlSSNEvlwlT2BOEphvIDdMUn8",
	"oTZ+2MEYaJKcCPSoZEBvk+/U1mRScK/uBLzf0kwzn1VKldmIZf90WK+mT/EXIr+AgrmbIoTKjbwzwj5D",
	"g3Ljur1a70J9lqoCCcX9I8ZOJAUnBy9ut2Byb3J5z+6bf4uzFjWVkPIWpKN3Mh3licWd9C25WRhmPw8z",
	"4FjdLaeiQQ5UQ9mO1MrR/Crx6s7RVBV06Fftv4TSEhVBkZJJ2kc+DgSFNPEg7TsLbUzIUDooS3WVIRVl",
	"TbGrlM7h2nWZZCjv2XZz2F5AFFzCjb9Ad2zNC5YrrSGPe6Tj+QmojdKQlQpjTVJusKV18tAGg3glK9WK",
	"qcqpuVQzLjgMko+ARHM5xtNalnu+OllvnAhL7uAlMimGbYej73khZB5iQqwTair/SJTMeWUQT157UnrT",
	"fj+KCoZF3q7GTZeZUtlk4TBKkiVUZORmGSlDAMYnxXq8UeNrLe36D6uc9zgTtcMAD0821349xVN+/xGV",
	"g2b2CMwJJ24wfMJSmXgcpruu/vNCY499WbUReRrdf6wYkdHIjgNP3yTW15Cjf5kn5PSN4CrpcN3v36Rn",
	"zBZTvZxNxeOJxyICYNzv2YFhkvfzumAs8VnAjCeQfNqI4fPOq62id/ZDNTqi8ZyTGu6YGBdlrcHnmNH7",
	"Zb2HVypu1+Fads2HyrJTvMBgAhg93sENmXaCick/ntaXd1SVlXAJHXewT3yr8xyMEZcQP7xGnVkBUKHB",
	"ta8GpPycMZfryYZ+7VnkKZuC3aSwSIilnWIHJMGk3LqVGR0TM/UoOYguRVHzDv7MLZ6yGnvFKsGGA6wT",
	"OcW1mUR6cftYxMHIBKT55LmU6cCEOO+ysfLgbEVjDSYibE+2qfiVHNeKhkTZFWemPd4WIfarLeTn2Lvj",
	"eb89ThgOxkwvp3pUfNDNDt9Uux6lsn1ENnjKLim/GAhPkcblT4Is6vsmBFCyAwqTGECYljdgHB+0cWJR",
	"sw3fsUIsl6DJ02EslwXXRdxcSJaDtlw4tW9nbi7zO2h1DfODYr/j1DhoYFYpBQCNdgRIufP61JhIPkGC",
	"RbdWQnqla9uqsdf6BruSTizgW6d6YITVCBH4lGhUPOiwKonCFtvwC7jmPEb8AvunwUIl3jBqFc46ZYqP",
	"e2n9B0QdHvgfpbB7qZ30nn7IG7lpiBgDDcpV62SnzRnSYCpK8Zye7IkjFfsV8MNek82I5kv6cw4s/HV+",
	"rtDudzpuBt7wqnLTeJdiHzIyk3grsbSqx7sJX6a56d1I/hUACxWGMWiOunBzZVFSCjhVc0lD4gQolmxT",
	"xc/QqHnQxxwBR3uI1/DcLYAAGkg+zB0kD02B0CAOAgY6VtBpAah3vbVdx22LBpx9P39P3nYj7CXcYIQ3",
	"tcSdRfqmOx7DSZqbbd4PTklRRHhJMq81yqNXfDe2syNWifgx6P3LakVvB1GAfSjoIi1Xlbmu5r1HdhgG",
	"BEOVWZXRyja8Gj1zRGtUghWqKE4CV+QVh5icscXdnrNrIqHHTVIJHr9LA9M1l9m/LcbWOVJi/3diTZtc",
	"4awRf0nMSRjbknfMzUqYTtqKYbRfYguiR2/3x6TEFY7b1GlNQaPoww6abJ89fddquNOe3w0dDoAXhypF",
	"D/AGr5EH5zfOQf6uQUq0lPdjlNBZ/qHoJ7/A1iQQbZGXsq0FqjdPeWvdfYlC28yLJmJs7K3ofmAZljN2",
	"Yl1ZJgLSSPDHyysmHHcp60tefvqgMqxzfYL4gOLNuBs6jkqKkUyoNDdLAHzFJ80dRSDd3dTyNQbB/Q3c",
	"HiXFAz+UtzV0hACqHmJrzUtymSzDS5mXINkVjknh4o++YAtfIKXSkAvTt2FchUesmiAcfNPRJ11u7YGo",
	"n0Pr/EnZW5DxMpgE2fftgzhojF/JFsL2iP7GTGXk5CapPEV9A7JI4C/Fo+JKpQeui4tOHDk9MNZLkFQa",
	"7jiePMoMu2Y8+bAG69TlUcy0u3RqA8N1Tr6tO7hNXNTt2qYmQwyRu+/VlCk5DGlJzXXHJApCCL4kxhBU",
	"9vdHf2calvhUsGIPHuAEDx7MfdO/P+5+dsf5wYOkmvjJ0icIR34MP2+KYn4aS6inpPGR2g29/ahFWRwi",
	"jE4ljvaxbaw18bOv9/ObPPf9M0W5Do+qf3L1Oolb/U1AxCTW2pk8miqqsTGhvIbvliimgREkea2F3WEZ",
	"4mDoFz8nEz2+aeKofRx+Y3z1d59VF9AUsm6jrmsTbtdvFC/xPiKbsHS3kCqP2FdbvqlK8AflL/cWf4In",
	"f35aPHzy6E+LPz/8/GEOTz9/9vAhf/aUP3r25BE8/vPnTx/Co+UXzxaPi8dPHy+ePn76xefP8idPHy2e",
	"fvHsT/ccH3IgE6CzUPRu9n/wTfzs5PVpdu6AbXHCK/Et7Oj5XUfG4WFfnuNJhA0X5ex5+Ol/hxN2lKtN",
	"O3z4deZras3W1lbm+fHx1dXVUdzleIVhlplVdb4+DvMMXv49eX3axKeQuwZ3lMpRBOUtkMIJfnvz1dk5",
	"O3l9etQSzOz57OHRw6NHbnxVgeSVmD2fPcGf8PSscd+PPbHNnn/4OJ8dr4GXmJXg/tiA1SIPnzTwYuf/",
	"b674agX6yL927H66fHwcxIrjDz7c9OO+b8fxw2HHHzpRucWBnviw0PGHUC93f+tOQVofjRx1mAjFvmbH",
	"CyzDNbUpmKjx+FJQ2TDHH1BcHv392NcNSn9EtYXOw3EIXU+37GDpg906WHs9cm7zdV0df8D/IH1GYFGW",
	"bgTuLOmm+AZsKLFDPXwOWpN81tD5aUHNBzlRvhI2PQ3y/O20mmAQpnNaYwFG+HLpyDHccWgPdCjH0bJr",
	"9PpEz1jsK/j6cT4IKsbSyegYChWjOy95+4d8hWH/efbD90xp5vXj1zy/aCJU2OmSyqxqdSmwcEcRVXtx",
	"PZvl/LMGvWvX46/OeAHB9uNDXTZmVXVrBzRi+XusYYmAIsN4/PDhnT1/PtjZjxQU0gwX4LrNiAP++iLc",
	"mh0ydHzy6cNHd7a2bkryrRfWH26wqlOJGUHuFmB0y+GCnv5hF/QCtWlH8UshC3q70nI803RAcX1//sOu",
	"z4pNiDyW+AwwGBQGPr/DA/bpidDJ5Lxk2JJW8+QPu5oz0JciB3YOm0pprkW5Yz/KpgZXVNt7eM39KC+k",
	"upIBEU7orjcbrnf+CuSsz6rCNUDX4QpL1YWbyPKVwcBXfE1tNp/5AjuwrUCLDUisD/qxuYkvN6qAcMOr",
	"5ZIezNj3+fgD/Rtd6J3Bm1+JaR5jGdvd8Oed9M7OElK5az9KA2TJDWX2djIfu/ux8dlO5m+aC3lwESET",
	"+PUOzJAmGniRNWFy0698c0xj9Z9/Six82nP+yQ7mG9ioSzDMi3cRcTphzSlD5IoL/lii4aPRA/oeLQlp",
	"Idg7OIYzBedOO/hAIj5wJqbvQtdWsyd1bRKcB8ISaPihoWm4v2Hv++EDNNW91AbN/sUI/sUI7pAR2FrL",
	"0SMa3V+Yfw0VhZGwnOdr2McPhrdlrDBXKpXHdLaHWfiSnmO84qzLK37XavP738X9/oLLcJ47O04pgFyX",
	"AnRDBVwOq6z+iwv8j+ECVC7am6bmzEJZmvjsW4Vnn6ITfFkNSVEjE/lA1Xv/PPXz8Yfui8EdG6FZ17ZQ",
	"V1Ff9DFTgMTQdOjfeu/9fXzFhc2WSvuSGvii07CzBV4e+2KxvV/b+myDL1h0LvoxzqRI/nrcPJiX/Ni3",
	"36a+evvlSKMQjB0+t76c2DeCHLLxirx97/gTPsfimWdr6n9+fIxp6mtl7PHs4/xDzw0Qf3zfkESooT+r",
	"tLjEknzvP/7/AAAA///Hu5MFktcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
