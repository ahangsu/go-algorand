// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
