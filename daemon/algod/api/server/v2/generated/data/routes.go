// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
