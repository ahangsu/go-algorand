// Package data provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package data

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Removes minimum sync round restriction from the ledger.
	// (DELETE /v2/ledger/sync)
	UnsetSyncRound(ctx echo.Context) error
	// Returns the minimum sync round the ledger is keeping in cache.
	// (GET /v2/ledger/sync)
	GetSyncRound(ctx echo.Context) error
	// Given a round, tells the ledger to keep that round in its cache.
	// (POST /v2/ledger/sync/{round})
	SetSyncRound(ctx echo.Context, round uint64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// UnsetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) UnsetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UnsetSyncRound(ctx)
	return err
}

// GetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetSyncRound(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSyncRound(ctx)
	return err
}

// SetSyncRound converts echo context to params.
func (w *ServerInterfaceWrapper) SetSyncRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetSyncRound(ctx, round)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.DELETE(baseURL+"/v2/ledger/sync", wrapper.UnsetSyncRound, m...)
	router.GET(baseURL+"/v2/ledger/sync", wrapper.GetSyncRound, m...)
	router.POST(baseURL+"/v2/ledger/sync/:round", wrapper.SetSyncRound, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NUn4opSTUrI11rh49+H/BAAA//8pZPawBe0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
